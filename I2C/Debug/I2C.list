
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000500  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800060c  0800060c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800060c  0800060c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  0800060c  0800060c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800060c  0800060c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800060c  0800060c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000610  08000610  00010610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000634  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000634  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000219e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000097b  00000000  00000000  0002222a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  00022ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000184  00000000  00000000  00022dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005847  00000000  00000000  00022f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000027eb  00000000  00000000  0002879b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c635  00000000  00000000  0002af86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006e0  00000000  00000000  000a75bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000a7c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	080005f4 	.word	0x080005f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	080005f4 	.word	0x080005f4

0800014c <_ZN7I2Cmcal3I2CC1Ev>:
 *      Author: Mohamed Aboelhassan
 */
#include "I2C_interface.h"
#include "GPIO_Interface.h"

I2Cmcal::I2C::I2C()
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
{}
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4618      	mov	r0, r3
 8000158:	370c      	adds	r7, #12
 800015a:	46bd      	mov	sp, r7
 800015c:	bc80      	pop	{r7}
 800015e:	4770      	bx	lr

08000160 <_ZN7I2Cmcal3I2C14I2C_InitializeERNS_7I2C_CFGE>:
I2Cmcal::I2C::~I2C()
{}

void I2Cmcal::I2C::I2C_Initialize(I2Cmcal::I2C_CFG& I2C_cfg)
{
 8000160:	b5b0      	push	{r4, r5, r7, lr}
 8000162:	b086      	sub	sp, #24
 8000164:	af04      	add	r7, sp, #16
 8000166:	6078      	str	r0, [r7, #4]
 8000168:	6039      	str	r1, [r7, #0]
	if(this == reinterpret_cast<I2C*>(I2C1Instance))
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4a19      	ldr	r2, [pc, #100]	; (80001d4 <_ZN7I2Cmcal3I2C14I2C_InitializeERNS_7I2C_CFGE+0x74>)
 800016e:	4293      	cmp	r3, r2
 8000170:	d118      	bne.n	80001a4 <_ZN7I2Cmcal3I2C14I2C_InitializeERNS_7I2C_CFGE+0x44>
	{
		//Enable I2C1 Peripheral Bus clock
		RCC->APB1ENR |= (1<<21);
 8000172:	4b19      	ldr	r3, [pc, #100]	; (80001d8 <_ZN7I2Cmcal3I2C14I2C_InitializeERNS_7I2C_CFGE+0x78>)
 8000174:	69db      	ldr	r3, [r3, #28]
 8000176:	4a18      	ldr	r2, [pc, #96]	; (80001d8 <_ZN7I2Cmcal3I2C14I2C_InitializeERNS_7I2C_CFGE+0x78>)
 8000178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800017c:	61d3      	str	r3, [r2, #28]
		RCC->APB2ENR|=(1<<0)|(1<<3);	//Enable AF & GPOPB work on I2C1 in both cases	 and I2C2
 800017e:	4b16      	ldr	r3, [pc, #88]	; (80001d8 <_ZN7I2Cmcal3I2C14I2C_InitializeERNS_7I2C_CFGE+0x78>)
 8000180:	699b      	ldr	r3, [r3, #24]
 8000182:	4a15      	ldr	r2, [pc, #84]	; (80001d8 <_ZN7I2Cmcal3I2C14I2C_InitializeERNS_7I2C_CFGE+0x78>)
 8000184:	f043 0309 	orr.w	r3, r3, #9
 8000188:	6193      	str	r3, [r2, #24]

		I2C1_Initialize(I2C_cfg);
 800018a:	683c      	ldr	r4, [r7, #0]
 800018c:	466d      	mov	r5, sp
 800018e:	f104 030c 	add.w	r3, r4, #12
 8000192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000194:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000198:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800019c:	6878      	ldr	r0, [r7, #4]
 800019e:	f000 f81f 	bl	80001e0 <_ZN7I2Cmcal3I2C15I2C1_InitializeENS_7I2C_CFGE>
		// Enable I2C2 Peripheral Bus clock
		RCC->APB1ENR = (1<<22);

		I2C2_Initialize(I2C_cfg);
	}
}
 80001a2:	e013      	b.n	80001cc <_ZN7I2Cmcal3I2C14I2C_InitializeERNS_7I2C_CFGE+0x6c>
	else if(this == reinterpret_cast<I2C*>(I2C2Instance))
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	4a0d      	ldr	r2, [pc, #52]	; (80001dc <_ZN7I2Cmcal3I2C14I2C_InitializeERNS_7I2C_CFGE+0x7c>)
 80001a8:	4293      	cmp	r3, r2
 80001aa:	d10f      	bne.n	80001cc <_ZN7I2Cmcal3I2C14I2C_InitializeERNS_7I2C_CFGE+0x6c>
		RCC->APB1ENR = (1<<22);
 80001ac:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <_ZN7I2Cmcal3I2C14I2C_InitializeERNS_7I2C_CFGE+0x78>)
 80001ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80001b2:	61da      	str	r2, [r3, #28]
		I2C2_Initialize(I2C_cfg);
 80001b4:	683c      	ldr	r4, [r7, #0]
 80001b6:	466d      	mov	r5, sp
 80001b8:	f104 030c 	add.w	r3, r4, #12
 80001bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80001c2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80001c6:	6878      	ldr	r0, [r7, #4]
 80001c8:	f000 f85c 	bl	8000284 <_ZN7I2Cmcal3I2C15I2C2_InitializeENS_7I2C_CFGE>
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bdb0      	pop	{r4, r5, r7, pc}
 80001d4:	40005400 	.word	0x40005400
 80001d8:	40021000 	.word	0x40021000
 80001dc:	40005800 	.word	0x40005800

080001e0 <_ZN7I2Cmcal3I2C15I2C1_InitializeENS_7I2C_CFGE>:

void I2Cmcal::I2C::I2C1_Initialize(I2Cmcal::I2C_CFG I2C1CFG)
{
 80001e0:	b084      	sub	sp, #16
 80001e2:	b480      	push	{r7}
 80001e4:	b083      	sub	sp, #12
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
 80001ea:	f107 0014 	add.w	r0, r7, #20
 80001ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(I2C1CFG.Remap)
 80001f2:	7d3b      	ldrb	r3, [r7, #20]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00c      	beq.n	8000212 <_ZN7I2Cmcal3I2C15I2C1_InitializeENS_7I2C_CFGE+0x32>
	{
		AFIO->MAPR   |= 1<<1;          // set I2C1 remap
 80001f8:	4b20      	ldr	r3, [pc, #128]	; (800027c <_ZN7I2Cmcal3I2C15I2C1_InitializeENS_7I2C_CFGE+0x9c>)
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	4a1f      	ldr	r2, [pc, #124]	; (800027c <_ZN7I2Cmcal3I2C15I2C1_InitializeENS_7I2C_CFGE+0x9c>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	6053      	str	r3, [r2, #4]
		GPIOB->CRH |= 0x000000FF;	   // PB9,8 Open drain
 8000204:	4b1e      	ldr	r3, [pc, #120]	; (8000280 <_ZN7I2Cmcal3I2C15I2C1_InitializeENS_7I2C_CFGE+0xa0>)
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	4a1d      	ldr	r2, [pc, #116]	; (8000280 <_ZN7I2Cmcal3I2C15I2C1_InitializeENS_7I2C_CFGE+0xa0>)
 800020a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800020e:	6053      	str	r3, [r2, #4]
 8000210:	e005      	b.n	800021e <_ZN7I2Cmcal3I2C15I2C1_InitializeENS_7I2C_CFGE+0x3e>
	}
	else
	{	GPIOB->CRL |= 0xFF000000;}			//PB7,6 Open drain
 8000212:	4b1b      	ldr	r3, [pc, #108]	; (8000280 <_ZN7I2Cmcal3I2C15I2C1_InitializeENS_7I2C_CFGE+0xa0>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a1a      	ldr	r2, [pc, #104]	; (8000280 <_ZN7I2Cmcal3I2C15I2C1_InitializeENS_7I2C_CFGE+0xa0>)
 8000218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800021c:	6013      	str	r3, [r2, #0]

	CR1 = 0; //Disable PE and all controls
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
	CR2 |= (I2C1CFG.Freq << 0); //Program the peripheral input clock in I2C_CR2
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800022c:	431a      	orrs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	605a      	str	r2, [r3, #4]
	CCR |= (3<<14);	//F/S: I2C master FM mode and Fm mode tlow/thigh = 16/9 (see CCR)Bits
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	69db      	ldr	r3, [r3, #28]
 8000236:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	61da      	str	r2, [r3, #28]
	//(40)40*125n=5000 ns *2(High & Low) =10,000 ns 1/10,000 = 100 KHzI2C Freq
	//I2C_clock = Thigh + Tlow
	//CCR = Peripheral Clock/(I2C_Clock * 25) see Ahmed Eldeeb lec43
	CCR |= (uint16_t)(I2C1CFG.PeCLK/(9 * I2C1CFG.SCLFreq) );
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	69da      	ldr	r2, [r3, #28]
 8000242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000244:	4618      	mov	r0, r3
 8000246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000248:	4619      	mov	r1, r3
 800024a:	460b      	mov	r3, r1
 800024c:	00db      	lsls	r3, r3, #3
 800024e:	440b      	add	r3, r1
 8000250:	fb90 f3f3 	sdiv	r3, r0, r3
 8000254:	b29b      	uxth	r3, r3
 8000256:	431a      	orrs	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	61da      	str	r2, [r3, #28]
	TRISE = 11u;//Max allowed rise time 300 nS equiv. to (14in TRISE counter) * (22nS of step)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	220b      	movs	r2, #11
 8000260:	621a      	str	r2, [r3, #32]
	CR1 |= (I2C1CFG.PE<<0) ;	//enable I2C peripheral
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	7d7a      	ldrb	r2, [r7, #21]
 8000268:	431a      	orrs	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	b004      	add	sp, #16
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40010000 	.word	0x40010000
 8000280:	40010c00 	.word	0x40010c00

08000284 <_ZN7I2Cmcal3I2C15I2C2_InitializeENS_7I2C_CFGE>:

void I2Cmcal::I2C::I2C2_Initialize(I2Cmcal::I2C_CFG I2C2CFG)
{
 8000284:	b084      	sub	sp, #16
 8000286:	b480      	push	{r7}
 8000288:	b083      	sub	sp, #12
 800028a:	af00      	add	r7, sp, #0
 800028c:	6078      	str	r0, [r7, #4]
 800028e:	f107 0014 	add.w	r0, r7, #20
 8000292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// PB11,10 Open drain no REMAP
	GPIOB->CRH |= 0x0000FF00;
 8000296:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <_ZN7I2Cmcal3I2C15I2C2_InitializeENS_7I2C_CFGE+0x80>)
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	4a1a      	ldr	r2, [pc, #104]	; (8000304 <_ZN7I2Cmcal3I2C15I2C2_InitializeENS_7I2C_CFGE+0x80>)
 800029c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80002a0:	6053      	str	r3, [r2, #4]

	CR1 = 0; //Disable PE and all controls
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
	CR2 |= (I2C2CFG.Freq << 0); //Program the peripheral input clock in I2C_CR2
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80002b0:	431a      	orrs	r2, r3
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	605a      	str	r2, [r3, #4]
	CCR |= (0xC<<15);	//F/S: I2C master FM mode and Fm mode tlow/thigh = 16/9 (see CCR)Bits
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	69db      	ldr	r3, [r3, #28]
 80002ba:	f443 22c0 	orr.w	r2, r3, #393216	; 0x60000
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	61da      	str	r2, [r3, #28]
	//(40)40*125n=5000 ns *2(High & Low) =10,000 ns 1/10,000 = 100 KHzI2C Freq
	//I2C_clock = Thigh + Tlow
	//CCR = Peripheral Clock/(I2C_Clock * 25) see Ahmed Eldeeb lec43
	CCR |= (uint16_t)(I2C2CFG.PeCLK/(25 * I2C2CFG.SCLFreq) );
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	69da      	ldr	r2, [r3, #28]
 80002c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002c8:	4618      	mov	r0, r3
 80002ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002cc:	4619      	mov	r1, r3
 80002ce:	460b      	mov	r3, r1
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	440b      	add	r3, r1
 80002d4:	0099      	lsls	r1, r3, #2
 80002d6:	440b      	add	r3, r1
 80002d8:	fb90 f3f3 	sdiv	r3, r0, r3
 80002dc:	b29b      	uxth	r3, r3
 80002de:	431a      	orrs	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	61da      	str	r2, [r3, #28]
	TRISE = 11u; //Max allowed rise time 300 nSec equiv. to (14in TRISE counter) * (22nS of step)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	220b      	movs	r2, #11
 80002e8:	621a      	str	r2, [r3, #32]
	CR1 |= (I2C2CFG.PE<<0) ;	//enable I2C peripheral
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	7d7a      	ldrb	r2, [r7, #21]
 80002f0:	431a      	orrs	r2, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	601a      	str	r2, [r3, #0]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	b004      	add	sp, #16
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40010c00 	.word	0x40010c00

08000308 <_ZN7I2Cmcal3I2C9I2C_StartEv>:

bool I2Cmcal::I2C::I2C_Start()
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	//while(!(I2C_BusBusy)); //wait until bus is idle
	CR1 |= I2Cstart;	   // Send start condition
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	601a      	str	r2, [r3, #0]
	while (!(I2C_Master)); //wait to confirm that Target become master
 800031c:	bf00      	nop
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	2b00      	cmp	r3, #0
 8000328:	bf0c      	ite	eq
 800032a:	2301      	moveq	r3, #1
 800032c:	2300      	movne	r3, #0
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1f4      	bne.n	800031e <_ZN7I2Cmcal3I2C9I2C_StartEv+0x16>
	SR1; 		   		   //read SR1 to clear SB flag
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	695b      	ldr	r3, [r3, #20]
	return true;
 8000338:	2301      	movs	r3, #1
}
 800033a:	4618      	mov	r0, r3
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr

08000344 <_ZN7I2Cmcal3I2C8I2C_StopEv>:

bool I2Cmcal::I2C::I2C_Stop()
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	while(!(EV_TXE));   //wait until data sent and DR clear mean TXE = 1 or BTF = 1
 800034c:	bf00      	nop
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000356:	2b00      	cmp	r3, #0
 8000358:	bf0c      	ite	eq
 800035a:	2301      	moveq	r3, #1
 800035c:	2300      	movne	r3, #0
 800035e:	b2db      	uxtb	r3, r3
 8000360:	2b00      	cmp	r3, #0
 8000362:	d1f4      	bne.n	800034e <_ZN7I2Cmcal3I2C8I2C_StopEv+0xa>
	CR1 |= I2Cstop;	    // send stop condition
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	601a      	str	r2, [r3, #0]
	while (I2C_Master); //wait to confirm that Target goes back to Slave mode
 8000370:	bf00      	nop
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	2b00      	cmp	r3, #0
 800037c:	bf14      	ite	ne
 800037e:	2301      	movne	r3, #1
 8000380:	2300      	moveq	r3, #0
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2b00      	cmp	r3, #0
 8000386:	d1f4      	bne.n	8000372 <_ZN7I2Cmcal3I2C8I2C_StopEv+0x2e>
						//EV8_2:TxE=1,BTF = 1, Program Stop request.
						//TxE and BTF are cleared by HARDWARE by the Stop condition
	return true;
 8000388:	2301      	movs	r3, #1
}
 800038a:	4618      	mov	r0, r3
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <_ZN7I2Cmcal3I2C11I2C_AddressEh>:

bool I2Cmcal::I2C::I2C_Address(uint8_t Addr)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	70fb      	strb	r3, [r7, #3]
	DR = Addr;			//Send Address to I2C network
 80003a0:	78fa      	ldrb	r2, [r7, #3]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	611a      	str	r2, [r3, #16]
	while(!(EV_ADDR));  //wait until address match bit set
 80003a6:	bf00      	nop
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	f003 0302 	and.w	r3, r3, #2
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	bf0c      	ite	eq
 80003b4:	2301      	moveq	r3, #1
 80003b6:	2300      	movne	r3, #0
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d1f4      	bne.n	80003a8 <_ZN7I2Cmcal3I2C11I2C_AddressEh+0x14>
	SR1;	//clear ADDR flag by dummy read SR1
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	695b      	ldr	r3, [r3, #20]
	SR2;	//Followed by reading SR2
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	699b      	ldr	r3, [r3, #24]
	return true;
 80003c6:	2301      	movs	r3, #1
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr

080003d2 <_ZN7I2Cmcal3I2C12I2C_SendDataEh>:

void I2Cmcal::I2C::I2C_SendData(uint8_t u8Data)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	460b      	mov	r3, r1
 80003dc:	70fb      	strb	r3, [r7, #3]
	while(!(EV_TXE)); //data register empty shift register empty/not empty
 80003de:	bf00      	nop
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	bf0c      	ite	eq
 80003ec:	2301      	moveq	r3, #1
 80003ee:	2300      	movne	r3, #0
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1f4      	bne.n	80003e0 <_ZN7I2Cmcal3I2C12I2C_SendDataEh+0xe>
	DR = u8Data; 	  //cleared by writing DR register
 80003f6:	78fa      	ldrb	r2, [r7, #3]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	611a      	str	r2, [r3, #16]
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr

08000406 <_ZN7I2Cmcal3I2C15I2C_ReceiveDataEPhh>:
		i++;
	}while(u8String[i] != '\0');
}

void I2Cmcal::I2C::I2C_ReceiveData(uint8_t* u8Data, uint8_t Ack)
{
 8000406:	b480      	push	{r7}
 8000408:	b085      	sub	sp, #20
 800040a:	af00      	add	r7, sp, #0
 800040c:	60f8      	str	r0, [r7, #12]
 800040e:	60b9      	str	r1, [r7, #8]
 8000410:	4613      	mov	r3, r2
 8000412:	71fb      	strb	r3, [r7, #7]
	if(Ack)
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d005      	beq.n	8000426 <_ZN7I2Cmcal3I2C15I2C_ReceiveDataEPhh+0x20>
	{
		I2C_Set_Ack;
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	601a      	str	r2, [r3, #0]
	}
	while (!(EV_RXNE)); //while it do not received data stay here
 8000426:	bf00      	nop
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000430:	2b00      	cmp	r3, #0
 8000432:	bf0c      	ite	eq
 8000434:	2301      	moveq	r3, #1
 8000436:	2300      	movne	r3, #0
 8000438:	b2db      	uxtb	r3, r3
 800043a:	2b00      	cmp	r3, #0
 800043c:	d1f4      	bne.n	8000428 <_ZN7I2Cmcal3I2C15I2C_ReceiveDataEPhh+0x22>
	* u8Data = DR;
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	691b      	ldr	r3, [r3, #16]
 8000442:	b2da      	uxtb	r2, r3
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	701a      	strb	r2, [r3, #0]

}
 8000448:	bf00      	nop
 800044a:	3714      	adds	r7, #20
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <_ZN7I2Cmcal3I2CnwEjNS_11I2CInstanceE>:

void* I2Cmcal::I2C::operator new(unsigned int, I2Cmcal::I2CInstance I2C)
{
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
 800045a:	6039      	str	r1, [r7, #0]
	return reinterpret_cast<void*>(I2C);
 800045c:	683b      	ldr	r3, [r7, #0]
}
 800045e:	4618      	mov	r0, r3
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */
	uint8_t u8RecData = 0 , u8SendData = 'A';
 800046e:	2300      	movs	r3, #0
 8000470:	71fb      	strb	r3, [r7, #7]
 8000472:	2341      	movs	r3, #65	; 0x41
 8000474:	73fb      	strb	r3, [r7, #15]
	uint8_t u8AddWrt = 0x78, u8AddRd = 0b11011001;
 8000476:	2378      	movs	r3, #120	; 0x78
 8000478:	73bb      	strb	r3, [r7, #14]
 800047a:	23d9      	movs	r3, #217	; 0xd9
 800047c:	737b      	strb	r3, [r7, #13]

	I2Cmcal::I2C *myI2C1 = new(I2Cmcal::I2C1Instance)  I2Cmcal::I2C();
 800047e:	4916      	ldr	r1, [pc, #88]	; (80004d8 <main+0x70>)
 8000480:	2024      	movs	r0, #36	; 0x24
 8000482:	f7ff ffe6 	bl	8000452 <_ZN7I2Cmcal3I2CnwEjNS_11I2CInstanceE>
 8000486:	4604      	mov	r4, r0
 8000488:	4620      	mov	r0, r4
 800048a:	f7ff fe5f 	bl	800014c <_ZN7I2Cmcal3I2CC1Ev>
 800048e:	60bc      	str	r4, [r7, #8]
	myI2C1->I2C_Initialize(I2C_1_CFG);
 8000490:	4912      	ldr	r1, [pc, #72]	; (80004dc <main+0x74>)
 8000492:	68b8      	ldr	r0, [r7, #8]
 8000494:	f7ff fe64 	bl	8000160 <_ZN7I2Cmcal3I2C14I2C_InitializeERNS_7I2C_CFGE>
	myI2C1->I2C_Start();
 8000498:	68b8      	ldr	r0, [r7, #8]
 800049a:	f7ff ff35 	bl	8000308 <_ZN7I2Cmcal3I2C9I2C_StartEv>
	myI2C1->I2C_Address(u8AddWrt);
 800049e:	7bbb      	ldrb	r3, [r7, #14]
 80004a0:	4619      	mov	r1, r3
 80004a2:	68b8      	ldr	r0, [r7, #8]
 80004a4:	f7ff ff76 	bl	8000394 <_ZN7I2Cmcal3I2C11I2C_AddressEh>
	myI2C1->I2C_SendData(u8SendData);
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
 80004aa:	4619      	mov	r1, r3
 80004ac:	68b8      	ldr	r0, [r7, #8]
 80004ae:	f7ff ff90 	bl	80003d2 <_ZN7I2Cmcal3I2C12I2C_SendDataEh>
	myI2C1->I2C_Start();
 80004b2:	68b8      	ldr	r0, [r7, #8]
 80004b4:	f7ff ff28 	bl	8000308 <_ZN7I2Cmcal3I2C9I2C_StartEv>
	myI2C1->I2C_Address(u8AddRd);
 80004b8:	7b7b      	ldrb	r3, [r7, #13]
 80004ba:	4619      	mov	r1, r3
 80004bc:	68b8      	ldr	r0, [r7, #8]
 80004be:	f7ff ff69 	bl	8000394 <_ZN7I2Cmcal3I2C11I2C_AddressEh>
	myI2C1->I2C_ReceiveData(&u8RecData, ENABLE);
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	68b8      	ldr	r0, [r7, #8]
 80004ca:	f7ff ff9c 	bl	8000406 <_ZN7I2Cmcal3I2C15I2C_ReceiveDataEPhh>
	myI2C1->I2C_Stop();
 80004ce:	68b8      	ldr	r0, [r7, #8]
 80004d0:	f7ff ff38 	bl	8000344 <_ZN7I2Cmcal3I2C8I2C_StopEv>

  while (1)
 80004d4:	e7fe      	b.n	80004d4 <main+0x6c>
 80004d6:	bf00      	nop
 80004d8:	40005400 	.word	0x40005400
 80004dc:	20000000 	.word	0x20000000

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <NMI_Handler+0x4>

080004e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <HardFault_Handler+0x4>

080004ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <MemManage_Handler+0x4>

080004f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <UsageFault_Handler+0x4>

080004fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr

0800050a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr

08000516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000526:	f000 f82f 	bl	8000588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}

0800052e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
	...

0800053c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800053c:	f7ff fff7 	bl	800052e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480b      	ldr	r0, [pc, #44]	; (8000570 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000542:	490c      	ldr	r1, [pc, #48]	; (8000574 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000544:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a09      	ldr	r2, [pc, #36]	; (800057c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000558:	4c09      	ldr	r4, [pc, #36]	; (8000580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000566:	f000 f821 	bl	80005ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff ff7d 	bl	8000468 <main>
  bx lr
 800056e:	4770      	bx	lr
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000578:	08000614 	.word	0x08000614
  ldr r2, =_sbss
 800057c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000580:	20000040 	.word	0x20000040

08000584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_2_IRQHandler>
	...

08000588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <HAL_IncTick+0x1c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <HAL_IncTick+0x20>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4413      	add	r3, r2
 8000598:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <HAL_IncTick+0x20>)
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	2000001c 	.word	0x2000001c
 80005a8:	2000003c 	.word	0x2000003c

080005ac <__libc_init_array>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	2600      	movs	r6, #0
 80005b0:	4d0c      	ldr	r5, [pc, #48]	; (80005e4 <__libc_init_array+0x38>)
 80005b2:	4c0d      	ldr	r4, [pc, #52]	; (80005e8 <__libc_init_array+0x3c>)
 80005b4:	1b64      	subs	r4, r4, r5
 80005b6:	10a4      	asrs	r4, r4, #2
 80005b8:	42a6      	cmp	r6, r4
 80005ba:	d109      	bne.n	80005d0 <__libc_init_array+0x24>
 80005bc:	f000 f81a 	bl	80005f4 <_init>
 80005c0:	2600      	movs	r6, #0
 80005c2:	4d0a      	ldr	r5, [pc, #40]	; (80005ec <__libc_init_array+0x40>)
 80005c4:	4c0a      	ldr	r4, [pc, #40]	; (80005f0 <__libc_init_array+0x44>)
 80005c6:	1b64      	subs	r4, r4, r5
 80005c8:	10a4      	asrs	r4, r4, #2
 80005ca:	42a6      	cmp	r6, r4
 80005cc:	d105      	bne.n	80005da <__libc_init_array+0x2e>
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d4:	4798      	blx	r3
 80005d6:	3601      	adds	r6, #1
 80005d8:	e7ee      	b.n	80005b8 <__libc_init_array+0xc>
 80005da:	f855 3b04 	ldr.w	r3, [r5], #4
 80005de:	4798      	blx	r3
 80005e0:	3601      	adds	r6, #1
 80005e2:	e7f2      	b.n	80005ca <__libc_init_array+0x1e>
 80005e4:	0800060c 	.word	0x0800060c
 80005e8:	0800060c 	.word	0x0800060c
 80005ec:	0800060c 	.word	0x0800060c
 80005f0:	08000610 	.word	0x08000610

080005f4 <_init>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	bf00      	nop
 80005f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fa:	bc08      	pop	{r3}
 80005fc:	469e      	mov	lr, r3
 80005fe:	4770      	bx	lr

08000600 <_fini>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	bf00      	nop
 8000604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000606:	bc08      	pop	{r3}
 8000608:	469e      	mov	lr, r3
 800060a:	4770      	bx	lr
