
RC_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002d0  080002d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002d0  080002d0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080002d0  080002d0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002d0  080002d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002d0  080002d0  000102d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002d4  080002d4  000102d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080002d8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080002dc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080002dc  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c21  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000048b  00000000  00000000  00020c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00021120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000012c  00000000  00000000  000212d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015366  00000000  00000000  000213fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e7e  00000000  00000000  00036762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b7c4  00000000  00000000  000385e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000004e8  00000000  00000000  000b3da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000b428c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080002b8 	.word	0x080002b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080002b8 	.word	0x080002b8

0800014c <main>:

#define CHECK_BIT(x, pos) (x & (1UL << pos) )
#define GET_BIT(Var,BITNB)      (((Var)>>(BITNB))&0x01)

int main(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	//Enable Clock gating for GPIOB and GPIOC
	RCC->APB2ENR = (1<<3) | (1<<4);
 8000152:	4b11      	ldr	r3, [pc, #68]	; (8000198 <main+0x4c>)
 8000154:	2218      	movs	r2, #24
 8000156:	619a      	str	r2, [r3, #24]

	//Configure PB4 to be input Floating
	//GPIOB->CRL = 0x00040000;
	GPIOB->CRL = (4<<16);
 8000158:	4b10      	ldr	r3, [pc, #64]	; (800019c <main+0x50>)
 800015a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800015e:	601a      	str	r2, [r3, #0]

	//Configure PB9 to be output pin
	GPIOB->CRH = 0x33333333;
 8000160:	4b0e      	ldr	r3, [pc, #56]	; (800019c <main+0x50>)
 8000162:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000166:	605a      	str	r2, [r3, #4]
	//GPIOB->CRH |= (3<<12); //RELAY


	//Configure PC13 to be output pin
	//GPIOA->CRL = 0x33333333;
	GPIOC->CRH = (3<<20) ;
 8000168:	4b0d      	ldr	r3, [pc, #52]	; (80001a0 <main+0x54>)
 800016a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800016e:	605a      	str	r2, [r3, #4]

  while (1)
  {
	  unsigned int PIN_Val = GPIOB->IDR & (1<<4);//(GET_BIT(GPIOB->IDR, 4));
 8000170:	4b0a      	ldr	r3, [pc, #40]	; (800019c <main+0x50>)
 8000172:	689b      	ldr	r3, [r3, #8]
 8000174:	f003 0310 	and.w	r3, r3, #16
 8000178:	607b      	str	r3, [r7, #4]

	  if(PIN_Val == 0)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d104      	bne.n	800018a <main+0x3e>
	  {
		 // GPIOC->ODR = (1<<(13));
		  GPIOB->ODR = (1<<9) | (1<<11); //Buzzer PIN | Relay PIN
 8000180:	4b06      	ldr	r3, [pc, #24]	; (800019c <main+0x50>)
 8000182:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8000186:	60da      	str	r2, [r3, #12]
 8000188:	e7f2      	b.n	8000170 <main+0x24>
	  }
	  else
	  {
		 // GPIOC->ODR &= (~(1<<13));
		  // GPIOB->ODR &= ~(1<<9); //Buzzer PIN
		  GPIOB->ODR &= ~((1<<11) | (1<<9)); //Relay PIN
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <main+0x50>)
 800018c:	68db      	ldr	r3, [r3, #12]
 800018e:	4a03      	ldr	r2, [pc, #12]	; (800019c <main+0x50>)
 8000190:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8000194:	60d3      	str	r3, [r2, #12]
//		  //output High to PA1
//		  GPIOA->ODR |= (1<<1);
	  }
  }
 8000196:	e7eb      	b.n	8000170 <main+0x24>
 8000198:	40021000 	.word	0x40021000
 800019c:	40010c00 	.word	0x40010c00
 80001a0:	40011000 	.word	0x40011000

080001a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001a8:	e7fe      	b.n	80001a8 <NMI_Handler+0x4>

080001aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001aa:	b480      	push	{r7}
 80001ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001ae:	e7fe      	b.n	80001ae <HardFault_Handler+0x4>

080001b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001b4:	e7fe      	b.n	80001b4 <MemManage_Handler+0x4>

080001b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001b6:	b480      	push	{r7}
 80001b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001ba:	e7fe      	b.n	80001ba <BusFault_Handler+0x4>

080001bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001c0:	e7fe      	b.n	80001c0 <UsageFault_Handler+0x4>

080001c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001c2:	b480      	push	{r7}
 80001c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001c6:	bf00      	nop
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr

080001ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001ce:	b480      	push	{r7}
 80001d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr

080001da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001da:	b480      	push	{r7}
 80001dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001de:	bf00      	nop
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr

080001e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001e6:	b580      	push	{r7, lr}
 80001e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001ea:	f000 f82f 	bl	800024c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}

080001f2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001f2:	b480      	push	{r7}
 80001f4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001f6:	bf00      	nop
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
	...

08000200 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000200:	f7ff fff7 	bl	80001f2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000204:	480b      	ldr	r0, [pc, #44]	; (8000234 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000206:	490c      	ldr	r1, [pc, #48]	; (8000238 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000208:	4a0c      	ldr	r2, [pc, #48]	; (800023c <LoopFillZerobss+0x16>)
  movs r3, #0
 800020a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800020c:	e002      	b.n	8000214 <LoopCopyDataInit>

0800020e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800020e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000212:	3304      	adds	r3, #4

08000214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000218:	d3f9      	bcc.n	800020e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021a:	4a09      	ldr	r2, [pc, #36]	; (8000240 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800021c:	4c09      	ldr	r4, [pc, #36]	; (8000244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000220:	e001      	b.n	8000226 <LoopFillZerobss>

08000222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000224:	3204      	adds	r2, #4

08000226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000228:	d3fb      	bcc.n	8000222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800022a:	f000 f821 	bl	8000270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800022e:	f7ff ff8d 	bl	800014c <main>
  bx lr
 8000232:	4770      	bx	lr
  ldr r0, =_sdata
 8000234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000238:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800023c:	080002d8 	.word	0x080002d8
  ldr r2, =_sbss
 8000240:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000244:	20000024 	.word	0x20000024

08000248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000248:	e7fe      	b.n	8000248 <ADC1_2_IRQHandler>
	...

0800024c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <HAL_IncTick+0x1c>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	461a      	mov	r2, r3
 8000256:	4b05      	ldr	r3, [pc, #20]	; (800026c <HAL_IncTick+0x20>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4413      	add	r3, r2
 800025c:	4a03      	ldr	r2, [pc, #12]	; (800026c <HAL_IncTick+0x20>)
 800025e:	6013      	str	r3, [r2, #0]
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000000 	.word	0x20000000
 800026c:	20000020 	.word	0x20000020

08000270 <__libc_init_array>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	2600      	movs	r6, #0
 8000274:	4d0c      	ldr	r5, [pc, #48]	; (80002a8 <__libc_init_array+0x38>)
 8000276:	4c0d      	ldr	r4, [pc, #52]	; (80002ac <__libc_init_array+0x3c>)
 8000278:	1b64      	subs	r4, r4, r5
 800027a:	10a4      	asrs	r4, r4, #2
 800027c:	42a6      	cmp	r6, r4
 800027e:	d109      	bne.n	8000294 <__libc_init_array+0x24>
 8000280:	f000 f81a 	bl	80002b8 <_init>
 8000284:	2600      	movs	r6, #0
 8000286:	4d0a      	ldr	r5, [pc, #40]	; (80002b0 <__libc_init_array+0x40>)
 8000288:	4c0a      	ldr	r4, [pc, #40]	; (80002b4 <__libc_init_array+0x44>)
 800028a:	1b64      	subs	r4, r4, r5
 800028c:	10a4      	asrs	r4, r4, #2
 800028e:	42a6      	cmp	r6, r4
 8000290:	d105      	bne.n	800029e <__libc_init_array+0x2e>
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f855 3b04 	ldr.w	r3, [r5], #4
 8000298:	4798      	blx	r3
 800029a:	3601      	adds	r6, #1
 800029c:	e7ee      	b.n	800027c <__libc_init_array+0xc>
 800029e:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a2:	4798      	blx	r3
 80002a4:	3601      	adds	r6, #1
 80002a6:	e7f2      	b.n	800028e <__libc_init_array+0x1e>
 80002a8:	080002d0 	.word	0x080002d0
 80002ac:	080002d0 	.word	0x080002d0
 80002b0:	080002d0 	.word	0x080002d0
 80002b4:	080002d4 	.word	0x080002d4

080002b8 <_init>:
 80002b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ba:	bf00      	nop
 80002bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002be:	bc08      	pop	{r3}
 80002c0:	469e      	mov	lr, r3
 80002c2:	4770      	bx	lr

080002c4 <_fini>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	bf00      	nop
 80002c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ca:	bc08      	pop	{r3}
 80002cc:	469e      	mov	lr, r3
 80002ce:	4770      	bx	lr
