
Nokia5110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000093c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08000a6c  08000a6c  00010a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c58  08000c58  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000c58  08000c58  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c58  08000c58  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c58  08000c58  00010c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c5c  08000c5c  00010c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000c60  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000c64  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000c64  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000aa0  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000050a  00000000  00000000  00020b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00021020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010d  00000000  00000000  000211a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000157f  00000000  00000000  000212b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f2e  00000000  00000000  00022834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004e4e  00000000  00000000  00023762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000444  00000000  00000000  000285b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000289f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a54 	.word	0x08000a54

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000a54 	.word	0x08000a54

08000170 <GPIO_voidSetPinDirection>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/

void GPIO_voidSetPinDirection(uint8 Copy_u8PortId,uint8 Copy_u8PinId,uint8 Copy_u8Diretion)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
	/*		Range Check				*/
		if( (Copy_u8PinId < 8) && (Copy_u8PortId < 3))			/*	LOW Port */
 8000182:	79bb      	ldrb	r3, [r7, #6]
 8000184:	2b07      	cmp	r3, #7
 8000186:	d856      	bhi.n	8000236 <GPIO_voidSetPinDirection+0xc6>
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	2b02      	cmp	r3, #2
 800018c:	d853      	bhi.n	8000236 <GPIO_voidSetPinDirection+0xc6>
		{
			switch(Copy_u8PortId)
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	2b02      	cmp	r3, #2
 8000192:	d037      	beq.n	8000204 <GPIO_voidSetPinDirection+0x94>
 8000194:	2b02      	cmp	r3, #2
 8000196:	f300 80a9 	bgt.w	80002ec <GPIO_voidSetPinDirection+0x17c>
 800019a:	2b00      	cmp	r3, #0
 800019c:	d002      	beq.n	80001a4 <GPIO_voidSetPinDirection+0x34>
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d018      	beq.n	80001d4 <GPIO_voidSetPinDirection+0x64>
 80001a2:	e0a3      	b.n	80002ec <GPIO_voidSetPinDirection+0x17c>
			{
			case GPIO_PORTA:
				/*		Clear the Specific for bits for the pin		*/
				GPIOA_CRL	&=	~(0b1111<<(Copy_u8PinId*4));
 80001a4:	4b54      	ldr	r3, [pc, #336]	; (80002f8 <GPIO_voidSetPinDirection+0x188>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	79ba      	ldrb	r2, [r7, #6]
 80001aa:	0092      	lsls	r2, r2, #2
 80001ac:	210f      	movs	r1, #15
 80001ae:	fa01 f202 	lsl.w	r2, r1, r2
 80001b2:	43d2      	mvns	r2, r2
 80001b4:	4611      	mov	r1, r2
 80001b6:	4a50      	ldr	r2, [pc, #320]	; (80002f8 <GPIO_voidSetPinDirection+0x188>)
 80001b8:	400b      	ands	r3, r1
 80001ba:	6013      	str	r3, [r2, #0]
				/*		Set the Specific for bits for the pin		*/
				GPIOA_CRL	|=	 (Copy_u8Diretion<<(Copy_u8PinId*4));
 80001bc:	4b4e      	ldr	r3, [pc, #312]	; (80002f8 <GPIO_voidSetPinDirection+0x188>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	7979      	ldrb	r1, [r7, #5]
 80001c2:	79ba      	ldrb	r2, [r7, #6]
 80001c4:	0092      	lsls	r2, r2, #2
 80001c6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ca:	4611      	mov	r1, r2
 80001cc:	4a4a      	ldr	r2, [pc, #296]	; (80002f8 <GPIO_voidSetPinDirection+0x188>)
 80001ce:	430b      	orrs	r3, r1
 80001d0:	6013      	str	r3, [r2, #0]
				break;
 80001d2:	e02f      	b.n	8000234 <GPIO_voidSetPinDirection+0xc4>
			case GPIO_PORTB:
				/*		Clear the Specific for bits for the pin		*/
				GPIOB_CRL	&=	~(0b1111<<(Copy_u8PinId*4));
 80001d4:	4b49      	ldr	r3, [pc, #292]	; (80002fc <GPIO_voidSetPinDirection+0x18c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	79ba      	ldrb	r2, [r7, #6]
 80001da:	0092      	lsls	r2, r2, #2
 80001dc:	210f      	movs	r1, #15
 80001de:	fa01 f202 	lsl.w	r2, r1, r2
 80001e2:	43d2      	mvns	r2, r2
 80001e4:	4611      	mov	r1, r2
 80001e6:	4a45      	ldr	r2, [pc, #276]	; (80002fc <GPIO_voidSetPinDirection+0x18c>)
 80001e8:	400b      	ands	r3, r1
 80001ea:	6013      	str	r3, [r2, #0]
				/*		Set the Specific for bits for the pin		*/
				GPIOB_CRL	|=	 (Copy_u8Diretion<<(Copy_u8PinId*4));
 80001ec:	4b43      	ldr	r3, [pc, #268]	; (80002fc <GPIO_voidSetPinDirection+0x18c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	7979      	ldrb	r1, [r7, #5]
 80001f2:	79ba      	ldrb	r2, [r7, #6]
 80001f4:	0092      	lsls	r2, r2, #2
 80001f6:	fa01 f202 	lsl.w	r2, r1, r2
 80001fa:	4611      	mov	r1, r2
 80001fc:	4a3f      	ldr	r2, [pc, #252]	; (80002fc <GPIO_voidSetPinDirection+0x18c>)
 80001fe:	430b      	orrs	r3, r1
 8000200:	6013      	str	r3, [r2, #0]
				break;
 8000202:	e017      	b.n	8000234 <GPIO_voidSetPinDirection+0xc4>
			case GPIO_PORTC:
				/*		Clear the Specific for bits for the pin		*/
				GPIOC_CRL	&=	~(0b1111<<(Copy_u8PinId*4));
 8000204:	4b3e      	ldr	r3, [pc, #248]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	79ba      	ldrb	r2, [r7, #6]
 800020a:	0092      	lsls	r2, r2, #2
 800020c:	210f      	movs	r1, #15
 800020e:	fa01 f202 	lsl.w	r2, r1, r2
 8000212:	43d2      	mvns	r2, r2
 8000214:	4611      	mov	r1, r2
 8000216:	4a3a      	ldr	r2, [pc, #232]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 8000218:	400b      	ands	r3, r1
 800021a:	6013      	str	r3, [r2, #0]
				/*		Set the Specific for bits for the pin		*/
				GPIOC_CRL	|=	 (Copy_u8Diretion<<(Copy_u8PinId*4));
 800021c:	4b38      	ldr	r3, [pc, #224]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	7979      	ldrb	r1, [r7, #5]
 8000222:	79ba      	ldrb	r2, [r7, #6]
 8000224:	0092      	lsls	r2, r2, #2
 8000226:	fa01 f202 	lsl.w	r2, r1, r2
 800022a:	4611      	mov	r1, r2
 800022c:	4a34      	ldr	r2, [pc, #208]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 800022e:	430b      	orrs	r3, r1
 8000230:	6013      	str	r3, [r2, #0]
				break;
 8000232:	bf00      	nop
			switch(Copy_u8PortId)
 8000234:	e05a      	b.n	80002ec <GPIO_voidSetPinDirection+0x17c>
			}
		}
		else if( (Copy_u8PinId < 16) && (Copy_u8PortId < 3))	/*	HIGH Port */
 8000236:	79bb      	ldrb	r3, [r7, #6]
 8000238:	2b0f      	cmp	r3, #15
 800023a:	d857      	bhi.n	80002ec <GPIO_voidSetPinDirection+0x17c>
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	2b02      	cmp	r3, #2
 8000240:	d854      	bhi.n	80002ec <GPIO_voidSetPinDirection+0x17c>
		{
			Copy_u8PinId -= 8 ; /* Subtract 8 from pin value in order to access CRH */
 8000242:	79bb      	ldrb	r3, [r7, #6]
 8000244:	3b08      	subs	r3, #8
 8000246:	71bb      	strb	r3, [r7, #6]
			switch(Copy_u8PortId)
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	2b02      	cmp	r3, #2
 800024c:	d036      	beq.n	80002bc <GPIO_voidSetPinDirection+0x14c>
 800024e:	2b02      	cmp	r3, #2
 8000250:	dc4c      	bgt.n	80002ec <GPIO_voidSetPinDirection+0x17c>
 8000252:	2b00      	cmp	r3, #0
 8000254:	d002      	beq.n	800025c <GPIO_voidSetPinDirection+0xec>
 8000256:	2b01      	cmp	r3, #1
 8000258:	d018      	beq.n	800028c <GPIO_voidSetPinDirection+0x11c>
		}
		else
		{
			/* 		Return error		*/
		}
}
 800025a:	e047      	b.n	80002ec <GPIO_voidSetPinDirection+0x17c>
				GPIOA_CRH	&=	~(0b1111<<(Copy_u8PinId*4));
 800025c:	4b29      	ldr	r3, [pc, #164]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	79ba      	ldrb	r2, [r7, #6]
 8000262:	0092      	lsls	r2, r2, #2
 8000264:	210f      	movs	r1, #15
 8000266:	fa01 f202 	lsl.w	r2, r1, r2
 800026a:	43d2      	mvns	r2, r2
 800026c:	4611      	mov	r1, r2
 800026e:	4a25      	ldr	r2, [pc, #148]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 8000270:	400b      	ands	r3, r1
 8000272:	6013      	str	r3, [r2, #0]
				GPIOA_CRH	|=	 (Copy_u8Diretion<<(Copy_u8PinId*4));
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	7979      	ldrb	r1, [r7, #5]
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	0092      	lsls	r2, r2, #2
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	4611      	mov	r1, r2
 8000284:	4a1f      	ldr	r2, [pc, #124]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 8000286:	430b      	orrs	r3, r1
 8000288:	6013      	str	r3, [r2, #0]
				break;
 800028a:	e02f      	b.n	80002ec <GPIO_voidSetPinDirection+0x17c>
				GPIOB_CRH	&=	~(0b1111<<(Copy_u8PinId*4));
 800028c:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	79ba      	ldrb	r2, [r7, #6]
 8000292:	0092      	lsls	r2, r2, #2
 8000294:	210f      	movs	r1, #15
 8000296:	fa01 f202 	lsl.w	r2, r1, r2
 800029a:	43d2      	mvns	r2, r2
 800029c:	4611      	mov	r1, r2
 800029e:	4a1a      	ldr	r2, [pc, #104]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 80002a0:	400b      	ands	r3, r1
 80002a2:	6013      	str	r3, [r2, #0]
				GPIOB_CRH	|=	 (Copy_u8Diretion<<(Copy_u8PinId*4));
 80002a4:	4b18      	ldr	r3, [pc, #96]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	7979      	ldrb	r1, [r7, #5]
 80002aa:	79ba      	ldrb	r2, [r7, #6]
 80002ac:	0092      	lsls	r2, r2, #2
 80002ae:	fa01 f202 	lsl.w	r2, r1, r2
 80002b2:	4611      	mov	r1, r2
 80002b4:	4a14      	ldr	r2, [pc, #80]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 80002b6:	430b      	orrs	r3, r1
 80002b8:	6013      	str	r3, [r2, #0]
				break;
 80002ba:	e017      	b.n	80002ec <GPIO_voidSetPinDirection+0x17c>
				GPIOC_CRH	&=	~(0b1111<<(Copy_u8PinId*4));
 80002bc:	4b13      	ldr	r3, [pc, #76]	; (800030c <GPIO_voidSetPinDirection+0x19c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	79ba      	ldrb	r2, [r7, #6]
 80002c2:	0092      	lsls	r2, r2, #2
 80002c4:	210f      	movs	r1, #15
 80002c6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ca:	43d2      	mvns	r2, r2
 80002cc:	4611      	mov	r1, r2
 80002ce:	4a0f      	ldr	r2, [pc, #60]	; (800030c <GPIO_voidSetPinDirection+0x19c>)
 80002d0:	400b      	ands	r3, r1
 80002d2:	6013      	str	r3, [r2, #0]
				GPIOC_CRH	|=	 (Copy_u8Diretion<<(Copy_u8PinId*4));
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <GPIO_voidSetPinDirection+0x19c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	7979      	ldrb	r1, [r7, #5]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	0092      	lsls	r2, r2, #2
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	4611      	mov	r1, r2
 80002e4:	4a09      	ldr	r2, [pc, #36]	; (800030c <GPIO_voidSetPinDirection+0x19c>)
 80002e6:	430b      	orrs	r3, r1
 80002e8:	6013      	str	r3, [r2, #0]
				break;
 80002ea:	bf00      	nop
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40010800 	.word	0x40010800
 80002fc:	40010c00 	.word	0x40010c00
 8000300:	40011000 	.word	0x40011000
 8000304:	40010804 	.word	0x40010804
 8000308:	40010c04 	.word	0x40010c04
 800030c:	40011004 	.word	0x40011004

08000310 <GPIO_voidSetPinValue>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*********************************************************************************************************/

void GPIO_voidSetPinValue(uint8 Copy_u8PortId,uint8 Copy_u8PinId,uint8 Copy_u8Value)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
 800031a:	460b      	mov	r3, r1
 800031c:	71bb      	strb	r3, [r7, #6]
 800031e:	4613      	mov	r3, r2
 8000320:	717b      	strb	r3, [r7, #5]
	/*		Range Check				*/
	if( (Copy_u8PinId < 16) && (Copy_u8PortId < 3))
 8000322:	79bb      	ldrb	r3, [r7, #6]
 8000324:	2b0f      	cmp	r3, #15
 8000326:	d844      	bhi.n	80003b2 <GPIO_voidSetPinValue+0xa2>
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b02      	cmp	r3, #2
 800032c:	d841      	bhi.n	80003b2 <GPIO_voidSetPinValue+0xa2>
	{
		switch (Copy_u8Value)
 800032e:	797b      	ldrb	r3, [r7, #5]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d01e      	beq.n	8000372 <GPIO_voidSetPinValue+0x62>
 8000334:	2b01      	cmp	r3, #1
 8000336:	d13c      	bne.n	80003b2 <GPIO_voidSetPinValue+0xa2>
		{
		case GPIO_HIGH:
			switch(Copy_u8PortId)
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	2b02      	cmp	r3, #2
 800033c:	d012      	beq.n	8000364 <GPIO_voidSetPinValue+0x54>
 800033e:	2b02      	cmp	r3, #2
 8000340:	dc34      	bgt.n	80003ac <GPIO_voidSetPinValue+0x9c>
 8000342:	2b00      	cmp	r3, #0
 8000344:	d002      	beq.n	800034c <GPIO_voidSetPinValue+0x3c>
 8000346:	2b01      	cmp	r3, #1
 8000348:	d006      	beq.n	8000358 <GPIO_voidSetPinValue+0x48>
				case GPIO_PORTC:
					/*SET_BIT(GPIOC_ODR,Copy_u8PinId);*/
					GPIOC_BSRR = (1<<Copy_u8PinId);
					break;
			}
			break;
 800034a:	e02f      	b.n	80003ac <GPIO_voidSetPinValue+0x9c>
					GPIOA_BSRR = (1<<Copy_u8PinId);
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	2201      	movs	r2, #1
 8000350:	409a      	lsls	r2, r3
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <GPIO_voidSetPinValue+0xac>)
 8000354:	601a      	str	r2, [r3, #0]
					break;
 8000356:	e00b      	b.n	8000370 <GPIO_voidSetPinValue+0x60>
					GPIOB_BSRR = (1<<Copy_u8PinId);
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	2201      	movs	r2, #1
 800035c:	409a      	lsls	r2, r3
 800035e:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <GPIO_voidSetPinValue+0xb0>)
 8000360:	601a      	str	r2, [r3, #0]
					break;
 8000362:	e005      	b.n	8000370 <GPIO_voidSetPinValue+0x60>
					GPIOC_BSRR = (1<<Copy_u8PinId);
 8000364:	79bb      	ldrb	r3, [r7, #6]
 8000366:	2201      	movs	r2, #1
 8000368:	409a      	lsls	r2, r3
 800036a:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <GPIO_voidSetPinValue+0xb4>)
 800036c:	601a      	str	r2, [r3, #0]
					break;
 800036e:	bf00      	nop
			break;
 8000370:	e01c      	b.n	80003ac <GPIO_voidSetPinValue+0x9c>
		case GPIO_LOW:
			switch(Copy_u8PortId)
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	2b02      	cmp	r3, #2
 8000376:	d012      	beq.n	800039e <GPIO_voidSetPinValue+0x8e>
 8000378:	2b02      	cmp	r3, #2
 800037a:	dc19      	bgt.n	80003b0 <GPIO_voidSetPinValue+0xa0>
 800037c:	2b00      	cmp	r3, #0
 800037e:	d002      	beq.n	8000386 <GPIO_voidSetPinValue+0x76>
 8000380:	2b01      	cmp	r3, #1
 8000382:	d006      	beq.n	8000392 <GPIO_voidSetPinValue+0x82>
					case GPIO_PORTC:
						/*CLR_BIT(GPIOC_ODR,Copy_u8PinId);*/
						GPIOC_BRR = (1<<Copy_u8PinId);
						break;
				}
			break;
 8000384:	e014      	b.n	80003b0 <GPIO_voidSetPinValue+0xa0>
						GPIOA_BRR = (1<<Copy_u8PinId);
 8000386:	79bb      	ldrb	r3, [r7, #6]
 8000388:	2201      	movs	r2, #1
 800038a:	409a      	lsls	r2, r3
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <GPIO_voidSetPinValue+0xb8>)
 800038e:	601a      	str	r2, [r3, #0]
						break;
 8000390:	e00b      	b.n	80003aa <GPIO_voidSetPinValue+0x9a>
						GPIOB_BRR = (1<<Copy_u8PinId);
 8000392:	79bb      	ldrb	r3, [r7, #6]
 8000394:	2201      	movs	r2, #1
 8000396:	409a      	lsls	r2, r3
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <GPIO_voidSetPinValue+0xbc>)
 800039a:	601a      	str	r2, [r3, #0]
						break;
 800039c:	e005      	b.n	80003aa <GPIO_voidSetPinValue+0x9a>
						GPIOC_BRR = (1<<Copy_u8PinId);
 800039e:	79bb      	ldrb	r3, [r7, #6]
 80003a0:	2201      	movs	r2, #1
 80003a2:	409a      	lsls	r2, r3
 80003a4:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <GPIO_voidSetPinValue+0xc0>)
 80003a6:	601a      	str	r2, [r3, #0]
						break;
 80003a8:	bf00      	nop
			break;
 80003aa:	e001      	b.n	80003b0 <GPIO_voidSetPinValue+0xa0>
			break;
 80003ac:	bf00      	nop
 80003ae:	e000      	b.n	80003b2 <GPIO_voidSetPinValue+0xa2>
			break;
 80003b0:	bf00      	nop
	{
		/*
		 * Return error
		 * */
	}
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40010810 	.word	0x40010810
 80003c0:	40010c10 	.word	0x40010c10
 80003c4:	40011010 	.word	0x40011010
 80003c8:	40010814 	.word	0x40010814
 80003cc:	40010c14 	.word	0x40010c14
 80003d0:	40011014 	.word	0x40011014

080003d4 <n5110_init>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void n5110_init(unsigned short spi)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	80fb      	strh	r3, [r7, #6]
	// Setup RST pin
	//init_GP(PA,0,OUT50,O_GP_PP);
	GPIO_voidSetPinDirection(GPIO_PORTA, GPIO_PIN0, GPIO_OUTPUT_50_PP);
 80003de:	2203      	movs	r2, #3
 80003e0:	2100      	movs	r1, #0
 80003e2:	2000      	movs	r0, #0
 80003e4:	f7ff fec4 	bl	8000170 <GPIO_voidSetPinDirection>
	// Set RST High & Wait 10 ms set low & Wait 10 ms and set high
	//W_GP(PA,0,HIGH);
	GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN0, GPIO_HIGH);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2100      	movs	r1, #0
 80003ec:	2000      	movs	r0, #0
 80003ee:	f7ff ff8f 	bl	8000310 <GPIO_voidSetPinValue>
	//DelayMs(10);
	STK_DelayMs(10000);
 80003f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80003f6:	f000 fa53 	bl	80008a0 <STK_DelayMs>
	//W_GP(PA,0,LOW); //Reset of screen
	GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN0, GPIO_LOW);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2100      	movs	r1, #0
 80003fe:	2000      	movs	r0, #0
 8000400:	f7ff ff86 	bl	8000310 <GPIO_voidSetPinValue>
	//DelayMs(10);
	STK_DelayMs(10000);
 8000404:	f242 7010 	movw	r0, #10000	; 0x2710
 8000408:	f000 fa4a 	bl	80008a0 <STK_DelayMs>
	//W_GP(PA,0,HIGH);
	GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN0, GPIO_HIGH);
 800040c:	2201      	movs	r2, #1
 800040e:	2100      	movs	r1, #0
 8000410:	2000      	movs	r0, #0
 8000412:	f7ff ff7d 	bl	8000310 <GPIO_voidSetPinValue>

	// Setup DC pin & set low
	//init_GP(PA,1,OUT50,O_GP_PP);
 	GPIO_voidSetPinDirection(GPIO_PORTA, GPIO_PIN1, GPIO_OUTPUT_50_PP);
 8000416:	2203      	movs	r2, #3
 8000418:	2101      	movs	r1, #1
 800041a:	2000      	movs	r0, #0
 800041c:	f7ff fea8 	bl	8000170 <GPIO_voidSetPinDirection>
	//W_GP(PA,1,LOW);
	GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN1, GPIO_LOW);
 8000420:	2200      	movs	r2, #0
 8000422:	2101      	movs	r1, #1
 8000424:	2000      	movs	r0, #0
 8000426:	f7ff ff73 	bl	8000310 <GPIO_voidSetPinValue>
	//Setup screenlight pin & test ligh with 1 sec high
	//init_GP(PA,2,OUT50,O_GP_PP);
	GPIO_voidSetPinDirection(GPIO_PORTA, GPIO_PIN2, GPIO_OUTPUT_50_PP);
 800042a:	2203      	movs	r2, #3
 800042c:	2102      	movs	r1, #2
 800042e:	2000      	movs	r0, #0
 8000430:	f7ff fe9e 	bl	8000170 <GPIO_voidSetPinDirection>
	//W_GP(PA,2,HIGH);
	GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN2, GPIO_HIGH);
 8000434:	2201      	movs	r2, #1
 8000436:	2102      	movs	r1, #2
 8000438:	2000      	movs	r0, #0
 800043a:	f7ff ff69 	bl	8000310 <GPIO_voidSetPinValue>
	//DelayMs(1000);
	STK_DelayMs(1000000);
 800043e:	4810      	ldr	r0, [pc, #64]	; (8000480 <n5110_init+0xac>)
 8000440:	f000 fa2e 	bl	80008a0 <STK_DelayMs>
	//W_GP(PA,2,LOW);
	GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN2, GPIO_LOW);
 8000444:	2200      	movs	r2, #0
 8000446:	2102      	movs	r1, #2
 8000448:	2000      	movs	r0, #0
 800044a:	f7ff ff61 	bl	8000310 <GPIO_voidSetPinValue>


	spi_init(spi);
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	4618      	mov	r0, r3
 8000452:	f000 f92f 	bl	80006b4 <spi_init>


	//extended instruction set & set voltage
	spi_tx(1,0x21);
 8000456:	2121      	movs	r1, #33	; 0x21
 8000458:	2001      	movs	r0, #1
 800045a:	f000 f9c1 	bl	80007e0 <spi_tx>
	spi_tx(1,0xE0);
 800045e:	21e0      	movs	r1, #224	; 0xe0
 8000460:	2001      	movs	r0, #1
 8000462:	f000 f9bd 	bl	80007e0 <spi_tx>

	//function set & display control set normal mode
	spi_tx(1,0x20);
 8000466:	2120      	movs	r1, #32
 8000468:	2001      	movs	r0, #1
 800046a:	f000 f9b9 	bl	80007e0 <spi_tx>
	spi_tx(1,0x0C);
 800046e:	210c      	movs	r1, #12
 8000470:	2001      	movs	r0, #1
 8000472:	f000 f9b5 	bl	80007e0 <spi_tx>
//	  LcdWriteCmd(0x20);  // LCD basic commands
//	  LcdWriteCmd(0x0C);  // LCD normal video
	//  LcdWriteCmd(0x0D);  // LCD inverse video


}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	000f4240 	.word	0x000f4240

08000484 <n5110_print>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void n5110_print(short Ypos, short Xpos, char str[])
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	603a      	str	r2, [r7, #0]
 800048e:	80fb      	strh	r3, [r7, #6]
 8000490:	460b      	mov	r3, r1
 8000492:	80bb      	strh	r3, [r7, #4]
	int i,j;
	i = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
	//Cleaning the String
	n5110_pos(0,0);
 8000498:	2100      	movs	r1, #0
 800049a:	2000      	movs	r0, #0
 800049c:	f000 f856 	bl	800054c <n5110_pos>
	//W_GP(PA,1,HIGH);
	GPIO_voidSetPinDirection(GPIO_PORTA, GPIO_PIN1, GPIO_HIGH);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2101      	movs	r1, #1
 80004a4:	2000      	movs	r0, #0
 80004a6:	f7ff fe63 	bl	8000170 <GPIO_voidSetPinDirection>
	for(j=0;j<504;j++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	e006      	b.n	80004be <n5110_print+0x3a>
		{
			spi_tx(1,0x00);
 80004b0:	2100      	movs	r1, #0
 80004b2:	2001      	movs	r0, #1
 80004b4:	f000 f994 	bl	80007e0 <spi_tx>
	for(j=0;j<504;j++)
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	3301      	adds	r3, #1
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80004c4:	dbf4      	blt.n	80004b0 <n5110_print+0x2c>

		}

	//W_GP(PA,1,LOW);
	GPIO_voidSetPinDirection(GPIO_PORTA, GPIO_PIN1, GPIO_LOW);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2101      	movs	r1, #1
 80004ca:	2000      	movs	r0, #0
 80004cc:	f7ff fe50 	bl	8000170 <GPIO_voidSetPinDirection>
	//Writre String into n5110
	n5110_pos(Ypos,Xpos);
 80004d0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80004d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004d8:	4611      	mov	r1, r2
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 f836 	bl	800054c <n5110_pos>
	//W_GP(PA,1,HIGH);
	GPIO_voidSetPinDirection(GPIO_PORTA, GPIO_PIN1, GPIO_HIGH);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2101      	movs	r1, #1
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff fe43 	bl	8000170 <GPIO_voidSetPinDirection>
	while(str[i])
 80004ea:	e01d      	b.n	8000528 <n5110_print+0xa4>
	{
		for(j=0;j<5;j++)
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	e014      	b.n	800051c <n5110_print+0x98>
		{

			spi_tx(1,ASCII[str[i]-32][j]);
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	683a      	ldr	r2, [r7, #0]
 80004f6:	4413      	add	r3, r2
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	f1a3 0220 	sub.w	r2, r3, #32
 80004fe:	4912      	ldr	r1, [pc, #72]	; (8000548 <n5110_print+0xc4>)
 8000500:	4613      	mov	r3, r2
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	4413      	add	r3, r2
 8000506:	18ca      	adds	r2, r1, r3
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	4413      	add	r3, r2
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	4619      	mov	r1, r3
 8000510:	2001      	movs	r0, #1
 8000512:	f000 f965 	bl	80007e0 <spi_tx>
		for(j=0;j<5;j++)
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	3301      	adds	r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	2b04      	cmp	r3, #4
 8000520:	dde7      	ble.n	80004f2 <n5110_print+0x6e>

		}

	i++;
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
	while(str[i])
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	683a      	ldr	r2, [r7, #0]
 800052c:	4413      	add	r3, r2
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1db      	bne.n	80004ec <n5110_print+0x68>
	}
	//W_GP(PA,1,LOW);
	GPIO_voidSetPinDirection(GPIO_PORTA, GPIO_PIN1, GPIO_LOW);
 8000534:	2200      	movs	r2, #0
 8000536:	2101      	movs	r1, #1
 8000538:	2000      	movs	r0, #0
 800053a:	f7ff fe19 	bl	8000170 <GPIO_voidSetPinDirection>
	//sring position
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	08000a78 	.word	0x08000a78

0800054c <n5110_pos>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void n5110_pos(short Ypos,short Xpos)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	460a      	mov	r2, r1
 8000556:	80fb      	strh	r3, [r7, #6]
 8000558:	4613      	mov	r3, r2
 800055a:	80bb      	strh	r3, [r7, #4]
	//W_GP(PA,1,LOW);
	GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN1, GPIO_LOW);
 800055c:	2200      	movs	r2, #0
 800055e:	2101      	movs	r1, #1
 8000560:	2000      	movs	r0, #0
 8000562:	f7ff fed5 	bl	8000310 <GPIO_voidSetPinValue>
	spi_tx(1,0x20);
 8000566:	2120      	movs	r1, #32
 8000568:	2001      	movs	r0, #1
 800056a:	f000 f939 	bl	80007e0 <spi_tx>
	spi_tx(1,((0x40 | Ypos)));
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	b25b      	sxtb	r3, r3
 8000572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000576:	b25b      	sxtb	r3, r3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	4619      	mov	r1, r3
 800057c:	2001      	movs	r0, #1
 800057e:	f000 f92f 	bl	80007e0 <spi_tx>
	spi_tx(1,(0x80 | Xpos));
 8000582:	88bb      	ldrh	r3, [r7, #4]
 8000584:	b25b      	sxtb	r3, r3
 8000586:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800058a:	b25b      	sxtb	r3, r3
 800058c:	b2db      	uxtb	r3, r3
 800058e:	4619      	mov	r1, r3
 8000590:	2001      	movs	r0, #1
 8000592:	f000 f925 	bl	80007e0 <spi_tx>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <n5110_clear>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void n5110_clear(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
	int j;
	n5110_pos(0,0);
 80005a4:	2100      	movs	r1, #0
 80005a6:	2000      	movs	r0, #0
 80005a8:	f7ff ffd0 	bl	800054c <n5110_pos>
	//W_GP(PA,1,HIGH);
	GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN1, GPIO_HIGH);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2101      	movs	r1, #1
 80005b0:	2000      	movs	r0, #0
 80005b2:	f7ff fead 	bl	8000310 <GPIO_voidSetPinValue>
	for(j=0;j<504;j++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	e006      	b.n	80005ca <n5110_clear+0x2c>
	{
		spi_tx(1,0x00);
 80005bc:	2100      	movs	r1, #0
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 f90e 	bl	80007e0 <spi_tx>
	for(j=0;j<504;j++)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3301      	adds	r3, #1
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80005d0:	dbf4      	blt.n	80005bc <n5110_clear+0x1e>
	}
}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <n5110_light>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void n5110_light(unsigned char HIGH_LOW)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	//W_GP(PA,2,HIGH_LOW);
	GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN2, HIGH_LOW);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	461a      	mov	r2, r3
 80005ea:	2102      	movs	r1, #2
 80005ec:	2000      	movs	r0, #0
 80005ee:	f7ff fe8f 	bl	8000310 <GPIO_voidSetPinValue>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <RCC_voidSysClockInit>:
#include 	"RCC_Private.h"
#include 	"RCC_Config.h"


void	RCC_voidSysClockInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	#if			RCC_CLK_TYPE	==		RCC_HSI
				RCC_CR			=		0x00000001;
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <RCC_voidSysClockInit+0x28>)
 8000602:	2201      	movs	r2, #1
 8000604:	601a      	str	r2, [r3, #0]
				RCC_CFGR		=		0x00000000;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <RCC_voidSysClockInit+0x2c>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
				while(GET_BIT(RCC_CR,1) == 0);
 800060c:	bf00      	nop
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <RCC_voidSysClockInit+0x28>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0f9      	beq.n	800060e <RCC_voidSysClockInit+0x12>
			#endif
			while(GET_BIT(RCC_CR,25) == 0);
	#else
		#error "Wrong Choice of Clock Type"
	#endif
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	40021000 	.word	0x40021000
 8000628:	40021004 	.word	0x40021004

0800062c <RCC_voidEnablePerClk>:

void	RCC_voidEnablePerClk(uint8 BusId , uint8 PerId)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	460a      	mov	r2, r1
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	4613      	mov	r3, r2
 800063a:	71bb      	strb	r3, [r7, #6]
	/*			Range Check				*/
	if((BusId <3)&&(PerId<32))
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d82d      	bhi.n	800069e <RCC_voidEnablePerClk+0x72>
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	2b1f      	cmp	r3, #31
 8000646:	d82a      	bhi.n	800069e <RCC_voidEnablePerClk+0x72>
	{
		switch(BusId)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b02      	cmp	r3, #2
 800064c:	d01c      	beq.n	8000688 <RCC_voidEnablePerClk+0x5c>
 800064e:	2b02      	cmp	r3, #2
 8000650:	dc25      	bgt.n	800069e <RCC_voidEnablePerClk+0x72>
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <RCC_voidEnablePerClk+0x30>
 8000656:	2b01      	cmp	r3, #1
 8000658:	d00b      	beq.n	8000672 <RCC_voidEnablePerClk+0x46>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR,PerId);		break;
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerId);		break;
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerId);		break;
		}
	}
}
 800065a:	e020      	b.n	800069e <RCC_voidEnablePerClk+0x72>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR,PerId);		break;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <RCC_voidEnablePerClk+0x7c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	79ba      	ldrb	r2, [r7, #6]
 8000662:	2101      	movs	r1, #1
 8000664:	fa01 f202 	lsl.w	r2, r1, r2
 8000668:	4611      	mov	r1, r2
 800066a:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <RCC_voidEnablePerClk+0x7c>)
 800066c:	430b      	orrs	r3, r1
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	e015      	b.n	800069e <RCC_voidEnablePerClk+0x72>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerId);		break;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <RCC_voidEnablePerClk+0x80>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	79ba      	ldrb	r2, [r7, #6]
 8000678:	2101      	movs	r1, #1
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	4611      	mov	r1, r2
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <RCC_voidEnablePerClk+0x80>)
 8000682:	430b      	orrs	r3, r1
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	e00a      	b.n	800069e <RCC_voidEnablePerClk+0x72>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerId);		break;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <RCC_voidEnablePerClk+0x84>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	79ba      	ldrb	r2, [r7, #6]
 800068e:	2101      	movs	r1, #1
 8000690:	fa01 f202 	lsl.w	r2, r1, r2
 8000694:	4611      	mov	r1, r2
 8000696:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <RCC_voidEnablePerClk+0x84>)
 8000698:	430b      	orrs	r3, r1
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	bf00      	nop
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40021014 	.word	0x40021014
 80006ac:	4002101c 	.word	0x4002101c
 80006b0:	40021018 	.word	0x40021018

080006b4 <spi_init>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void spi_init(unsigned short spi)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	80fb      	strh	r3, [r7, #6]
	//RCC_APB2ENR	|= 1;	//Enable AFIO function
	//RCC->APB2ENR |= 1; //Enable AFIO function
	if(spi ==1)
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d150      	bne.n	8000766 <spi_init+0xb2>
	{
		// Activate SPI-1 peripheral / AFIO function
		//RCC_APB2ENR |= 0x1000; // Enabling the SPI-1 periph
		RCC_voidEnablePerClk(RCC_APB2, RCC_SPI1);
 80006c4:	210c      	movs	r1, #12
 80006c6:	2002      	movs	r0, #2
 80006c8:	f7ff ffb0 	bl	800062c <RCC_voidEnablePerClk>
		// Set up the pin
		//init_GP(PA,4,OUT50,O_GP_PP);NSS_1
		GPIO_voidSetPinDirection(GPIO_PORTA, GPIO_PIN4, GPIO_OUTPUT_50_PP);
 80006cc:	2203      	movs	r2, #3
 80006ce:	2104      	movs	r1, #4
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff fd4d 	bl	8000170 <GPIO_voidSetPinDirection>
		//init_GP(PA,5,OUT50,O_AF_PP);SCK_1
		GPIO_voidSetPinDirection(GPIO_PORTA, GPIO_PIN5, GPIO_OUTPUT_50_PP_AF);
 80006d6:	220b      	movs	r2, #11
 80006d8:	2105      	movs	r1, #5
 80006da:	2000      	movs	r0, #0
 80006dc:	f7ff fd48 	bl	8000170 <GPIO_voidSetPinDirection>
		//init_GP(PA,6,IN,I_PP);MISO_1
		GPIO_voidSetPinDirection(GPIO_PORTA, GPIO_PIN6, GPIO_INPUT_FL);
 80006e0:	2204      	movs	r2, #4
 80006e2:	2106      	movs	r1, #6
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff fd43 	bl	8000170 <GPIO_voidSetPinDirection>
		//init_GP(PA,7,OUT50,O_AF_PP);MOSI_1
		GPIO_voidSetPinDirection(GPIO_PORTA, GPIO_PIN7, GPIO_OUTPUT_50_PP_AF);
 80006ea:	220b      	movs	r2, #11
 80006ec:	2107      	movs	r1, #7
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff fd3e 	bl	8000170 <GPIO_voidSetPinDirection>

		//*******Setup SPI peripherals*****
		SPI1->CR1 |= (1<<0)|(1<<1);   // CPOL=1, CPHA=1
 80006f4:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <spi_init+0x124>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a37      	ldr	r2, [pc, #220]	; (80007d8 <spi_init+0x124>)
 80006fa:	f043 0303 	orr.w	r3, r3, #3
 80006fe:	6013      	str	r3, [r2, #0]
		SPI1->CR1 |= (1<<2);  // Master Mode
 8000700:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <spi_init+0x124>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a34      	ldr	r2, [pc, #208]	; (80007d8 <spi_init+0x124>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	6013      	str	r3, [r2, #0]
		SPI1->CR1 |= (3<<3);  // BR[2:0] = 011: fPCLK/16, PCLK2 = 80MHz, SPI clk = 5MHz
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <spi_init+0x124>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a31      	ldr	r2, [pc, #196]	; (80007d8 <spi_init+0x124>)
 8000712:	f043 0318 	orr.w	r3, r3, #24
 8000716:	6013      	str	r3, [r2, #0]
		//SPI1->CR1 |= 0x0038; // fclk / 265

		SPI1->CR1 &= ~(1<<7);  // LSBFIRST = 0, MSB first
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <spi_init+0x124>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a2e      	ldr	r2, [pc, #184]	; (80007d8 <spi_init+0x124>)
 800071e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000722:	6013      	str	r3, [r2, #0]

		SPI1->CR1 |= (1<<8) | (1<<9);  // SSM=1, SSi=1 -> Software Slave Management
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <spi_init+0x124>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a2b      	ldr	r2, [pc, #172]	; (80007d8 <spi_init+0x124>)
 800072a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800072e:	6013      	str	r3, [r2, #0]

		SPI1->CR1 &= ~(1<<10);  // RXONLY = 0, full-duplex
 8000730:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <spi_init+0x124>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a28      	ldr	r2, [pc, #160]	; (80007d8 <spi_init+0x124>)
 8000736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800073a:	6013      	str	r3, [r2, #0]

		SPI1->CR1 &= ~(1<<11);  // DFF=0, 8 bit data
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <spi_init+0x124>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a25      	ldr	r2, [pc, #148]	; (80007d8 <spi_init+0x124>)
 8000742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000746:	6013      	str	r3, [r2, #0]

		//SPI1->CR2 |= 0x0004; // CR2
		SPI1->CR2 = 0;
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <spi_init+0x124>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
		//SPI1->CR1 |= 0x0040; // Enabling SPI periph
		SPI1->CR1 |= (1<<6);   // SPE=1, Peripheral enabled
 800074e:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <spi_init+0x124>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <spi_init+0x124>)
 8000754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000758:	6013      	str	r3, [r2, #0]

		/*W_GP(PA,4,HIGH);//NSS*/
		GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN4, GPIO_HIGH);
 800075a:	2201      	movs	r2, #1
 800075c:	2104      	movs	r1, #4
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff fdd6 	bl	8000310 <GPIO_voidSetPinValue>
		/*W_GP(PB,12,HIGH);*/
		GPIO_voidSetPinValue(GPIO_PORTB, GPIO_PIN12, GPIO_HIGH);
	}


}
 8000764:	e034      	b.n	80007d0 <spi_init+0x11c>
	}else if(spi == 2){
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	2b02      	cmp	r3, #2
 800076a:	d131      	bne.n	80007d0 <spi_init+0x11c>
		RCC_voidEnablePerClk(RCC_APB1, RCC_SPI2);
 800076c:	210e      	movs	r1, #14
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff ff5c 	bl	800062c <RCC_voidEnablePerClk>
		GPIO_voidSetPinDirection(GPIO_PORTB, GPIO_PIN12, GPIO_OUTPUT_50_PP);
 8000774:	2203      	movs	r2, #3
 8000776:	210c      	movs	r1, #12
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff fcf9 	bl	8000170 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(GPIO_PORTB, GPIO_PIN13, GPIO_OUTPUT_50_PP_AF);
 800077e:	220b      	movs	r2, #11
 8000780:	210d      	movs	r1, #13
 8000782:	2001      	movs	r0, #1
 8000784:	f7ff fcf4 	bl	8000170 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(GPIO_PORTB, GPIO_PIN14, GPIO_INPUT_FL);
 8000788:	2204      	movs	r2, #4
 800078a:	210e      	movs	r1, #14
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff fcef 	bl	8000170 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(GPIO_PORTB, GPIO_PIN15, GPIO_OUTPUT_50_PP_AF);
 8000792:	220b      	movs	r2, #11
 8000794:	210f      	movs	r1, #15
 8000796:	2001      	movs	r0, #1
 8000798:	f7ff fcea 	bl	8000170 <GPIO_voidSetPinDirection>
		SPI2->CR1  = 0x0004; // Master Mode
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <spi_init+0x128>)
 800079e:	2204      	movs	r2, #4
 80007a0:	601a      	str	r2, [r3, #0]
		SPI2->CR1 |= 0x0038; // fclk / 265
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <spi_init+0x128>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <spi_init+0x128>)
 80007a8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80007ac:	6013      	str	r3, [r2, #0]
		SPI2->CR2 |= 0x0004;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <spi_init+0x128>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <spi_init+0x128>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6053      	str	r3, [r2, #4]
		SPI2->CR1 |= 0x0040; // Enabling SPI SPI periph
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <spi_init+0x128>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a07      	ldr	r2, [pc, #28]	; (80007dc <spi_init+0x128>)
 80007c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c4:	6013      	str	r3, [r2, #0]
		GPIO_voidSetPinValue(GPIO_PORTB, GPIO_PIN12, GPIO_HIGH);
 80007c6:	2201      	movs	r2, #1
 80007c8:	210c      	movs	r1, #12
 80007ca:	2001      	movs	r0, #1
 80007cc:	f7ff fda0 	bl	8000310 <GPIO_voidSetPinValue>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40013000 	.word	0x40013000
 80007dc:	40003800 	.word	0x40003800

080007e0 <spi_tx>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void spi_tx(unsigned short spi, char tx_char)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	460a      	mov	r2, r1
 80007ea:	80fb      	strh	r3, [r7, #6]
 80007ec:	4613      	mov	r3, r2
 80007ee:	717b      	strb	r3, [r7, #5]
	if (spi ==1 )
 80007f0:	88fb      	ldrh	r3, [r7, #6]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d129      	bne.n	800084a <spi_tx+0x6a>
	{
		//W_GP(PA,4,LOW); Slave Select SS
		GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN4, GPIO_LOW);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2104      	movs	r1, #4
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff fd88 	bl	8000310 <GPIO_voidSetPinValue>
//		SPI1->DR = tx_char;
//		while(SPI1->SR & 0x80){}

		while (!((SPI1->SR)&(1<<1))) {};  // wait for TXE bit to set -> This will indicate that the buffer is empty
 8000800:	bf00      	nop
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <spi_tx+0xa0>)
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f9      	beq.n	8000802 <spi_tx+0x22>
		SPI1->DR = tx_char;  // load the data into the Data Register
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <spi_tx+0xa0>)
 8000810:	797a      	ldrb	r2, [r7, #5]
 8000812:	b292      	uxth	r2, r2
 8000814:	819a      	strh	r2, [r3, #12]

		while (!((SPI1->SR)&(1<<1))) {};  // wait for TXE bit to set -> This will indicate that the buffer is empty
 8000816:	bf00      	nop
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <spi_tx+0xa0>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	f003 0302 	and.w	r3, r3, #2
 8000820:	2b00      	cmp	r3, #0
 8000822:	d0f9      	beq.n	8000818 <spi_tx+0x38>
		while (((SPI1->SR)&(1<<7))) {};  // wait for BSY bit to Reset -> This will indicate that SPI is not busy in communication
 8000824:	bf00      	nop
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <spi_tx+0xa0>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f9      	bne.n	8000826 <spi_tx+0x46>

			//  Clear the Overrun flag by reading DR and SR
		uint8 temp = SPI1->DR;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <spi_tx+0xa0>)
 8000834:	899b      	ldrh	r3, [r3, #12]
 8000836:	73fb      	strb	r3, [r7, #15]
		temp = SPI1->SR;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <spi_tx+0xa0>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	73fb      	strb	r3, [r7, #15]
		//W_GP(PA,4,HIGH);
		GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN4, GPIO_HIGH);
 800083e:	2201      	movs	r2, #1
 8000840:	2104      	movs	r1, #4
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff fd64 	bl	8000310 <GPIO_voidSetPinValue>
		while(SPI2->SR & 0x80){}
		//W_GP(PB,12,HIGH);
		GPIO_voidSetPinValue(GPIO_PORTB, GPIO_PIN12, GPIO_HIGH);
	}

}
 8000848:	e016      	b.n	8000878 <spi_tx+0x98>
	}else if (spi ==2 )
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d113      	bne.n	8000878 <spi_tx+0x98>
		GPIO_voidSetPinValue(GPIO_PORTB, GPIO_PIN12, GPIO_LOW);
 8000850:	2200      	movs	r2, #0
 8000852:	210c      	movs	r1, #12
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff fd5b 	bl	8000310 <GPIO_voidSetPinValue>
		SPI2->DR = tx_char;
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <spi_tx+0xa4>)
 800085c:	797b      	ldrb	r3, [r7, #5]
 800085e:	60d3      	str	r3, [r2, #12]
		while(SPI2->SR & 0x80){}
 8000860:	bf00      	nop
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <spi_tx+0xa4>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f9      	bne.n	8000862 <spi_tx+0x82>
		GPIO_voidSetPinValue(GPIO_PORTB, GPIO_PIN12, GPIO_HIGH);
 800086e:	2201      	movs	r2, #1
 8000870:	210c      	movs	r1, #12
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff fd4c 	bl	8000310 <GPIO_voidSetPinValue>
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40013000 	.word	0x40013000
 8000884:	40003800 	.word	0x40003800

08000888 <STK_voidInit>:

static	void	(*STK_CallBack)	(void)	=	NULL	;
static	uint8	u8_TypOfInterval	=	5	;

void STK_voidInit()
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	/*		Disable timer and disable interrupt and Clk Source AHB/8	*/
	STK -> CTRL = 0x00000000;
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <STK_voidInit+0x14>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
	//STK -> CTRL = 0x00000004;
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e010 	.word	0xe000e010

080008a0 <STK_DelayMs>:

void STK_DelayMs(uint32 Copy_u32Counts)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	/*		Disable timer and disable interrupt and Clk Source AHB/8	*/
	//STK -> CTRL = 0x00000000;
	STK_voidBusyWait(Copy_u32Counts);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f000 f805 	bl	80008b8 <STK_voidBusyWait>

}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <STK_voidBusyWait>:

void STK_voidBusyWait(uint32 Copy_u32Counts)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	STK -> VAL 	= 0;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <STK_voidBusyWait+0x54>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
	STK -> LOAD = Copy_u32Counts;
 80008c6:	4a11      	ldr	r2, [pc, #68]	; (800090c <STK_voidBusyWait+0x54>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6053      	str	r3, [r2, #4]

	/*	Enable timer		*/
	SET_BIT((STK -> CTRL),0);
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <STK_voidBusyWait+0x54>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <STK_voidBusyWait+0x54>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	6013      	str	r3, [r2, #0]

	/*	Wait till the flag rises		*/
	while ((GET_BIT((STK -> CTRL),16))==0)
 80008d8:	e000      	b.n	80008dc <STK_voidBusyWait+0x24>
	{
		asm("NOP");
 80008da:	bf00      	nop
	while ((GET_BIT((STK -> CTRL),16))==0)
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <STK_voidBusyWait+0x54>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d0f8      	beq.n	80008da <STK_voidBusyWait+0x22>
	}

	/*	Stop Timer 		*/
	CLR_BIT((STK -> CTRL),0);
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <STK_voidBusyWait+0x54>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <STK_voidBusyWait+0x54>)
 80008ee:	f023 0301 	bic.w	r3, r3, #1
 80008f2:	6013      	str	r3, [r2, #0]
	STK -> VAL 	= 0;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <STK_voidBusyWait+0x54>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
	STK -> LOAD = 0;
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <STK_voidBusyWait+0x54>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e010 	.word	0xe000e010

08000910 <SysTick_Handler>:
	/*	Enable timer			*/
	SET_BIT((STK -> CTRL),0);
}

void	SysTick_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
	uint8 Local_u8Dummy = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	71fb      	strb	r3, [r7, #7]
	if(u8_TypOfInterval == STK_SINGLE_INTERVAL)
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <SysTick_Handler+0x54>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d111      	bne.n	8000946 <SysTick_Handler+0x36>
	{
		/*	Disable Interrupt		*/
		CLR_BIT((STK -> CTRL),1);
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <SysTick_Handler+0x58>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a10      	ldr	r2, [pc, #64]	; (8000968 <SysTick_Handler+0x58>)
 8000928:	f023 0302 	bic.w	r3, r3, #2
 800092c:	6013      	str	r3, [r2, #0]

		/*	Stop Timer 				*/
		CLR_BIT((STK -> CTRL),0);
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <SysTick_Handler+0x58>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <SysTick_Handler+0x58>)
 8000934:	f023 0301 	bic.w	r3, r3, #1
 8000938:	6013      	str	r3, [r2, #0]
		STK -> VAL 	= 0;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <SysTick_Handler+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
		STK -> LOAD = 0;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <SysTick_Handler+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	605a      	str	r2, [r3, #4]
	}

	STK_CallBack();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <SysTick_Handler+0x5c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4798      	blx	r3

	/*	Clear the interrupt Flag		*/
	Local_u8Dummy = (GET_BIT((STK -> CTRL),16));
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <SysTick_Handler+0x58>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	0c1b      	lsrs	r3, r3, #16
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	71fb      	strb	r3, [r7, #7]
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000000 	.word	0x20000000
 8000968:	e000e010 	.word	0xe000e010
 800096c:	20000020 	.word	0x20000020

08000970 <main>:
	3.3V --> Vcc
	G --> Grd
*/

int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	/*initialization*/
	/* System clock initialization */
	RCC_voidSysClockInit();
 8000974:	f7ff fe42 	bl	80005fc <RCC_voidSysClockInit>
	/* GPIO Peripheral clock initialization */
	RCC_voidEnablePerClk(RCC_APB2, RCC_GPIOA);
 8000978:	2102      	movs	r1, #2
 800097a:	2002      	movs	r0, #2
 800097c:	f7ff fe56 	bl	800062c <RCC_voidEnablePerClk>
	//RCC_voidEnablePerClk(RCC_APB2, RCC_SPI1);
	STK_voidInit();
 8000980:	f7ff ff82 	bl	8000888 <STK_voidInit>
	n5110_init(spi1);
 8000984:	2001      	movs	r0, #1
 8000986:	f7ff fd25 	bl	80003d4 <n5110_init>
	n5110_clear();
 800098a:	f7ff fe08 	bl	800059e <n5110_clear>
	n5110_light(GPIO_LOW);
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff fe24 	bl	80005dc <n5110_light>

    /* Loop forever */
	for(;;)
	{
		n5110_print(5, 5, "HELLO WORLD");
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <main+0x40>)
 8000996:	2105      	movs	r1, #5
 8000998:	2005      	movs	r0, #5
 800099a:	f7ff fd73 	bl	8000484 <n5110_print>
		//n5110_light(GPIO_LOW);
		STK_DelayMs(2000000);
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <main+0x44>)
 80009a0:	f7ff ff7e 	bl	80008a0 <STK_DelayMs>
		n5110_clear();
 80009a4:	f7ff fdfb 	bl	800059e <n5110_clear>
		//n5110_light(GPIO_HIGH);
		STK_DelayMs(2000000);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <main+0x44>)
 80009aa:	f7ff ff79 	bl	80008a0 <STK_DelayMs>
		n5110_print(5, 5, "HELLO WORLD");
 80009ae:	e7f1      	b.n	8000994 <main+0x24>
 80009b0:	08000a6c 	.word	0x08000a6c
 80009b4:	001e8480 	.word	0x001e8480

080009b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009e6:	f000 f811 	bl	8000a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ea:	f7ff ffc1 	bl	8000970 <main>

080009ee <LoopForever>:

LoopForever:
  b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   r0, =_estack
 80009f0:	20001800 	.word	0x20001800
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80009fc:	08000c60 	.word	0x08000c60
  ldr r2, =_sbss
 8000a00:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000a04:	20000024 	.word	0x20000024

08000a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_2_IRQHandler>
	...

08000a0c <__libc_init_array>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	2600      	movs	r6, #0
 8000a10:	4d0c      	ldr	r5, [pc, #48]	; (8000a44 <__libc_init_array+0x38>)
 8000a12:	4c0d      	ldr	r4, [pc, #52]	; (8000a48 <__libc_init_array+0x3c>)
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	10a4      	asrs	r4, r4, #2
 8000a18:	42a6      	cmp	r6, r4
 8000a1a:	d109      	bne.n	8000a30 <__libc_init_array+0x24>
 8000a1c:	f000 f81a 	bl	8000a54 <_init>
 8000a20:	2600      	movs	r6, #0
 8000a22:	4d0a      	ldr	r5, [pc, #40]	; (8000a4c <__libc_init_array+0x40>)
 8000a24:	4c0a      	ldr	r4, [pc, #40]	; (8000a50 <__libc_init_array+0x44>)
 8000a26:	1b64      	subs	r4, r4, r5
 8000a28:	10a4      	asrs	r4, r4, #2
 8000a2a:	42a6      	cmp	r6, r4
 8000a2c:	d105      	bne.n	8000a3a <__libc_init_array+0x2e>
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a34:	4798      	blx	r3
 8000a36:	3601      	adds	r6, #1
 8000a38:	e7ee      	b.n	8000a18 <__libc_init_array+0xc>
 8000a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3e:	4798      	blx	r3
 8000a40:	3601      	adds	r6, #1
 8000a42:	e7f2      	b.n	8000a2a <__libc_init_array+0x1e>
 8000a44:	08000c58 	.word	0x08000c58
 8000a48:	08000c58 	.word	0x08000c58
 8000a4c:	08000c58 	.word	0x08000c58
 8000a50:	08000c5c 	.word	0x08000c5c

08000a54 <_init>:
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	bf00      	nop
 8000a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5a:	bc08      	pop	{r3}
 8000a5c:	469e      	mov	lr, r3
 8000a5e:	4770      	bx	lr

08000a60 <_fini>:
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a62:	bf00      	nop
 8000a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a66:	bc08      	pop	{r3}
 8000a68:	469e      	mov	lr, r3
 8000a6a:	4770      	bx	lr
