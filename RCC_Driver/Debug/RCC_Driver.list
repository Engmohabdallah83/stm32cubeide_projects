
RCC_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f8  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f8  080002f8  00010300  2**0
                  CONTENTS
  4 .ARM          00000000  080002f8  080002f8  00010300  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f8  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f8  080002f8  000102f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002fc  080002fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000300  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000300  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001c4  00000000  00000000  00010329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000111  00000000  00000000  000104ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000d82  00000000  00000000  000106c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000025d  00000000  00000000  0001144a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003433  00000000  00000000  000116a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00014ada  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d8  00000000  00000000  00014b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002e0 	.word	0x080002e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002e0 	.word	0x080002e0

08000170 <RCC_voidSysClockInit>:
#include 	"RCC_Private.h"
#include 	"RCC_Config.h"


void	RCC_voidSysClockInit(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	#if			RCC_CLK_TYPE	==		RCC_HSI
				RCC_CR			=		0x00000001;
 8000174:	4b09      	ldr	r3, [pc, #36]	; (800019c <RCC_voidSysClockInit+0x2c>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
				RCC_CFGR		=		0x00000000;
 800017a:	4b09      	ldr	r3, [pc, #36]	; (80001a0 <RCC_voidSysClockInit+0x30>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
				while(GET_BIT(RCC_CR,1) == 0);
 8000180:	bf00      	nop
 8000182:	4b06      	ldr	r3, [pc, #24]	; (800019c <RCC_voidSysClockInit+0x2c>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	085b      	lsrs	r3, r3, #1
 8000188:	f003 0301 	and.w	r3, r3, #1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d0f8      	beq.n	8000182 <RCC_voidSysClockInit+0x12>
			#endif
			while(GET_BIT(RCC_CR,25) == 0);
	#else
		#error "Wrong Choice of Clock Type"
	#endif
}
 8000190:	bf00      	nop
 8000192:	bf00      	nop
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	40021000 	.word	0x40021000
 80001a0:	40021004 	.word	0x40021004

080001a4 <RCC_voidEnablePerClk>:
//RCC_voidEnablePerClk(RCC_APB2,RCC_GPIOA);
void	RCC_voidEnablePerClk(uint8 BusId , uint8 PerId)
{
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	460a      	mov	r2, r1
 80001ae:	71fb      	strb	r3, [r7, #7]
 80001b0:	4613      	mov	r3, r2
 80001b2:	71bb      	strb	r3, [r7, #6]
	/*			Range Check				*/
	if((BusId <3)&&(PerId<32))
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	2b02      	cmp	r3, #2
 80001b8:	d82d      	bhi.n	8000216 <RCC_voidEnablePerClk+0x72>
 80001ba:	79bb      	ldrb	r3, [r7, #6]
 80001bc:	2b1f      	cmp	r3, #31
 80001be:	d82a      	bhi.n	8000216 <RCC_voidEnablePerClk+0x72>
	{
		switch(BusId)
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	2b02      	cmp	r3, #2
 80001c4:	d01c      	beq.n	8000200 <RCC_voidEnablePerClk+0x5c>
 80001c6:	2b02      	cmp	r3, #2
 80001c8:	dc26      	bgt.n	8000218 <RCC_voidEnablePerClk+0x74>
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d002      	beq.n	80001d4 <RCC_voidEnablePerClk+0x30>
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d00b      	beq.n	80001ea <RCC_voidEnablePerClk+0x46>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR,PerId);		break;
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerId);		break;
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerId);		break;
		}
	}
}
 80001d2:	e021      	b.n	8000218 <RCC_voidEnablePerClk+0x74>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR,PerId);		break;
 80001d4:	4b13      	ldr	r3, [pc, #76]	; (8000224 <RCC_voidEnablePerClk+0x80>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	79ba      	ldrb	r2, [r7, #6]
 80001da:	2101      	movs	r1, #1
 80001dc:	fa01 f202 	lsl.w	r2, r1, r2
 80001e0:	4611      	mov	r1, r2
 80001e2:	4a10      	ldr	r2, [pc, #64]	; (8000224 <RCC_voidEnablePerClk+0x80>)
 80001e4:	430b      	orrs	r3, r1
 80001e6:	6013      	str	r3, [r2, #0]
 80001e8:	e016      	b.n	8000218 <RCC_voidEnablePerClk+0x74>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerId);		break;
 80001ea:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <RCC_voidEnablePerClk+0x84>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	79ba      	ldrb	r2, [r7, #6]
 80001f0:	2101      	movs	r1, #1
 80001f2:	fa01 f202 	lsl.w	r2, r1, r2
 80001f6:	4611      	mov	r1, r2
 80001f8:	4a0b      	ldr	r2, [pc, #44]	; (8000228 <RCC_voidEnablePerClk+0x84>)
 80001fa:	430b      	orrs	r3, r1
 80001fc:	6013      	str	r3, [r2, #0]
 80001fe:	e00b      	b.n	8000218 <RCC_voidEnablePerClk+0x74>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerId);		break;
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <RCC_voidEnablePerClk+0x88>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	79ba      	ldrb	r2, [r7, #6]
 8000206:	2101      	movs	r1, #1
 8000208:	fa01 f202 	lsl.w	r2, r1, r2
 800020c:	4611      	mov	r1, r2
 800020e:	4a07      	ldr	r2, [pc, #28]	; (800022c <RCC_voidEnablePerClk+0x88>)
 8000210:	430b      	orrs	r3, r1
 8000212:	6013      	str	r3, [r2, #0]
 8000214:	e000      	b.n	8000218 <RCC_voidEnablePerClk+0x74>
	}
 8000216:	bf00      	nop
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40021014 	.word	0x40021014
 8000228:	4002101c 	.word	0x4002101c
 800022c:	40021018 	.word	0x40021018

08000230 <main>:
#include "Std_Types.h"
#include "RCC_Interface.h"


int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0

	/*		System Clock initialization		*/
	RCC_voidSysClockInit();
 8000234:	f7ff ff9c 	bl	8000170 <RCC_voidSysClockInit>

	/*		RCC Per En		== GOIA		*/
	RCC_voidEnablePerClk(RCC_APB2, RCC_GPIOA);
 8000238:	2102      	movs	r1, #2
 800023a:	2002      	movs	r0, #2
 800023c:	f7ff ffb2 	bl	80001a4 <RCC_voidEnablePerClk>

	/* Loop forever */
	for(;;);
 8000240:	e7fe      	b.n	8000240 <main+0x10>
	...

08000244 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000244:	480d      	ldr	r0, [pc, #52]	; (800027c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000246:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000248:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <LoopForever+0x6>)
  ldr r1, =_edata
 800024e:	490d      	ldr	r1, [pc, #52]	; (8000284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000250:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <LoopForever+0xe>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000254:	e002      	b.n	800025c <LoopCopyDataInit>

08000256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025a:	3304      	adds	r3, #4

0800025c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800025c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000260:	d3f9      	bcc.n	8000256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000264:	4c0a      	ldr	r4, [pc, #40]	; (8000290 <LoopForever+0x16>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000268:	e001      	b.n	800026e <LoopFillZerobss>

0800026a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026c:	3204      	adds	r2, #4

0800026e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000270:	d3fb      	bcc.n	800026a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000272:	f000 f811 	bl	8000298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000276:	f7ff ffdb 	bl	8000230 <main>

0800027a <LoopForever>:

LoopForever:
    b LoopForever
 800027a:	e7fe      	b.n	800027a <LoopForever>
  ldr   r0, =_estack
 800027c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000284:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000288:	08000300 	.word	0x08000300
  ldr r2, =_sbss
 800028c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000290:	2000001c 	.word	0x2000001c

08000294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000294:	e7fe      	b.n	8000294 <ADC1_2_IRQHandler>
	...

08000298 <__libc_init_array>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	2600      	movs	r6, #0
 800029c:	4d0c      	ldr	r5, [pc, #48]	; (80002d0 <__libc_init_array+0x38>)
 800029e:	4c0d      	ldr	r4, [pc, #52]	; (80002d4 <__libc_init_array+0x3c>)
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	10a4      	asrs	r4, r4, #2
 80002a4:	42a6      	cmp	r6, r4
 80002a6:	d109      	bne.n	80002bc <__libc_init_array+0x24>
 80002a8:	f000 f81a 	bl	80002e0 <_init>
 80002ac:	2600      	movs	r6, #0
 80002ae:	4d0a      	ldr	r5, [pc, #40]	; (80002d8 <__libc_init_array+0x40>)
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <__libc_init_array+0x44>)
 80002b2:	1b64      	subs	r4, r4, r5
 80002b4:	10a4      	asrs	r4, r4, #2
 80002b6:	42a6      	cmp	r6, r4
 80002b8:	d105      	bne.n	80002c6 <__libc_init_array+0x2e>
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c0:	4798      	blx	r3
 80002c2:	3601      	adds	r6, #1
 80002c4:	e7ee      	b.n	80002a4 <__libc_init_array+0xc>
 80002c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ca:	4798      	blx	r3
 80002cc:	3601      	adds	r6, #1
 80002ce:	e7f2      	b.n	80002b6 <__libc_init_array+0x1e>
 80002d0:	080002f8 	.word	0x080002f8
 80002d4:	080002f8 	.word	0x080002f8
 80002d8:	080002f8 	.word	0x080002f8
 80002dc:	080002fc 	.word	0x080002fc

080002e0 <_init>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr

080002ec <_fini>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr
