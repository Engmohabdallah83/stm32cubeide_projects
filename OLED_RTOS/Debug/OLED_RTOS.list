
OLED_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e64  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c1c  08005c1c  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08005c1c  08005c1c  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c1c  08005c1c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c1c  08005c1c  00015c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c20  08005c20  00015c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08005c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dc0  20000058  08005c7c  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e18  08005c7c  00022e18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ab43  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000251c  00000000  00000000  0002ac07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002d128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000910  00000000  00000000  0002dd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017be2  00000000  00000000  0002e610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f077  00000000  00000000  000461f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088df5  00000000  00000000  00055269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030ec  00000000  00000000  000de060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e114c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000058 	.word	0x20000058
 800012c:	00000000 	.word	0x00000000
 8000130:	08004da0 	.word	0x08004da0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000005c 	.word	0x2000005c
 800014c:	08004da0 	.word	0x08004da0

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2iz>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d215      	bcs.n	8000752 <__aeabi_d2iz+0x36>
 8000726:	d511      	bpl.n	800074c <__aeabi_d2iz+0x30>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d912      	bls.n	8000758 <__aeabi_d2iz+0x3c>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000742:	fa23 f002 	lsr.w	r0, r3, r2
 8000746:	bf18      	it	ne
 8000748:	4240      	negne	r0, r0
 800074a:	4770      	bx	lr
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	4770      	bx	lr
 8000752:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000756:	d105      	bne.n	8000764 <__aeabi_d2iz+0x48>
 8000758:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <__aeabi_d2uiz>:
 800076c:	004a      	lsls	r2, r1, #1
 800076e:	d211      	bcs.n	8000794 <__aeabi_d2uiz+0x28>
 8000770:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000774:	d211      	bcs.n	800079a <__aeabi_d2uiz+0x2e>
 8000776:	d50d      	bpl.n	8000794 <__aeabi_d2uiz+0x28>
 8000778:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800077c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000780:	d40e      	bmi.n	80007a0 <__aeabi_d2uiz+0x34>
 8000782:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000786:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800078e:	fa23 f002 	lsr.w	r0, r3, r2
 8000792:	4770      	bx	lr
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	4770      	bx	lr
 800079a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800079e:	d102      	bne.n	80007a6 <__aeabi_d2uiz+0x3a>
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295
 80007a4:	4770      	bx	lr
 80007a6:	f04f 0000 	mov.w	r0, #0
 80007aa:	4770      	bx	lr

080007ac <__aeabi_d2f>:
 80007ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007b4:	bf24      	itt	cs
 80007b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007be:	d90d      	bls.n	80007dc <__aeabi_d2f+0x30>
 80007c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007d4:	bf08      	it	eq
 80007d6:	f020 0001 	biceq.w	r0, r0, #1
 80007da:	4770      	bx	lr
 80007dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e0:	d121      	bne.n	8000826 <__aeabi_d2f+0x7a>
 80007e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007e6:	bfbc      	itt	lt
 80007e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007ec:	4770      	bxlt	lr
 80007ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007f6:	f1c2 0218 	rsb	r2, r2, #24
 80007fa:	f1c2 0c20 	rsb	ip, r2, #32
 80007fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000802:	fa20 f002 	lsr.w	r0, r0, r2
 8000806:	bf18      	it	ne
 8000808:	f040 0001 	orrne.w	r0, r0, #1
 800080c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000810:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000814:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000818:	ea40 000c 	orr.w	r0, r0, ip
 800081c:	fa23 f302 	lsr.w	r3, r3, r2
 8000820:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000824:	e7cc      	b.n	80007c0 <__aeabi_d2f+0x14>
 8000826:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800082a:	d107      	bne.n	800083c <__aeabi_d2f+0x90>
 800082c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000830:	bf1e      	ittt	ne
 8000832:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000836:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800083a:	4770      	bxne	lr
 800083c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000840:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000844:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop

0800084c <__aeabi_f2iz>:
 800084c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000850:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000854:	d30f      	bcc.n	8000876 <__aeabi_f2iz+0x2a>
 8000856:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800085a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800085e:	d90d      	bls.n	800087c <__aeabi_f2iz+0x30>
 8000860:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000868:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800086c:	fa23 f002 	lsr.w	r0, r3, r2
 8000870:	bf18      	it	ne
 8000872:	4240      	negne	r0, r0
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr
 800087c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000880:	d101      	bne.n	8000886 <__aeabi_f2iz+0x3a>
 8000882:	0242      	lsls	r2, r0, #9
 8000884:	d105      	bne.n	8000892 <__aeabi_f2iz+0x46>
 8000886:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800088a:	bf08      	it	eq
 800088c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000890:	4770      	bx	lr
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	4770      	bx	lr

08000898 <ForDelay_us>:
//#include"STK_Interface.h"



void ForDelay_us(uint64_t u64Delay_us)
{
 8000898:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800089c:	b084      	sub	sp, #16
 800089e:	af00      	add	r7, sp, #0
 80008a0:	e9c7 0100 	strd	r0, r1, [r7]
	u64Delay_us =(long) (u64Delay_us * 0.4);
 80008a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008a8:	f7ff ff02 	bl	80006b0 <__aeabi_ul2d>
 80008ac:	a316      	add	r3, pc, #88	; (adr r3, 8000908 <ForDelay_us+0x70>)
 80008ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b2:	f7ff fc4d 	bl	8000150 <__aeabi_dmul>
 80008b6:	4602      	mov	r2, r0
 80008b8:	460b      	mov	r3, r1
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	f7ff ff2d 	bl	800071c <__aeabi_d2iz>
 80008c2:	4603      	mov	r3, r0
 80008c4:	17da      	asrs	r2, r3, #31
 80008c6:	4698      	mov	r8, r3
 80008c8:	4691      	mov	r9, r2
 80008ca:	e9c7 8900 	strd	r8, r9, [r7]
	for(uint64_t i = 0; i<u64Delay_us; i++)
 80008ce:	f04f 0200 	mov.w	r2, #0
 80008d2:	f04f 0300 	mov.w	r3, #0
 80008d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80008da:	e007      	b.n	80008ec <ForDelay_us+0x54>
	{
		asm("NOP");
 80008dc:	bf00      	nop
	for(uint64_t i = 0; i<u64Delay_us; i++)
 80008de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80008e2:	1c54      	adds	r4, r2, #1
 80008e4:	f143 0500 	adc.w	r5, r3, #0
 80008e8:	e9c7 4502 	strd	r4, r5, [r7, #8]
 80008ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80008f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008f4:	4290      	cmp	r0, r2
 80008f6:	eb71 0303 	sbcs.w	r3, r1, r3
 80008fa:	d3ef      	bcc.n	80008dc <ForDelay_us+0x44>
	}
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000908:	9999999a 	.word	0x9999999a
 800090c:	3fd99999 	.word	0x3fd99999

08000910 <DHT11_Start>:
 * Set the pin (data) as output
 * Pull the pin low and wait for 18ms
 * set the pin as input for receiving the data
 */
void DHT11_Start (void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(GPIOA , &DHT11_PIN_OUT);  // set the pin as output
 8000914:	490a      	ldr	r1, [pc, #40]	; (8000940 <DHT11_Start+0x30>)
 8000916:	480b      	ldr	r0, [pc, #44]	; (8000944 <DHT11_Start+0x34>)
 8000918:	f002 fe7a 	bl	8003610 <HAL_GPIO_Init>
//	GPIO_PDir(DHT11_PORT, DHT11_PIN, GPIO_OUTPUT_50_PP);
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);   // pull the pin low
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000922:	4808      	ldr	r0, [pc, #32]	; (8000944 <DHT11_Start+0x34>)
 8000924:	f003 f80f 	bl	8003946 <HAL_GPIO_WritePin>
//	GPIO_PW(DHT11_PORT, DHT11_PIN, GPIO_LOW);
	//Delay_ms(15);   // wait for 18ms
	//HAL_Delay(18);
	ForDelay_us(16400);
 8000928:	f244 0010 	movw	r0, #16400	; 0x4010
 800092c:	f04f 0100 	mov.w	r1, #0
 8000930:	f7ff ffb2 	bl	8000898 <ForDelay_us>
//	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
	HAL_GPIO_Init(GPIOA , &DHT11_PIN_IN);  // set the pin as output
 8000934:	4904      	ldr	r1, [pc, #16]	; (8000948 <DHT11_Start+0x38>)
 8000936:	4803      	ldr	r0, [pc, #12]	; (8000944 <DHT11_Start+0x34>)
 8000938:	f002 fe6a 	bl	8003610 <HAL_GPIO_Init>
	//GPIOA->ODR |= (1<<8); //pull up		GPIO_PULLUP
//	GPIO_IN_PULLUP(DHT11_PORT, DHT11_PIN);


}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000000 	.word	0x20000000
 8000944:	40010800 	.word	0x40010800
 8000948:	20000010 	.word	0x20000010

0800094c <Check_Response>:
 * check if the pin is low, than wait for 80 us.
 * This will totally be a delay of 120 us and the pin should be high now
 * Check if the pin is high. If it is, than the response is OK
 */
uint8_t Check_Response (void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	71fb      	strb	r3, [r7, #7]
	//Delay_us(32);
	ForDelay_us(14);//(16);
 8000956:	f04f 000e 	mov.w	r0, #14
 800095a:	f04f 0100 	mov.w	r1, #0
 800095e:	f7ff ff9b 	bl	8000898 <ForDelay_us>
	if (!( HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) ) )
 8000962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000966:	4813      	ldr	r0, [pc, #76]	; (80009b4 <Check_Response+0x68>)
 8000968:	f002 ffd6 	bl	8003918 <HAL_GPIO_ReadPin>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d112      	bne.n	8000998 <Check_Response+0x4c>
	{
		//Delay_us(72);
		ForDelay_us(30);//(32);
 8000972:	f04f 001e 	mov.w	r0, #30
 8000976:	f04f 0100 	mov.w	r1, #0
 800097a:	f7ff ff8d 	bl	8000898 <ForDelay_us>
		if ( HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) ) Response = 1;
 800097e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <Check_Response+0x68>)
 8000984:	f002 ffc8 	bl	8003918 <HAL_GPIO_ReadPin>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <Check_Response+0x48>
 800098e:	2301      	movs	r3, #1
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	e001      	b.n	8000998 <Check_Response+0x4c>
		else Response = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	71fb      	strb	r3, [r7, #7]
	}
	while ( HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) );   // wait for the pin to go low
 8000998:	bf00      	nop
 800099a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <Check_Response+0x68>)
 80009a0:	f002 ffba 	bl	8003918 <HAL_GPIO_ReadPin>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1f7      	bne.n	800099a <Check_Response+0x4e>

	return Response;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40010800 	.word	0x40010800

080009b8 <DHT11_Read>:
 * Wait for the pin to go high
 * Wait for 40 us. This is because the length of “0” bit is 26-28 us  and if the pin is high after 40 us, it indicates that the bit is “1”
 * write the respective values to the variable
 */
uint8_t DHT11_Read (void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80009be:	2300      	movs	r3, #0
 80009c0:	71bb      	strb	r3, [r7, #6]
 80009c2:	e03d      	b.n	8000a40 <DHT11_Read+0x88>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80009c4:	bf00      	nop
 80009c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ca:	4821      	ldr	r0, [pc, #132]	; (8000a50 <DHT11_Read+0x98>)
 80009cc:	f002 ffa4 	bl	8003918 <HAL_GPIO_ReadPin>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0f7      	beq.n	80009c6 <DHT11_Read+0xe>
		ForDelay_us(14); //(15);   // wait for 40 us
 80009d6:	f04f 000e 	mov.w	r0, #14
 80009da:	f04f 0100 	mov.w	r1, #0
 80009de:	f7ff ff5b 	bl	8000898 <ForDelay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80009e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e6:	481a      	ldr	r0, [pc, #104]	; (8000a50 <DHT11_Read+0x98>)
 80009e8:	f002 ff96 	bl	8003918 <HAL_GPIO_ReadPin>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d10e      	bne.n	8000a10 <DHT11_Read+0x58>
		{
			i&= ~(1<<(7-j));   // write 0
 80009f2:	79bb      	ldrb	r3, [r7, #6]
 80009f4:	f1c3 0307 	rsb	r3, r3, #7
 80009f8:	2201      	movs	r2, #1
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	b25a      	sxtb	r2, r3
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	b25b      	sxtb	r3, r3
 8000a0c:	71fb      	strb	r3, [r7, #7]
 8000a0e:	e00b      	b.n	8000a28 <DHT11_Read+0x70>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000a10:	79bb      	ldrb	r3, [r7, #6]
 8000a12:	f1c3 0307 	rsb	r3, r3, #7
 8000a16:	2201      	movs	r2, #1
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	b25a      	sxtb	r2, r3
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000a28:	bf00      	nop
 8000a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2e:	4808      	ldr	r0, [pc, #32]	; (8000a50 <DHT11_Read+0x98>)
 8000a30:	f002 ff72 	bl	8003918 <HAL_GPIO_ReadPin>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1f7      	bne.n	8000a2a <DHT11_Read+0x72>
	for (j=0;j<8;j++)
 8000a3a:	79bb      	ldrb	r3, [r7, #6]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	71bb      	strb	r3, [r7, #6]
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	2b07      	cmp	r3, #7
 8000a44:	d9be      	bls.n	80009c4 <DHT11_Read+0xc>
	}
	return i;
 8000a46:	79fb      	ldrb	r3, [r7, #7]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40010800 	.word	0x40010800

08000a54 <DHT11_ReadAll>:
 * Loop on Call DHT11_Read for 5 Times
 * Fill Data Array
 */

void DHT11_ReadAll(uint8_t * pu8Data)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	do{
		DHT11_Start();
 8000a5c:	f7ff ff58 	bl	8000910 <DHT11_Start>

	}while( !(Check_Response()) );
 8000a60:	f7ff ff74 	bl	800094c <Check_Response>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0f8      	beq.n	8000a5c <DHT11_ReadAll+0x8>

	for(uint8_t i = 0; i<5; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73fb      	strb	r3, [r7, #15]
 8000a6e:	e009      	b.n	8000a84 <DHT11_ReadAll+0x30>
	{
		pu8Data[i] = DHT11_Read();
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	18d4      	adds	r4, r2, r3
 8000a76:	f7ff ff9f 	bl	80009b8 <DHT11_Read>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0; i<5; i++)
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	3301      	adds	r3, #1
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d9f2      	bls.n	8000a70 <DHT11_ReadAll+0x1c>
	}
}
 8000a8a:	bf00      	nop
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	0000      	movs	r0, r0
	...

08000a98 <DHT11_ReadData>:
 * call Read All function
 * Assign by value Humidity Data int data[0] + decimal data[1]
 * Assign by value Humidity Data int data[2] + decimal data[3]
 */
void DHT11_ReadData(float * Cpy_f32Hum , float * Cpy_f32Temp)
{
 8000a98:	b5b0      	push	{r4, r5, r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
	uint8_t u8AllData[5];
	DHT11_ReadAll(u8AllData);
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ffd4 	bl	8000a54 <DHT11_ReadAll>
	* Cpy_f32Hum  = (u8AllData[0]+ u8AllData[1] * 0.1);
 8000aac:	7a3b      	ldrb	r3, [r7, #8]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fdca 	bl	8000648 <__aeabi_i2d>
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460d      	mov	r5, r1
 8000ab8:	7a7b      	ldrb	r3, [r7, #9]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fdc4 	bl	8000648 <__aeabi_i2d>
 8000ac0:	a31b      	add	r3, pc, #108	; (adr r3, 8000b30 <DHT11_ReadData+0x98>)
 8000ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac6:	f7ff fb43 	bl	8000150 <__aeabi_dmul>
 8000aca:	4602      	mov	r2, r0
 8000acc:	460b      	mov	r3, r1
 8000ace:	4620      	mov	r0, r4
 8000ad0:	4629      	mov	r1, r5
 8000ad2:	f7ff fc6d 	bl	80003b0 <__adddf3>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	460b      	mov	r3, r1
 8000ada:	4610      	mov	r0, r2
 8000adc:	4619      	mov	r1, r3
 8000ade:	f7ff fe65 	bl	80007ac <__aeabi_d2f>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	601a      	str	r2, [r3, #0]
	* Cpy_f32Temp = (u8AllData[2]+ u8AllData[3] * 0.1);
 8000ae8:	7abb      	ldrb	r3, [r7, #10]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fdac 	bl	8000648 <__aeabi_i2d>
 8000af0:	4604      	mov	r4, r0
 8000af2:	460d      	mov	r5, r1
 8000af4:	7afb      	ldrb	r3, [r7, #11]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fda6 	bl	8000648 <__aeabi_i2d>
 8000afc:	a30c      	add	r3, pc, #48	; (adr r3, 8000b30 <DHT11_ReadData+0x98>)
 8000afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b02:	f7ff fb25 	bl	8000150 <__aeabi_dmul>
 8000b06:	4602      	mov	r2, r0
 8000b08:	460b      	mov	r3, r1
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	4629      	mov	r1, r5
 8000b0e:	f7ff fc4f 	bl	80003b0 <__adddf3>
 8000b12:	4602      	mov	r2, r0
 8000b14:	460b      	mov	r3, r1
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f7ff fe47 	bl	80007ac <__aeabi_d2f>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b2c:	f3af 8000 	nop.w
 8000b30:	9999999a 	.word	0x9999999a
 8000b34:	3fb99999 	.word	0x3fb99999

08000b38 <USART_Initialize>:
#define E_OK		1
#define E_NOT_OK	0
const int PIN_CFG= 4;

 Std_typeReturn USART_Initialize(UsartInstance  USART_Inst ,UART_InitStruct *Init)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	if(USART_Inst == USART1Instance)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a5e      	ldr	r2, [pc, #376]	; (8000cc0 <USART_Initialize+0x188>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d134      	bne.n	8000bb4 <USART_Initialize+0x7c>
	{
		// Enable AFIO , GPIOA and USART1
		RCC->APB2ENR |= (1<<0) | (1<<2) | (1<<14);
 8000b4a:	4b5e      	ldr	r3, [pc, #376]	; (8000cc4 <USART_Initialize+0x18c>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	4a5d      	ldr	r2, [pc, #372]	; (8000cc4 <USART_Initialize+0x18c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	f043 0305 	orr.w	r3, r3, #5
 8000b58:	6193      	str	r3, [r2, #24]
 		//PA9 to be Output alternate function for USART transmition
		GPIOA->CRH = (0x0B<<(1*PIN_CFG)); //1011
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	220b      	movs	r2, #11
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	4b59      	ldr	r3, [pc, #356]	; (8000cc8 <USART_Initialize+0x190>)
 8000b62:	605a      	str	r2, [r3, #4]
		//PA10 to be input floating for USART receive
		GPIOA->CRH |=(4<<(2*PIN_CFG));
 8000b64:	4b58      	ldr	r3, [pc, #352]	; (8000cc8 <USART_Initialize+0x190>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2204      	movs	r2, #4
 8000b6a:	0052      	lsls	r2, r2, #1
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b72:	4611      	mov	r1, r2
 8000b74:	4a54      	ldr	r2, [pc, #336]	; (8000cc8 <USART_Initialize+0x190>)
 8000b76:	430b      	orrs	r3, r1
 8000b78:	6053      	str	r3, [r2, #4]

		double usart_div = FOSC / (Init->BaudRate);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	4a53      	ldr	r2, [pc, #332]	; (8000ccc <USART_Initialize+0x194>)
 8000b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fd4f 	bl	8000628 <__aeabi_ui2d>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		 UART1->BRR = usart_div;
 8000b92:	4c4b      	ldr	r4, [pc, #300]	; (8000cc0 <USART_Initialize+0x188>)
 8000b94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b98:	f7ff fde8 	bl	800076c <__aeabi_d2uiz>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60a3      	str	r3, [r4, #8]
		// Enable Transmission and Enable Reception
		 UART1->CR1 = (1<<2) | (1<<3);
 8000ba0:	4b47      	ldr	r3, [pc, #284]	; (8000cc0 <USART_Initialize+0x188>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	60da      	str	r2, [r3, #12]
		 UART1->CR1 |= (1<<13); // UE
 8000ba6:	4b46      	ldr	r3, [pc, #280]	; (8000cc0 <USART_Initialize+0x188>)
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	4a45      	ldr	r2, [pc, #276]	; (8000cc0 <USART_Initialize+0x188>)
 8000bac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bb0:	60d3      	str	r3, [r2, #12]
 8000bb2:	e07f      	b.n	8000cb4 <USART_Initialize+0x17c>
	}
	else if(USART_Inst == USART2Instance)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a46      	ldr	r2, [pc, #280]	; (8000cd0 <USART_Initialize+0x198>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d13a      	bne.n	8000c32 <USART_Initialize+0xfa>
	{
		// Enable AFIO , GPIOA
		RCC->APB2ENR |= (1<<0) | (1<<2);
 8000bbc:	4b41      	ldr	r3, [pc, #260]	; (8000cc4 <USART_Initialize+0x18c>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a40      	ldr	r2, [pc, #256]	; (8000cc4 <USART_Initialize+0x18c>)
 8000bc2:	f043 0305 	orr.w	r3, r3, #5
 8000bc6:	6193      	str	r3, [r2, #24]
		//Enable UART2
		RCC->APB1ENR |= (1<<17);
 8000bc8:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <USART_Initialize+0x18c>)
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	4a3d      	ldr	r2, [pc, #244]	; (8000cc4 <USART_Initialize+0x18c>)
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd2:	61d3      	str	r3, [r2, #28]
 		//PA9 to be Output alternate function for USART transmition
		GPIOA->CRL = (0x0B<<(2*PIN_CFG)); //1011
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	220b      	movs	r2, #11
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	4b3a      	ldr	r3, [pc, #232]	; (8000cc8 <USART_Initialize+0x190>)
 8000bde:	601a      	str	r2, [r3, #0]
		//PA10 to be input floating for USART receive
		GPIOA->CRL |=(4<<(3*PIN_CFG));
 8000be0:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <USART_Initialize+0x190>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	2104      	movs	r1, #4
 8000be6:	460b      	mov	r3, r1
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	440b      	add	r3, r1
 8000bec:	2104      	movs	r1, #4
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	4935      	ldr	r1, [pc, #212]	; (8000cc8 <USART_Initialize+0x190>)
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	600b      	str	r3, [r1, #0]

		double usart_div = FOSC / (Init->BaudRate);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	4a33      	ldr	r2, [pc, #204]	; (8000ccc <USART_Initialize+0x194>)
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fd10 	bl	8000628 <__aeabi_ui2d>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		 UART2->BRR = usart_div;
 8000c10:	4c2f      	ldr	r4, [pc, #188]	; (8000cd0 <USART_Initialize+0x198>)
 8000c12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c16:	f7ff fda9 	bl	800076c <__aeabi_d2uiz>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	60a3      	str	r3, [r4, #8]
		// Enable Transmission and Enable Reception
		 UART2->CR1 = (1<<2) | (1<<3);
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <USART_Initialize+0x198>)
 8000c20:	220c      	movs	r2, #12
 8000c22:	60da      	str	r2, [r3, #12]
		 UART2->CR1 |= (1<<13); // UE
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <USART_Initialize+0x198>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	4a29      	ldr	r2, [pc, #164]	; (8000cd0 <USART_Initialize+0x198>)
 8000c2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c2e:	60d3      	str	r3, [r2, #12]
 8000c30:	e040      	b.n	8000cb4 <USART_Initialize+0x17c>
	}
	else if(USART_Inst == USART3Instance)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a27      	ldr	r2, [pc, #156]	; (8000cd4 <USART_Initialize+0x19c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d13a      	bne.n	8000cb0 <USART_Initialize+0x178>
	{
		// Enable AFIO , GPIOB
		RCC->APB2ENR |= (1<<0) | (1<<3);
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <USART_Initialize+0x18c>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a21      	ldr	r2, [pc, #132]	; (8000cc4 <USART_Initialize+0x18c>)
 8000c40:	f043 0309 	orr.w	r3, r3, #9
 8000c44:	6193      	str	r3, [r2, #24]
		//Enable UART3
		RCC->APB1ENR |= (1<<18);
 8000c46:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <USART_Initialize+0x18c>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a1e      	ldr	r2, [pc, #120]	; (8000cc4 <USART_Initialize+0x18c>)
 8000c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c50:	61d3      	str	r3, [r2, #28]
 		//PA9 to be Output alternate function for USART transmition
		GPIOB->CRH = (0x0B<<(2*PIN_CFG)); //1011
 8000c52:	2304      	movs	r3, #4
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	220b      	movs	r2, #11
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <USART_Initialize+0x1a0>)
 8000c5c:	605a      	str	r2, [r3, #4]
		//PA10 to be input floating for USART receive
		GPIOB->CRH |=(4<<(3*PIN_CFG));
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <USART_Initialize+0x1a0>)
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	2104      	movs	r1, #4
 8000c64:	460b      	mov	r3, r1
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	440b      	add	r3, r1
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	4919      	ldr	r1, [pc, #100]	; (8000cd8 <USART_Initialize+0x1a0>)
 8000c72:	4313      	orrs	r3, r2
 8000c74:	604b      	str	r3, [r1, #4]

		double usart_div = FOSC / (Init->BaudRate);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <USART_Initialize+0x194>)
 8000c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fcd1 	bl	8000628 <__aeabi_ui2d>
 8000c86:	4602      	mov	r2, r0
 8000c88:	460b      	mov	r3, r1
 8000c8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		 UART3->BRR = usart_div;
 8000c8e:	4c11      	ldr	r4, [pc, #68]	; (8000cd4 <USART_Initialize+0x19c>)
 8000c90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c94:	f7ff fd6a 	bl	800076c <__aeabi_d2uiz>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	60a3      	str	r3, [r4, #8]
		// Enable Transmission and Enable Reception
		 UART3->CR1 = (1<<2) | (1<<3);
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <USART_Initialize+0x19c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	60da      	str	r2, [r3, #12]
		 UART3->CR1 |= (1<<13); // UE
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <USART_Initialize+0x19c>)
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <USART_Initialize+0x19c>)
 8000ca8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cac:	60d3      	str	r3, [r2, #12]
 8000cae:	e001      	b.n	8000cb4 <USART_Initialize+0x17c>
	}
	else return E_NOT_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e000      	b.n	8000cb6 <USART_Initialize+0x17e>

		 return E_OK;
 8000cb4:	2301      	movs	r3, #1
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	; 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40013800 	.word	0x40013800
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	007a1200 	.word	0x007a1200
 8000cd0:	40004400 	.word	0x40004400
 8000cd4:	40004800 	.word	0x40004800
 8000cd8:	40010c00 	.word	0x40010c00

08000cdc <USART_read>:
{
	CFG->USART->CR1 = (uint32_t)(fsz);
}

char USART_read(UART_InitStruct * CFG , uint32_t count)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
	//to stop infinite polling && (count >0
	//static uint64_t count = 1000000;
	while( (!(CFG->USART->SR & (1<<5))) && (count>0))
 8000ce6:	e002      	b.n	8000cee <USART_read+0x12>
	{
		count--;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	603b      	str	r3, [r7, #0]
	while( (!(CFG->USART->SR & (1<<5))) && (count>0))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0320 	and.w	r3, r3, #32
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <USART_read+0x26>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f2      	bne.n	8000ce8 <USART_read+0xc>
	}
	return CFG->USART->DR & 0x00FF;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	b2db      	uxtb	r3, r3
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8000d20:	f001 fea2 	bl	8002a68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8000d24:	4b3e      	ldr	r3, [pc, #248]	; (8000e20 <pvPortMalloc+0x10c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d104      	bne.n	8000d36 <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8000d2c:	f000 f8ba 	bl	8000ea4 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8000d30:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <pvPortMalloc+0x10c>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00e      	beq.n	8000d5a <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	461a      	mov	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4413      	add	r3, r2
 8000d44:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d004      	beq.n	8000d5a <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f023 0307 	bic.w	r3, r3, #7
 8000d56:	3308      	adds	r3, #8
 8000d58:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d057      	beq.n	8000e10 <pvPortMalloc+0xfc>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f242 72f7 	movw	r2, #10231	; 0x27f7
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d852      	bhi.n	8000e10 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <pvPortMalloc+0x110>)
 8000d6c:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <pvPortMalloc+0x110>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d74:	e004      	b.n	8000d80 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d903      	bls.n	8000d92 <pvPortMalloc+0x7e>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f1      	bne.n	8000d76 <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <pvPortMalloc+0x114>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d03a      	beq.n	8000e10 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2208      	movs	r2, #8
 8000da0:	4413      	add	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2208      	movs	r2, #8
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d922      	bls.n	8000e02 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000dbc:	69fa      	ldr	r2, [r7, #28]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	1ad2      	subs	r2, r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <pvPortMalloc+0x110>)
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	e002      	b.n	8000de8 <pvPortMalloc+0xd4>
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8f6      	bhi.n	8000de2 <pvPortMalloc+0xce>
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <pvPortMalloc+0x118>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <pvPortMalloc+0x118>)
 8000e0e:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000e10:	f001 fe38 	bl	8002a84 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8000e14:	697b      	ldr	r3, [r7, #20]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3720      	adds	r7, #32
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20002884 	.word	0x20002884
 8000e24:	20002874 	.word	0x20002874
 8000e28:	2000287c 	.word	0x2000287c
 8000e2c:	20000028 	.word	0x20000028

08000e30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d027      	beq.n	8000e92 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8000e42:	2308      	movs	r3, #8
 8000e44:	425b      	negs	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4413      	add	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8000e50:	f001 fe0a 	bl	8002a68 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <vPortFree+0x6c>)
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	e002      	b.n	8000e66 <vPortFree+0x36>
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d8f6      	bhi.n	8000e60 <vPortFree+0x30>
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <vPortFree+0x70>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <vPortFree+0x70>)
 8000e8c:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8000e8e:	f001 fdf9 	bl	8002a84 <xTaskResumeAll>
	}
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20002874 	.word	0x20002874
 8000ea0:	20000028 	.word	0x20000028

08000ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <prvHeapInit+0x44>)
 8000eac:	f023 0307 	bic.w	r3, r3, #7
 8000eb0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <prvHeapInit+0x48>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <prvHeapInit+0x48>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <prvHeapInit+0x4c>)
 8000ec0:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000ec4:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <prvHeapInit+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000ed6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <prvHeapInit+0x4c>)
 8000edc:	601a      	str	r2, [r3, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	2000007c 	.word	0x2000007c
 8000eec:	20002874 	.word	0x20002874
 8000ef0:	2000287c 	.word	0x2000287c

08000ef4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f103 0208 	add.w	r2, r3, #8
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f103 0208 	add.w	r2, r3, #8
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f103 0208 	add.w	r2, r3, #8
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr

08000f32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	601a      	str	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa6:	d103      	bne.n	8000fb0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	e00c      	b.n	8000fca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	e002      	b.n	8000fbe <vListInsert+0x2e>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d2f6      	bcs.n	8000fb8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6892      	ldr	r2, [r2, #8]
 8001016:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6852      	ldr	r2, [r2, #4]
 8001020:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	d103      	bne.n	8001034 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	1e5a      	subs	r2, r3, #1
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
	...

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b08d      	sub	sp, #52	; 0x34
 8001058:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105a:	f002 f9a5 	bl	80033a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105e:	f000 fa85 	bl	800156c <SystemClock_Config>
//	GPIOA->CRL = (3<<4) | (3<<8); // configure PA1 = blue led as output pin

//	while( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) );
//	GPIOA->ODR |=(1<<1);

	Mutex = xSemaphoreCreateMutex();  //Mutex creation
 8001062:	2001      	movs	r0, #1
 8001064:	f000 fc8f 	bl	8001986 <xQueueCreateMutex>
 8001068:	4603      	mov	r3, r0
 800106a:	4a33      	ldr	r2, [pc, #204]	; (8001138 <main+0xe4>)
 800106c:	6013      	str	r3, [r2, #0]
	xQueue = xQueueCreate(1,sizeof(uint8_t)); //create a Queue of a size one uint8_t for temp
 800106e:	2200      	movs	r2, #0
 8001070:	2101      	movs	r1, #1
 8001072:	2001      	movs	r0, #1
 8001074:	f000 fc1e 	bl	80018b4 <xQueueGenericCreate>
 8001078:	4603      	mov	r3, r0
 800107a:	4a30      	ldr	r2, [pc, #192]	; (800113c <main+0xe8>)
 800107c:	6013      	str	r3, [r2, #0]
	xQFlag = xQueueCreate (1,sizeof(uint8_t)); //Create another Queue for flag
 800107e:	2200      	movs	r2, #0
 8001080:	2101      	movs	r1, #1
 8001082:	2001      	movs	r0, #1
 8001084:	f000 fc16 	bl	80018b4 <xQueueGenericCreate>
 8001088:	4603      	mov	r3, r0
 800108a:	4a2d      	ldr	r2, [pc, #180]	; (8001140 <main+0xec>)
 800108c:	6013      	str	r3, [r2, #0]

	MX_GPIO_Init();
 800108e:	f000 fa4b 	bl	8001528 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001092:	f000 fa1b 	bl	80014cc <MX_I2C1_Init>
	SSD1306_Init();
 8001096:	f000 ff97 	bl	8001fc8 <SSD1306_Init>
	USART_Initialize(USART1Instance, &USART1Config);
 800109a:	492a      	ldr	r1, [pc, #168]	; (8001144 <main+0xf0>)
 800109c:	482a      	ldr	r0, [pc, #168]	; (8001148 <main+0xf4>)
 800109e:	f7ff fd4b 	bl	8000b38 <USART_Initialize>

//	Test Input
	GPIO_InitTypeDef PB5_IN  = {GPIO_PIN_5, GPIO_MODE_INPUT, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH};
 80010a2:	4b2a      	ldr	r3, [pc, #168]	; (800114c <main+0xf8>)
 80010a4:	f107 0418 	add.w	r4, r7, #24
 80010a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	GPIO_InitTypeDef PA1_OUT = {GPIO_PIN_1, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH};
 80010ae:	4b28      	ldr	r3, [pc, #160]	; (8001150 <main+0xfc>)
 80010b0:	f107 0408 	add.w	r4, r7, #8
 80010b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	__HAL_RCC_GPIOB_CLK_ENABLE(); //ENABLE PORTB CLOCK
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <main+0x100>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4a25      	ldr	r2, [pc, #148]	; (8001154 <main+0x100>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6193      	str	r3, [r2, #24]
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <main+0x100>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE(); //ENABLE PORTA CLOCK
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <main+0x100>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <main+0x100>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6193      	str	r3, [r2, #24]
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <main+0x100>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]

//	RCC->APB2ENR |= (1<<2) ; //Enable GPIOA
	HAL_GPIO_Init(GPIOB, &PB5_IN); //Initialize PORTB pin 5 as input
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	4619      	mov	r1, r3
 80010f0:	4819      	ldr	r0, [pc, #100]	; (8001158 <main+0x104>)
 80010f2:	f002 fa8d 	bl	8003610 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &PA1_OUT); //Initialize PORTA pin 1 as output
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	4619      	mov	r1, r3
 80010fc:	4817      	ldr	r0, [pc, #92]	; (800115c <main+0x108>)
 80010fe:	f002 fa87 	bl	8003610 <HAL_GPIO_Init>
	//GPIOA->CRL |=  (3<<4); // configure PA1 = blue led as output pin | (3<<8)
  /* USER CODE BEGIN 2 */

//  GPIOA->ODR |=(1<<1);

   DisplayScreen(Welcome);
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f832 	bl	800116c <DisplayScreen>
   //vTaskDelay(4000/portTICK_PERIOD_MS);
   ForDelay_us(2000000);
 8001108:	4815      	ldr	r0, [pc, #84]	; (8001160 <main+0x10c>)
 800110a:	f04f 0100 	mov.w	r1, #0
 800110e:	f7ff fbc3 	bl	8000898 <ForDelay_us>

  if(Mutex != NULL)
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <main+0xe4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00c      	beq.n	8001134 <main+0xe0>
  {

//	  xTaskCreate(ClearTask, "Clear_Task", 300, NULL, 3, NULL);
	  xTaskCreate(CheckReq, "CheckReq", 300, NULL, 1, NULL);
 800111a:	2300      	movs	r3, #0
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	2301      	movs	r3, #1
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001128:	490e      	ldr	r1, [pc, #56]	; (8001164 <main+0x110>)
 800112a:	480f      	ldr	r0, [pc, #60]	; (8001168 <main+0x114>)
 800112c:	f001 fa9b 	bl	8002666 <xTaskCreate>
	  //xQueueSendToBack(xQueue,&StartFlag,portMAX_DELAY);
	  vTaskStartScheduler();
 8001130:	f001 fc62 	bl	80029f8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001134:	e7fe      	b.n	8001134 <main+0xe0>
 8001136:	bf00      	nop
 8001138:	20002888 	.word	0x20002888
 800113c:	2000288c 	.word	0x2000288c
 8001140:	20002890 	.word	0x20002890
 8001144:	2000002c 	.word	0x2000002c
 8001148:	40013800 	.word	0x40013800
 800114c:	08004dc4 	.word	0x08004dc4
 8001150:	08004dd4 	.word	0x08004dd4
 8001154:	40021000 	.word	0x40021000
 8001158:	40010c00 	.word	0x40010c00
 800115c:	40010800 	.word	0x40010800
 8001160:	001e8480 	.word	0x001e8480
 8001164:	08004db8 	.word	0x08004db8
 8001168:	080012a9 	.word	0x080012a9

0800116c <DisplayScreen>:
  /* USER CODE END 3 */
  return 0;
}

void DisplayScreen(uint8_t u8Switch)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	switch(u8Switch)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d05a      	beq.n	8001232 <DisplayScreen+0xc6>
 800117c:	2b02      	cmp	r3, #2
 800117e:	dc78      	bgt.n	8001272 <DisplayScreen+0x106>
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <DisplayScreen+0x1e>
 8001184:	2b01      	cmp	r3, #1
 8001186:	d034      	beq.n	80011f2 <DisplayScreen+0x86>
		SSD1306_Puts ("Act : ", &Font_11x18, 1);
		SSD1306_UpdateScreen();

		break;
	}//Switch
}//Display Fun
 8001188:	e073      	b.n	8001272 <DisplayScreen+0x106>
		SSD1306_Clear();
 800118a:	f001 f940 	bl	800240e <SSD1306_Clear>
		SSD1306_GotoXY (15,0);
 800118e:	2100      	movs	r1, #0
 8001190:	200f      	movs	r0, #15
 8001192:	f001 f881 	bl	8002298 <SSD1306_GotoXY>
		SSD1306_Puts ("Robotics", &Font_11x18, 1);
 8001196:	2201      	movs	r2, #1
 8001198:	4938      	ldr	r1, [pc, #224]	; (800127c <DisplayScreen+0x110>)
 800119a:	4839      	ldr	r0, [pc, #228]	; (8001280 <DisplayScreen+0x114>)
 800119c:	f001 f912 	bl	80023c4 <SSD1306_Puts>
		SSD1306_GotoXY (10, 20);
 80011a0:	2114      	movs	r1, #20
 80011a2:	200a      	movs	r0, #10
 80011a4:	f001 f878 	bl	8002298 <SSD1306_GotoXY>
		SSD1306_Puts ("Corner G7", &Font_11x18, 1);
 80011a8:	2201      	movs	r2, #1
 80011aa:	4934      	ldr	r1, [pc, #208]	; (800127c <DisplayScreen+0x110>)
 80011ac:	4835      	ldr	r0, [pc, #212]	; (8001284 <DisplayScreen+0x118>)
 80011ae:	f001 f909 	bl	80023c4 <SSD1306_Puts>
		SSD1306_GotoXY (25, 40);
 80011b2:	2128      	movs	r1, #40	; 0x28
 80011b4:	2019      	movs	r0, #25
 80011b6:	f001 f86f 	bl	8002298 <SSD1306_GotoXY>
		SSD1306_Puts ("Project", &Font_11x18, 1);
 80011ba:	2201      	movs	r2, #1
 80011bc:	492f      	ldr	r1, [pc, #188]	; (800127c <DisplayScreen+0x110>)
 80011be:	4832      	ldr	r0, [pc, #200]	; (8001288 <DisplayScreen+0x11c>)
 80011c0:	f001 f900 	bl	80023c4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80011c4:	f000 ffc4 	bl	8002150 <SSD1306_UpdateScreen>
		SSD1306_ScrollRight(0,7);
 80011c8:	2107      	movs	r1, #7
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 fe86 	bl	8001edc <SSD1306_ScrollRight>
		ForDelay_us(1500000);
 80011d0:	482e      	ldr	r0, [pc, #184]	; (800128c <DisplayScreen+0x120>)
 80011d2:	f04f 0100 	mov.w	r1, #0
 80011d6:	f7ff fb5f 	bl	8000898 <ForDelay_us>
		SSD1306_ScrollLeft(0,7);
 80011da:	2107      	movs	r1, #7
 80011dc:	2000      	movs	r0, #0
 80011de:	f000 feb3 	bl	8001f48 <SSD1306_ScrollLeft>
		ForDelay_us(1500000);
 80011e2:	482a      	ldr	r0, [pc, #168]	; (800128c <DisplayScreen+0x120>)
 80011e4:	f04f 0100 	mov.w	r1, #0
 80011e8:	f7ff fb56 	bl	8000898 <ForDelay_us>
		SSD1306_Stopscroll();
 80011ec:	f000 fee2 	bl	8001fb4 <SSD1306_Stopscroll>
		break;
 80011f0:	e03f      	b.n	8001272 <DisplayScreen+0x106>
		SSD1306_Clear();
 80011f2:	f001 f90c 	bl	800240e <SSD1306_Clear>
		SSD1306_GotoXY (10,0);
 80011f6:	2100      	movs	r1, #0
 80011f8:	200a      	movs	r0, #10
 80011fa:	f001 f84d 	bl	8002298 <SSD1306_GotoXY>
		SSD1306_Puts ("Press W", &Font_11x18, 1);
 80011fe:	2201      	movs	r2, #1
 8001200:	491e      	ldr	r1, [pc, #120]	; (800127c <DisplayScreen+0x110>)
 8001202:	4823      	ldr	r0, [pc, #140]	; (8001290 <DisplayScreen+0x124>)
 8001204:	f001 f8de 	bl	80023c4 <SSD1306_Puts>
		SSD1306_GotoXY (10, 20);
 8001208:	2114      	movs	r1, #20
 800120a:	200a      	movs	r0, #10
 800120c:	f001 f844 	bl	8002298 <SSD1306_GotoXY>
		SSD1306_Puts ("On App", &Font_11x18, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	491a      	ldr	r1, [pc, #104]	; (800127c <DisplayScreen+0x110>)
 8001214:	481f      	ldr	r0, [pc, #124]	; (8001294 <DisplayScreen+0x128>)
 8001216:	f001 f8d5 	bl	80023c4 <SSD1306_Puts>
		SSD1306_GotoXY (10, 40);
 800121a:	2128      	movs	r1, #40	; 0x28
 800121c:	200a      	movs	r0, #10
 800121e:	f001 f83b 	bl	8002298 <SSD1306_GotoXY>
		SSD1306_Puts ("to Read", &Font_11x18, 1);
 8001222:	2201      	movs	r2, #1
 8001224:	4915      	ldr	r1, [pc, #84]	; (800127c <DisplayScreen+0x110>)
 8001226:	481c      	ldr	r0, [pc, #112]	; (8001298 <DisplayScreen+0x12c>)
 8001228:	f001 f8cc 	bl	80023c4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800122c:	f000 ff90 	bl	8002150 <SSD1306_UpdateScreen>
		break;
 8001230:	e01f      	b.n	8001272 <DisplayScreen+0x106>
		SSD1306_Clear();
 8001232:	f001 f8ec 	bl	800240e <SSD1306_Clear>
		SSD1306_GotoXY (0,0);
 8001236:	2100      	movs	r1, #0
 8001238:	2000      	movs	r0, #0
 800123a:	f001 f82d 	bl	8002298 <SSD1306_GotoXY>
		SSD1306_Puts ("Temp: ", &Font_11x18, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	490e      	ldr	r1, [pc, #56]	; (800127c <DisplayScreen+0x110>)
 8001242:	4816      	ldr	r0, [pc, #88]	; (800129c <DisplayScreen+0x130>)
 8001244:	f001 f8be 	bl	80023c4 <SSD1306_Puts>
		SSD1306_GotoXY (0, 20);
 8001248:	2114      	movs	r1, #20
 800124a:	2000      	movs	r0, #0
 800124c:	f001 f824 	bl	8002298 <SSD1306_GotoXY>
		SSD1306_Puts ("Hum : ", &Font_11x18, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	490a      	ldr	r1, [pc, #40]	; (800127c <DisplayScreen+0x110>)
 8001254:	4812      	ldr	r0, [pc, #72]	; (80012a0 <DisplayScreen+0x134>)
 8001256:	f001 f8b5 	bl	80023c4 <SSD1306_Puts>
		SSD1306_GotoXY (0, 40);
 800125a:	2128      	movs	r1, #40	; 0x28
 800125c:	2000      	movs	r0, #0
 800125e:	f001 f81b 	bl	8002298 <SSD1306_GotoXY>
		SSD1306_Puts ("Act : ", &Font_11x18, 1);
 8001262:	2201      	movs	r2, #1
 8001264:	4905      	ldr	r1, [pc, #20]	; (800127c <DisplayScreen+0x110>)
 8001266:	480f      	ldr	r0, [pc, #60]	; (80012a4 <DisplayScreen+0x138>)
 8001268:	f001 f8ac 	bl	80023c4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800126c:	f000 ff70 	bl	8002150 <SSD1306_UpdateScreen>
		break;
 8001270:	bf00      	nop
}//Display Fun
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000020 	.word	0x20000020
 8001280:	08004de4 	.word	0x08004de4
 8001284:	08004df0 	.word	0x08004df0
 8001288:	08004dfc 	.word	0x08004dfc
 800128c:	0016e360 	.word	0x0016e360
 8001290:	08004e04 	.word	0x08004e04
 8001294:	08004e0c 	.word	0x08004e0c
 8001298:	08004e14 	.word	0x08004e14
 800129c:	08004e1c 	.word	0x08004e1c
 80012a0:	08004e24 	.word	0x08004e24
 80012a4:	08004e2c 	.word	0x08004e2c

080012a8 <CheckReq>:

void CheckReq(void *pvParameter)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]
//	uint8_t Flag = 0;
	TaskHandle_t xTaskTempHandle = NULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
	DisplayScreen(Bluetooth);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff ff59 	bl	800116c <DisplayScreen>
//		}
//		GPIOA->ODR |=(1<<1);

//		if( (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))) )
		//vTaskDelay(3000/portTICK_PERIOD_MS);
		if((USART_read(&USART1Config, 1000)) == 'F' || (USART_read(&USART1Config, 1000)) == 'f')
 80012ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012be:	4813      	ldr	r0, [pc, #76]	; (800130c <CheckReq+0x64>)
 80012c0:	f7ff fd0c 	bl	8000cdc <USART_read>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b46      	cmp	r3, #70	; 0x46
 80012c8:	d007      	beq.n	80012da <CheckReq+0x32>
 80012ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012ce:	480f      	ldr	r0, [pc, #60]	; (800130c <CheckReq+0x64>)
 80012d0:	f7ff fd04 	bl	8000cdc <USART_read>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b66      	cmp	r3, #102	; 0x66
 80012d8:	d1ef      	bne.n	80012ba <CheckReq+0x12>

		{
			DisplayScreen(Reading);
 80012da:	2002      	movs	r0, #2
 80012dc:	f7ff ff46 	bl	800116c <DisplayScreen>
			vTaskDelay(2000/portTICK_PERIOD_MS);
 80012e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012e4:	f001 fb64 	bl	80029b0 <vTaskDelay>
			xTaskCreate(DHT11Sensor, "DHT11SensorTask", 300, NULL, 2, &xTaskTempHandle);
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	2302      	movs	r3, #2
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2300      	movs	r3, #0
 80012f4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012f8:	4905      	ldr	r1, [pc, #20]	; (8001310 <CheckReq+0x68>)
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <CheckReq+0x6c>)
 80012fc:	f001 f9b3 	bl	8002666 <xTaskCreate>
			vTaskDelay(2000/portTICK_PERIOD_MS);
 8001300:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001304:	f001 fb54 	bl	80029b0 <vTaskDelay>
		if((USART_read(&USART1Config, 1000)) == 'F' || (USART_read(&USART1Config, 1000)) == 'f')
 8001308:	e7d7      	b.n	80012ba <CheckReq+0x12>
 800130a:	bf00      	nop
 800130c:	2000002c 	.word	0x2000002c
 8001310:	08004e34 	.word	0x08004e34
 8001314:	08001319 	.word	0x08001319

08001318 <DHT11Sensor>:
 * Read DHT11 Sensor
 * Display Reading on OLED
 * Check Temperature threshold
 */
void DHT11Sensor(void *pvParameter)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af02      	add	r7, sp, #8
 800131e:	6078      	str	r0, [r7, #4]
	static float Temp = 0;
	static float Humid = 0;
	char snum[5];

	TaskHandle_t xTaskTempHandle = (TaskHandle_t)pvParameter;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	617b      	str	r3, [r7, #20]
	TaskHandle_t xTaskActHandle = NULL;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
//		if(xQueue != NULL)
//		{
//			xQueueReceive(xQueue, &Temp,portMAX_DELAY);
//		}

		DHT11_ReadData(&Humid, &Temp);
 8001328:	4932      	ldr	r1, [pc, #200]	; (80013f4 <DHT11Sensor+0xdc>)
 800132a:	4833      	ldr	r0, [pc, #204]	; (80013f8 <DHT11Sensor+0xe0>)
 800132c:	f7ff fbb4 	bl	8000a98 <DHT11_ReadData>
		xQueueSendToBack(xQueue, &Temp, portMAX_DELAY);
 8001330:	4b32      	ldr	r3, [pc, #200]	; (80013fc <DHT11Sensor+0xe4>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	f04f 32ff 	mov.w	r2, #4294967295
 800133a:	492e      	ldr	r1, [pc, #184]	; (80013f4 <DHT11Sensor+0xdc>)
 800133c:	f000 fb3c 	bl	80019b8 <xQueueGenericSend>

		//display Temperature
		itoa( ((int)Temp), snum, 10);//integer to ASCII
 8001340:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <DHT11Sensor+0xdc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fa81 	bl	800084c <__aeabi_f2iz>
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	220a      	movs	r2, #10
 8001350:	4619      	mov	r1, r3
 8001352:	f003 fca7 	bl	8004ca4 <itoa>
//		SSD1306_Clear();
		SSD1306_GotoXY (60 , 0);
 8001356:	2100      	movs	r1, #0
 8001358:	203c      	movs	r0, #60	; 0x3c
 800135a:	f000 ff9d 	bl	8002298 <SSD1306_GotoXY>
		SSD1306_Puts("  ", &Font_11x18, 1);
 800135e:	2201      	movs	r2, #1
 8001360:	4927      	ldr	r1, [pc, #156]	; (8001400 <DHT11Sensor+0xe8>)
 8001362:	4828      	ldr	r0, [pc, #160]	; (8001404 <DHT11Sensor+0xec>)
 8001364:	f001 f82e 	bl	80023c4 <SSD1306_Puts>
		SSD1306_GotoXY (60 , 0);
 8001368:	2100      	movs	r1, #0
 800136a:	203c      	movs	r0, #60	; 0x3c
 800136c:	f000 ff94 	bl	8002298 <SSD1306_GotoXY>
		SSD1306_Puts (snum, &Font_11x18, 1);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2201      	movs	r2, #1
 8001376:	4922      	ldr	r1, [pc, #136]	; (8001400 <DHT11Sensor+0xe8>)
 8001378:	4618      	mov	r0, r3
 800137a:	f001 f823 	bl	80023c4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800137e:	f000 fee7 	bl	8002150 <SSD1306_UpdateScreen>

		//Display Humidity
		itoa( ((int)Humid), snum, 10);//integer to ASCII
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <DHT11Sensor+0xe0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fa60 	bl	800084c <__aeabi_f2iz>
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	220a      	movs	r2, #10
 8001392:	4619      	mov	r1, r3
 8001394:	f003 fc86 	bl	8004ca4 <itoa>
		SSD1306_GotoXY (60 , 20);
 8001398:	2114      	movs	r1, #20
 800139a:	203c      	movs	r0, #60	; 0x3c
 800139c:	f000 ff7c 	bl	8002298 <SSD1306_GotoXY>
		SSD1306_Puts("  ", &Font_11x18, 1);
 80013a0:	2201      	movs	r2, #1
 80013a2:	4917      	ldr	r1, [pc, #92]	; (8001400 <DHT11Sensor+0xe8>)
 80013a4:	4817      	ldr	r0, [pc, #92]	; (8001404 <DHT11Sensor+0xec>)
 80013a6:	f001 f80d 	bl	80023c4 <SSD1306_Puts>
		SSD1306_GotoXY (60 , 20);
 80013aa:	2114      	movs	r1, #20
 80013ac:	203c      	movs	r0, #60	; 0x3c
 80013ae:	f000 ff73 	bl	8002298 <SSD1306_GotoXY>
		SSD1306_Puts (snum, &Font_11x18, 1);
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	2201      	movs	r2, #1
 80013b8:	4911      	ldr	r1, [pc, #68]	; (8001400 <DHT11Sensor+0xe8>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 f802 	bl	80023c4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80013c0:	f000 fec6 	bl	8002150 <SSD1306_UpdateScreen>
//		HAL_Delay (1000);
//		xSemaphoreGive(Mutex);
//		vTaskDelay(1000/portTICK_PERIOD_MS);

		vTaskDelay(1000/portTICK_PERIOD_MS);
 80013c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c8:	f001 faf2 	bl	80029b0 <vTaskDelay>
		xTaskCreate(ActuatorTask, "ActuatorTask", 300, NULL, 3, &xTaskActHandle);
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	2303      	movs	r3, #3
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2300      	movs	r3, #0
 80013d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013dc:	490a      	ldr	r1, [pc, #40]	; (8001408 <DHT11Sensor+0xf0>)
 80013de:	480b      	ldr	r0, [pc, #44]	; (800140c <DHT11Sensor+0xf4>)
 80013e0:	f001 f941 	bl	8002666 <xTaskCreate>
		vTaskDelay(2000/portTICK_PERIOD_MS);
 80013e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013e8:	f001 fae2 	bl	80029b0 <vTaskDelay>

		vTaskDelete( xTaskTempHandle );
 80013ec:	6978      	ldr	r0, [r7, #20]
 80013ee:	f001 fa61 	bl	80028b4 <vTaskDelete>
		DHT11_ReadData(&Humid, &Temp);
 80013f2:	e799      	b.n	8001328 <DHT11Sensor+0x10>
 80013f4:	200028ec 	.word	0x200028ec
 80013f8:	200028e8 	.word	0x200028e8
 80013fc:	2000288c 	.word	0x2000288c
 8001400:	20000020 	.word	0x20000020
 8001404:	08004e44 	.word	0x08004e44
 8001408:	08004e48 	.word	0x08004e48
 800140c:	08001411 	.word	0x08001411

08001410 <ActuatorTask>:
 * check Temperature degree from Queue
 * Actuate Actuator on/off according to Temperature
 * Display on OLED Actuator status
 */
void ActuatorTask(void *pvParameter)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	static uint32_t Temp = 0;
	TaskHandle_t xTaskTempHandle = (TaskHandle_t)pvParameter;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	60fb      	str	r3, [r7, #12]

	while(1)
	{
//		TODO Actuator status if reading was not sent to Queue
//		xSemaphoreTake(Mutex, portMAX_DELAY);
		if(xQueue != NULL)
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <ActuatorTask+0x9c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d03e      	beq.n	80014a2 <ActuatorTask+0x92>
		{
			xQueueReceive(xQueue, &Temp, portMAX_DELAY);
 8001424:	4b21      	ldr	r3, [pc, #132]	; (80014ac <ActuatorTask+0x9c>)
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	f04f 32ff 	mov.w	r2, #4294967295
 800142e:	4920      	ldr	r1, [pc, #128]	; (80014b0 <ActuatorTask+0xa0>)
 8001430:	f000 fb6c 	bl	8001b0c <xQueueGenericReceive>

			if( ((uint32_t)Temp) >= 24u)
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <ActuatorTask+0xa0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b17      	cmp	r3, #23
 800143a:	d919      	bls.n	8001470 <ActuatorTask+0x60>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2102      	movs	r1, #2
 8001440:	481c      	ldr	r0, [pc, #112]	; (80014b4 <ActuatorTask+0xa4>)
 8001442:	f002 fa80 	bl	8003946 <HAL_GPIO_WritePin>

				SSD1306_GotoXY (60,40);
 8001446:	2128      	movs	r1, #40	; 0x28
 8001448:	203c      	movs	r0, #60	; 0x3c
 800144a:	f000 ff25 	bl	8002298 <SSD1306_GotoXY>
				SSD1306_Puts("  ", &Font_11x18, 1);
 800144e:	2201      	movs	r2, #1
 8001450:	4919      	ldr	r1, [pc, #100]	; (80014b8 <ActuatorTask+0xa8>)
 8001452:	481a      	ldr	r0, [pc, #104]	; (80014bc <ActuatorTask+0xac>)
 8001454:	f000 ffb6 	bl	80023c4 <SSD1306_Puts>
				SSD1306_GotoXY (60,40);
 8001458:	2128      	movs	r1, #40	; 0x28
 800145a:	203c      	movs	r0, #60	; 0x3c
 800145c:	f000 ff1c 	bl	8002298 <SSD1306_GotoXY>
				SSD1306_Puts ("ON", &Font_11x18, 1);
 8001460:	2201      	movs	r2, #1
 8001462:	4915      	ldr	r1, [pc, #84]	; (80014b8 <ActuatorTask+0xa8>)
 8001464:	4816      	ldr	r0, [pc, #88]	; (80014c0 <ActuatorTask+0xb0>)
 8001466:	f000 ffad 	bl	80023c4 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 800146a:	f000 fe71 	bl	8002150 <SSD1306_UpdateScreen>
 800146e:	e018      	b.n	80014a2 <ActuatorTask+0x92>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2102      	movs	r1, #2
 8001474:	480f      	ldr	r0, [pc, #60]	; (80014b4 <ActuatorTask+0xa4>)
 8001476:	f002 fa66 	bl	8003946 <HAL_GPIO_WritePin>

				SSD1306_GotoXY (60,40);
 800147a:	2128      	movs	r1, #40	; 0x28
 800147c:	203c      	movs	r0, #60	; 0x3c
 800147e:	f000 ff0b 	bl	8002298 <SSD1306_GotoXY>
				SSD1306_Puts("    ", &Font_11x18, 1);
 8001482:	2201      	movs	r2, #1
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <ActuatorTask+0xa8>)
 8001486:	480f      	ldr	r0, [pc, #60]	; (80014c4 <ActuatorTask+0xb4>)
 8001488:	f000 ff9c 	bl	80023c4 <SSD1306_Puts>
				SSD1306_GotoXY (60,40);
 800148c:	2128      	movs	r1, #40	; 0x28
 800148e:	203c      	movs	r0, #60	; 0x3c
 8001490:	f000 ff02 	bl	8002298 <SSD1306_GotoXY>
				SSD1306_Puts ("OFF", &Font_11x18, 1);
 8001494:	2201      	movs	r2, #1
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <ActuatorTask+0xa8>)
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <ActuatorTask+0xb8>)
 800149a:	f000 ff93 	bl	80023c4 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 800149e:	f000 fe57 	bl	8002150 <SSD1306_UpdateScreen>

//		HAL_Delay (1000);
//		xSemaphoreGive(Mutex);
//		vTaskDelay(1000/portTICK_PERIOD_MS);

		vTaskDelete( xTaskTempHandle );
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f001 fa06 	bl	80028b4 <vTaskDelete>
		if(xQueue != NULL)
 80014a8:	e7b8      	b.n	800141c <ActuatorTask+0xc>
 80014aa:	bf00      	nop
 80014ac:	2000288c 	.word	0x2000288c
 80014b0:	200028f0 	.word	0x200028f0
 80014b4:	40010800 	.word	0x40010800
 80014b8:	20000020 	.word	0x20000020
 80014bc:	08004e44 	.word	0x08004e44
 80014c0:	08004e58 	.word	0x08004e58
 80014c4:	08004e5c 	.word	0x08004e5c
 80014c8:	08004e64 	.word	0x08004e64

080014cc <MX_I2C1_Init>:




static void MX_I2C1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_I2C1_Init+0x50>)
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <MX_I2C1_Init+0x54>)
 80014d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_I2C1_Init+0x50>)
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_I2C1_Init+0x58>)
 80014da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_I2C1_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_I2C1_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_I2C1_Init+0x50>)
 80014ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_I2C1_Init+0x50>)
 800150a:	f002 fa35 	bl	8003978 <HAL_I2C_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001514:	f000 f865 	bl	80015e2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20002894 	.word	0x20002894
 8001520:	40005400 	.word	0x40005400
 8001524:	00061a80 	.word	0x00061a80

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_GPIO_Init+0x40>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <MX_GPIO_Init+0x40>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6193      	str	r3, [r2, #24]
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_GPIO_Init+0x40>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_GPIO_Init+0x40>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4a07      	ldr	r2, [pc, #28]	; (8001568 <MX_GPIO_Init+0x40>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	6193      	str	r3, [r2, #24]
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <MX_GPIO_Init+0x40>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40021000 	.word	0x40021000

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b090      	sub	sp, #64	; 0x40
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	2228      	movs	r2, #40	; 0x28
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fbd6 	bl	8004d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158e:	2301      	movs	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001592:	2301      	movs	r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001596:	2310      	movs	r3, #16
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800159a:	2300      	movs	r3, #0
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 ff60 	bl	8004468 <HAL_RCC_OscConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015ae:	f000 f818 	bl	80015e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b2:	230f      	movs	r3, #15
 80015b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 f9ce 	bl	800496c <HAL_RCC_ClockConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015d6:	f000 f804 	bl	80015e2 <Error_Handler>
  }
}
 80015da:	bf00      	nop
 80015dc:	3740      	adds	r7, #64	; 0x40
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e6:	b672      	cpsid	i
}
 80015e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ea:	e7fe      	b.n	80015ea <Error_Handler+0x8>

080015ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3b04      	subs	r3, #4
 80015fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001604:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3b04      	subs	r3, #4
 800160a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f023 0201 	bic.w	r2, r3, #1
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3b04      	subs	r3, #4
 800161a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800161c:	4a08      	ldr	r2, [pc, #32]	; (8001640 <pxPortInitialiseStack+0x54>)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3b14      	subs	r3, #20
 8001626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	3b20      	subs	r3, #32
 8001632:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001634:	68fb      	ldr	r3, [r7, #12]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	08001645 	.word	0x08001645

08001644 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800164a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800164e:	f383 8811 	msr	BASEPRI, r3
 8001652:	f3bf 8f6f 	isb	sy
 8001656:	f3bf 8f4f 	dsb	sy
 800165a:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800165c:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 800165e:	e7fe      	b.n	800165e <prvTaskExitError+0x1a>

08001660 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <pxCurrentTCBConst2>)
 8001662:	6819      	ldr	r1, [r3, #0]
 8001664:	6808      	ldr	r0, [r1, #0]
 8001666:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800166a:	f380 8809 	msr	PSP, r0
 800166e:	f3bf 8f6f 	isb	sy
 8001672:	f04f 0000 	mov.w	r0, #0
 8001676:	f380 8811 	msr	BASEPRI, r0
 800167a:	f04e 0e0d 	orr.w	lr, lr, #13
 800167e:	4770      	bx	lr

08001680 <pxCurrentTCBConst2>:
 8001680:	20002cfc 	.word	0x20002cfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop

08001688 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001688:	4806      	ldr	r0, [pc, #24]	; (80016a4 <prvPortStartFirstTask+0x1c>)
 800168a:	6800      	ldr	r0, [r0, #0]
 800168c:	6800      	ldr	r0, [r0, #0]
 800168e:	f380 8808 	msr	MSP, r0
 8001692:	b662      	cpsie	i
 8001694:	b661      	cpsie	f
 8001696:	f3bf 8f4f 	dsb	sy
 800169a:	f3bf 8f6f 	isb	sy
 800169e:	df00      	svc	0
 80016a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80016a2:	bf00      	nop
 80016a4:	e000ed08 	.word	0xe000ed08

080016a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <xPortStartScheduler+0x34>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <xPortStartScheduler+0x34>)
 80016b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80016b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <xPortStartScheduler+0x34>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <xPortStartScheduler+0x34>)
 80016be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80016c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80016c4:	f000 f88a 	bl	80017dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <xPortStartScheduler+0x38>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80016ce:	f7ff ffdb 	bl	8001688 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80016d2:	f7ff ffb7 	bl	8001644 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	e000ed20 	.word	0xe000ed20
 80016e0:	20000048 	.word	0x20000048

080016e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
	__asm volatile
 80016ea:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80016ee:	f383 8811 	msr	BASEPRI, r3
 80016f2:	f3bf 8f6f 	isb	sy
 80016f6:	f3bf 8f4f 	dsb	sy
 80016fa:	607b      	str	r3, [r7, #4]
}
 80016fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <vPortEnterCritical+0x30>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	4a03      	ldr	r2, [pc, #12]	; (8001714 <vPortEnterCritical+0x30>)
 8001706:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000048 	.word	0x20000048

08001718 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <vPortExitCritical+0x30>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3b01      	subs	r3, #1
 8001724:	4a08      	ldr	r2, [pc, #32]	; (8001748 <vPortExitCritical+0x30>)
 8001726:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <vPortExitCritical+0x30>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d105      	bne.n	800173c <vPortExitCritical+0x24>
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 800173a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000048 	.word	0x20000048
 800174c:	00000000 	.word	0x00000000

08001750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001750:	f3ef 8009 	mrs	r0, PSP
 8001754:	f3bf 8f6f 	isb	sy
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <pxCurrentTCBConst>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001760:	6010      	str	r0, [r2, #0]
 8001762:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001766:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800176a:	f380 8811 	msr	BASEPRI, r0
 800176e:	f001 fac3 	bl	8002cf8 <vTaskSwitchContext>
 8001772:	f04f 0000 	mov.w	r0, #0
 8001776:	f380 8811 	msr	BASEPRI, r0
 800177a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800177e:	6819      	ldr	r1, [r3, #0]
 8001780:	6808      	ldr	r0, [r1, #0]
 8001782:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001786:	f380 8809 	msr	PSP, r0
 800178a:	f3bf 8f6f 	isb	sy
 800178e:	4770      	bx	lr

08001790 <pxCurrentTCBConst>:
 8001790:	20002cfc 	.word	0x20002cfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop

08001798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	__asm volatile
 800179e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	607b      	str	r3, [r7, #4]
}
 80017b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80017b2:	f001 f9f5 	bl	8002ba0 <xTaskIncrementTick>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <SysTick_Handler+0x40>)
 80017be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f383 8811 	msr	BASEPRI, r3
}
 80017ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	e000ed04 	.word	0xe000ed04

080017dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <vPortSetupTimerInterrupt+0x1c>)
 80017e2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80017e6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <vPortSetupTimerInterrupt+0x20>)
 80017ea:	2207      	movs	r2, #7
 80017ec:	601a      	str	r2, [r3, #0]
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e014 	.word	0xe000e014
 80017fc:	e000e010 	.word	0xe000e010

08001800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800180e:	f7ff ff69 	bl	80016e4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181a:	68f9      	ldr	r1, [r7, #12]
 800181c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	441a      	add	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183e:	3b01      	subs	r3, #1
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	441a      	add	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	22ff      	movs	r2, #255	; 0xff
 8001852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	22ff      	movs	r2, #255	; 0xff
 800185a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d114      	bne.n	800188e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d01a      	beq.n	80018a2 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3310      	adds	r3, #16
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fa9d 	bl	8002db0 <xTaskRemoveFromEventList>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d012      	beq.n	80018a2 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <xQueueGenericReset+0xb0>)
 800187e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	f3bf 8f4f 	dsb	sy
 8001888:	f3bf 8f6f 	isb	sy
 800188c:	e009      	b.n	80018a2 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3310      	adds	r3, #16
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fb2e 	bl	8000ef4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3324      	adds	r3, #36	; 0x24
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fb29 	bl	8000ef4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80018a2:	f7ff ff39 	bl	8001718 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	e000ed04 	.word	0xe000ed04

080018b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	4613      	mov	r3, r2
 80018c0:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	e004      	b.n	80018d8 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	3350      	adds	r3, #80	; 0x50
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fa19 	bl	8000d14 <pvPortMalloc>
 80018e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	3350      	adds	r3, #80	; 0x50
 80018ee:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	4613      	mov	r3, r2
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f805 	bl	800190c <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8001902:	69bb      	ldr	r3, [r7, #24]
	}
 8001904:	4618      	mov	r0, r3
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d103      	bne.n	8001928 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e002      	b.n	800192e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800193a:	2101      	movs	r1, #1
 800193c:	69b8      	ldr	r0, [r7, #24]
 800193e:	f7ff ff5f 	bl	8001800 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00e      	beq.n	800197e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001972:	2300      	movs	r3, #0
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f81d 	bl	80019b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001990:	2301      	movs	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	461a      	mov	r2, r3
 800199c:	6939      	ldr	r1, [r7, #16]
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f7ff ff88 	bl	80018b4 <xQueueGenericCreate>
 80019a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f7ff ffd3 	bl	8001952 <prvInitialiseMutex>

		return pxNewQueue;
 80019ac:	68fb      	ldr	r3, [r7, #12]
	}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80019ce:	f7ff fe89 	bl	80016e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019da:	429a      	cmp	r2, r3
 80019dc:	d302      	bcc.n	80019e4 <xQueueGenericSend+0x2c>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d129      	bne.n	8001a38 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	6a38      	ldr	r0, [r7, #32]
 80019ea:	f000 f967 	bl	8001cbc <prvCopyDataToQueue>
 80019ee:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d010      	beq.n	8001a1a <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	3324      	adds	r3, #36	; 0x24
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 f9d7 	bl	8002db0 <xTaskRemoveFromEventList>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001a08:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <xQueueGenericSend+0x150>)
 8001a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	f3bf 8f4f 	dsb	sy
 8001a14:	f3bf 8f6f 	isb	sy
 8001a18:	e00a      	b.n	8001a30 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001a20:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <xQueueGenericSend+0x150>)
 8001a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f3bf 8f4f 	dsb	sy
 8001a2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001a30:	f7ff fe72 	bl	8001718 <vPortExitCritical>
				return pdPASS;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e063      	b.n	8001b00 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d103      	bne.n	8001a46 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001a3e:	f7ff fe6b 	bl	8001718 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e05c      	b.n	8001b00 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d106      	bne.n	8001a5a <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4618      	mov	r0, r3
 8001a52:	f001 fa01 	bl	8002e58 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001a56:	2301      	movs	r3, #1
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001a5a:	f7ff fe5d 	bl	8001718 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001a5e:	f001 f803 	bl	8002a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001a62:	f7ff fe3f 	bl	80016e4 <vPortEnterCritical>
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a72:	d103      	bne.n	8001a7c <xQueueGenericSend+0xc4>
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d103      	bne.n	8001a92 <xQueueGenericSend+0xda>
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a92:	f7ff fe41 	bl	8001718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a96:	1d3a      	adds	r2, r7, #4
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f001 f9f0 	bl	8002e84 <xTaskCheckForTimeOut>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d124      	bne.n	8001af4 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001aaa:	6a38      	ldr	r0, [r7, #32]
 8001aac:	f000 f9fe 	bl	8001eac <prvIsQueueFull>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d018      	beq.n	8001ae8 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	3310      	adds	r3, #16
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f001 f960 	bl	8002d84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001ac4:	6a38      	ldr	r0, [r7, #32]
 8001ac6:	f000 f989 	bl	8001ddc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001aca:	f000 ffdb 	bl	8002a84 <xTaskResumeAll>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f47f af7c 	bne.w	80019ce <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <xQueueGenericSend+0x150>)
 8001ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	f3bf 8f4f 	dsb	sy
 8001ae2:	f3bf 8f6f 	isb	sy
 8001ae6:	e772      	b.n	80019ce <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001ae8:	6a38      	ldr	r0, [r7, #32]
 8001aea:	f000 f977 	bl	8001ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001aee:	f000 ffc9 	bl	8002a84 <xTaskResumeAll>
 8001af2:	e76c      	b.n	80019ce <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001af4:	6a38      	ldr	r0, [r7, #32]
 8001af6:	f000 f971 	bl	8001ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001afa:	f000 ffc3 	bl	8002a84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001afe:	2300      	movs	r3, #0
		}
	}
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	e000ed04 	.word	0xe000ed04

08001b0c <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001b22:	f7ff fddf 	bl	80016e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d046      	beq.n	8001bc0 <xQueueGenericReceive+0xb4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	6a38      	ldr	r0, [r7, #32]
 8001b3c:	f000 f928 	bl	8001d90 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d121      	bne.n	8001b8a <xQueueGenericReceive+0x7e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	1e5a      	subs	r2, r3, #1
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d104      	bne.n	8001b60 <xQueueGenericReceive+0x54>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001b56:	f001 fb87 	bl	8003268 <pvTaskIncrementMutexHeldCount>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d027      	beq.n	8001bb8 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	3310      	adds	r3, #16
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f001 f91f 	bl	8002db0 <xTaskRemoveFromEventList>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01f      	beq.n	8001bb8 <xQueueGenericReceive+0xac>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8001b78:	4b4f      	ldr	r3, [pc, #316]	; (8001cb8 <xQueueGenericReceive+0x1ac>)
 8001b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f3bf 8f4f 	dsb	sy
 8001b84:	f3bf 8f6f 	isb	sy
 8001b88:	e016      	b.n	8001bb8 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00f      	beq.n	8001bb8 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	3324      	adds	r3, #36	; 0x24
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 f907 	bl	8002db0 <xTaskRemoveFromEventList>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001ba8:	4b43      	ldr	r3, [pc, #268]	; (8001cb8 <xQueueGenericReceive+0x1ac>)
 8001baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	f3bf 8f4f 	dsb	sy
 8001bb4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001bb8:	f7ff fdae 	bl	8001718 <vPortExitCritical>
				return pdPASS;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e077      	b.n	8001cb0 <xQueueGenericReceive+0x1a4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d103      	bne.n	8001bce <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001bc6:	f7ff fda7 	bl	8001718 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e070      	b.n	8001cb0 <xQueueGenericReceive+0x1a4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d106      	bne.n	8001be2 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 f93d 	bl	8002e58 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001bde:	2301      	movs	r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001be2:	f7ff fd99 	bl	8001718 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001be6:	f000 ff3f 	bl	8002a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001bea:	f7ff fd7b 	bl	80016e4 <vPortEnterCritical>
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d103      	bne.n	8001c04 <xQueueGenericReceive+0xf8>
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c0a:	b25b      	sxtb	r3, r3
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d103      	bne.n	8001c1a <xQueueGenericReceive+0x10e>
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c1a:	f7ff fd7d 	bl	8001718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c1e:	1d3a      	adds	r2, r7, #4
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 f92c 	bl	8002e84 <xTaskCheckForTimeOut>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d131      	bne.n	8001c96 <xQueueGenericReceive+0x18a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c32:	6a38      	ldr	r0, [r7, #32]
 8001c34:	f000 f924 	bl	8001e80 <prvIsQueueEmpty>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d025      	beq.n	8001c8a <xQueueGenericReceive+0x17e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d108      	bne.n	8001c58 <xQueueGenericReceive+0x14c>
					{
						taskENTER_CRITICAL();
 8001c46:	f7ff fd4d 	bl	80016e4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 fa30 	bl	80030b4 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001c54:	f7ff fd60 	bl	8001718 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	3324      	adds	r3, #36	; 0x24
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 f88f 	bl	8002d84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c66:	6a38      	ldr	r0, [r7, #32]
 8001c68:	f000 f8b8 	bl	8001ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001c6c:	f000 ff0a 	bl	8002a84 <xTaskResumeAll>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f47f af55 	bne.w	8001b22 <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <xQueueGenericReceive+0x1ac>)
 8001c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f3bf 8f4f 	dsb	sy
 8001c84:	f3bf 8f6f 	isb	sy
 8001c88:	e74b      	b.n	8001b22 <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001c8a:	6a38      	ldr	r0, [r7, #32]
 8001c8c:	f000 f8a6 	bl	8001ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c90:	f000 fef8 	bl	8002a84 <xTaskResumeAll>
 8001c94:	e745      	b.n	8001b22 <xQueueGenericReceive+0x16>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001c96:	6a38      	ldr	r0, [r7, #32]
 8001c98:	f000 f8a0 	bl	8001ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001c9c:	f000 fef2 	bl	8002a84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ca0:	6a38      	ldr	r0, [r7, #32]
 8001ca2:	f000 f8ed 	bl	8001e80 <prvIsQueueEmpty>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f43f af3a 	beq.w	8001b22 <xQueueGenericReceive+0x16>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001cae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	e000ed04 	.word	0xe000ed04

08001cbc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10d      	bne.n	8001cf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d14d      	bne.n	8001d7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f001 fa5a 	bl	80031a0 <xTaskPriorityDisinherit>
 8001cec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	e043      	b.n	8001d7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d119      	bne.n	8001d30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6898      	ldr	r0, [r3, #8]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	461a      	mov	r2, r3
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	f003 f83c 	bl	8004d84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	441a      	add	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d32b      	bcc.n	8001d7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	e026      	b.n	8001d7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	68d8      	ldr	r0, [r3, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	f003 f822 	bl	8004d84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	425b      	negs	r3, r3
 8001d4a:	441a      	add	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d207      	bcs.n	8001d6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	425b      	negs	r3, r3
 8001d66:	441a      	add	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d105      	bne.n	8001d7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001d86:	697b      	ldr	r3, [r7, #20]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d018      	beq.n	8001dd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	441a      	add	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d303      	bcc.n	8001dc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68d9      	ldr	r1, [r3, #12]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	461a      	mov	r2, r3
 8001dce:	6838      	ldr	r0, [r7, #0]
 8001dd0:	f002 ffd8 	bl	8004d84 <memcpy>
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001de4:	f7ff fc7e 	bl	80016e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001df0:	e011      	b.n	8001e16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d012      	beq.n	8001e20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3324      	adds	r3, #36	; 0x24
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 ffd6 	bl	8002db0 <xTaskRemoveFromEventList>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001e0a:	f001 f87f 	bl	8002f0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	dce9      	bgt.n	8001df2 <prvUnlockQueue+0x16>
 8001e1e:	e000      	b.n	8001e22 <prvUnlockQueue+0x46>
					break;
 8001e20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	22ff      	movs	r2, #255	; 0xff
 8001e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001e2a:	f7ff fc75 	bl	8001718 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001e2e:	f7ff fc59 	bl	80016e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e3a:	e011      	b.n	8001e60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d012      	beq.n	8001e6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3310      	adds	r3, #16
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 ffb1 	bl	8002db0 <xTaskRemoveFromEventList>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001e54:	f001 f85a 	bl	8002f0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001e58:	7bbb      	ldrb	r3, [r7, #14]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	dce9      	bgt.n	8001e3c <prvUnlockQueue+0x60>
 8001e68:	e000      	b.n	8001e6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001e6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	22ff      	movs	r2, #255	; 0xff
 8001e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001e74:	f7ff fc50 	bl	8001718 <vPortExitCritical>
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001e88:	f7ff fc2c 	bl	80016e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001e94:	2301      	movs	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e001      	b.n	8001e9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001e9e:	f7ff fc3b 	bl	8001718 <vPortExitCritical>

	return xReturn;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001eb4:	f7ff fc16 	bl	80016e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d102      	bne.n	8001eca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e001      	b.n	8001ece <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001ece:	f7ff fc23 	bl	8001718 <vPortExitCritical>

	return xReturn;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8001eec:	2226      	movs	r2, #38	; 0x26
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2078      	movs	r0, #120	; 0x78
 8001ef2:	f000 fb0f 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2078      	movs	r0, #120	; 0x78
 8001efc:	f000 fb0a 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	461a      	mov	r2, r3
 8001f04:	2100      	movs	r1, #0
 8001f06:	2078      	movs	r0, #120	; 0x78
 8001f08:	f000 fb04 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2078      	movs	r0, #120	; 0x78
 8001f12:	f000 faff 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001f16:	79bb      	ldrb	r3, [r7, #6]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2078      	movs	r0, #120	; 0x78
 8001f1e:	f000 faf9 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	2078      	movs	r0, #120	; 0x78
 8001f28:	f000 faf4 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001f2c:	22ff      	movs	r2, #255	; 0xff
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2078      	movs	r0, #120	; 0x78
 8001f32:	f000 faef 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001f36:	222f      	movs	r2, #47	; 0x2f
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2078      	movs	r0, #120	; 0x78
 8001f3c:	f000 faea 	bl	8002514 <ssd1306_I2C_Write>
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	460a      	mov	r2, r1
 8001f52:	71fb      	strb	r3, [r7, #7]
 8001f54:	4613      	mov	r3, r2
 8001f56:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8001f58:	2227      	movs	r2, #39	; 0x27
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2078      	movs	r0, #120	; 0x78
 8001f5e:	f000 fad9 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	2078      	movs	r0, #120	; 0x78
 8001f68:	f000 fad4 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2100      	movs	r1, #0
 8001f72:	2078      	movs	r0, #120	; 0x78
 8001f74:	f000 face 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2078      	movs	r0, #120	; 0x78
 8001f7e:	f000 fac9 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001f82:	79bb      	ldrb	r3, [r7, #6]
 8001f84:	461a      	mov	r2, r3
 8001f86:	2100      	movs	r1, #0
 8001f88:	2078      	movs	r0, #120	; 0x78
 8001f8a:	f000 fac3 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	2078      	movs	r0, #120	; 0x78
 8001f94:	f000 fabe 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001f98:	22ff      	movs	r2, #255	; 0xff
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2078      	movs	r0, #120	; 0x78
 8001f9e:	f000 fab9 	bl	8002514 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001fa2:	222f      	movs	r2, #47	; 0x2f
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	2078      	movs	r0, #120	; 0x78
 8001fa8:	f000 fab4 	bl	8002514 <ssd1306_I2C_Write>
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001fb8:	222e      	movs	r2, #46	; 0x2e
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2078      	movs	r0, #120	; 0x78
 8001fbe:	f000 faa9 	bl	8002514 <ssd1306_I2C_Write>
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001fce:	f000 fa27 	bl	8002420 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001fd2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2178      	movs	r1, #120	; 0x78
 8001fda:	485b      	ldr	r0, [pc, #364]	; (8002148 <SSD1306_Init+0x180>)
 8001fdc:	f001 ff0e 	bl	8003dfc <HAL_I2C_IsDeviceReady>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e0a9      	b.n	800213e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001fea:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001fee:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ff0:	e002      	b.n	8001ff8 <SSD1306_Init+0x30>
		p--;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f9      	bne.n	8001ff2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001ffe:	22ae      	movs	r2, #174	; 0xae
 8002000:	2100      	movs	r1, #0
 8002002:	2078      	movs	r0, #120	; 0x78
 8002004:	f000 fa86 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002008:	2220      	movs	r2, #32
 800200a:	2100      	movs	r1, #0
 800200c:	2078      	movs	r0, #120	; 0x78
 800200e:	f000 fa81 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002012:	2210      	movs	r2, #16
 8002014:	2100      	movs	r1, #0
 8002016:	2078      	movs	r0, #120	; 0x78
 8002018:	f000 fa7c 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800201c:	22b0      	movs	r2, #176	; 0xb0
 800201e:	2100      	movs	r1, #0
 8002020:	2078      	movs	r0, #120	; 0x78
 8002022:	f000 fa77 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002026:	22c8      	movs	r2, #200	; 0xc8
 8002028:	2100      	movs	r1, #0
 800202a:	2078      	movs	r0, #120	; 0x78
 800202c:	f000 fa72 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	2078      	movs	r0, #120	; 0x78
 8002036:	f000 fa6d 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800203a:	2210      	movs	r2, #16
 800203c:	2100      	movs	r1, #0
 800203e:	2078      	movs	r0, #120	; 0x78
 8002040:	f000 fa68 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002044:	2240      	movs	r2, #64	; 0x40
 8002046:	2100      	movs	r1, #0
 8002048:	2078      	movs	r0, #120	; 0x78
 800204a:	f000 fa63 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800204e:	2281      	movs	r2, #129	; 0x81
 8002050:	2100      	movs	r1, #0
 8002052:	2078      	movs	r0, #120	; 0x78
 8002054:	f000 fa5e 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002058:	22ff      	movs	r2, #255	; 0xff
 800205a:	2100      	movs	r1, #0
 800205c:	2078      	movs	r0, #120	; 0x78
 800205e:	f000 fa59 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002062:	22a1      	movs	r2, #161	; 0xa1
 8002064:	2100      	movs	r1, #0
 8002066:	2078      	movs	r0, #120	; 0x78
 8002068:	f000 fa54 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800206c:	22a6      	movs	r2, #166	; 0xa6
 800206e:	2100      	movs	r1, #0
 8002070:	2078      	movs	r0, #120	; 0x78
 8002072:	f000 fa4f 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002076:	22a8      	movs	r2, #168	; 0xa8
 8002078:	2100      	movs	r1, #0
 800207a:	2078      	movs	r0, #120	; 0x78
 800207c:	f000 fa4a 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002080:	223f      	movs	r2, #63	; 0x3f
 8002082:	2100      	movs	r1, #0
 8002084:	2078      	movs	r0, #120	; 0x78
 8002086:	f000 fa45 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800208a:	22a4      	movs	r2, #164	; 0xa4
 800208c:	2100      	movs	r1, #0
 800208e:	2078      	movs	r0, #120	; 0x78
 8002090:	f000 fa40 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002094:	22d3      	movs	r2, #211	; 0xd3
 8002096:	2100      	movs	r1, #0
 8002098:	2078      	movs	r0, #120	; 0x78
 800209a:	f000 fa3b 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2078      	movs	r0, #120	; 0x78
 80020a4:	f000 fa36 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80020a8:	22d5      	movs	r2, #213	; 0xd5
 80020aa:	2100      	movs	r1, #0
 80020ac:	2078      	movs	r0, #120	; 0x78
 80020ae:	f000 fa31 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80020b2:	22f0      	movs	r2, #240	; 0xf0
 80020b4:	2100      	movs	r1, #0
 80020b6:	2078      	movs	r0, #120	; 0x78
 80020b8:	f000 fa2c 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80020bc:	22d9      	movs	r2, #217	; 0xd9
 80020be:	2100      	movs	r1, #0
 80020c0:	2078      	movs	r0, #120	; 0x78
 80020c2:	f000 fa27 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80020c6:	2222      	movs	r2, #34	; 0x22
 80020c8:	2100      	movs	r1, #0
 80020ca:	2078      	movs	r0, #120	; 0x78
 80020cc:	f000 fa22 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80020d0:	22da      	movs	r2, #218	; 0xda
 80020d2:	2100      	movs	r1, #0
 80020d4:	2078      	movs	r0, #120	; 0x78
 80020d6:	f000 fa1d 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80020da:	2212      	movs	r2, #18
 80020dc:	2100      	movs	r1, #0
 80020de:	2078      	movs	r0, #120	; 0x78
 80020e0:	f000 fa18 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80020e4:	22db      	movs	r2, #219	; 0xdb
 80020e6:	2100      	movs	r1, #0
 80020e8:	2078      	movs	r0, #120	; 0x78
 80020ea:	f000 fa13 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80020ee:	2220      	movs	r2, #32
 80020f0:	2100      	movs	r1, #0
 80020f2:	2078      	movs	r0, #120	; 0x78
 80020f4:	f000 fa0e 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80020f8:	228d      	movs	r2, #141	; 0x8d
 80020fa:	2100      	movs	r1, #0
 80020fc:	2078      	movs	r0, #120	; 0x78
 80020fe:	f000 fa09 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002102:	2214      	movs	r2, #20
 8002104:	2100      	movs	r1, #0
 8002106:	2078      	movs	r0, #120	; 0x78
 8002108:	f000 fa04 	bl	8002514 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800210c:	22af      	movs	r2, #175	; 0xaf
 800210e:	2100      	movs	r1, #0
 8002110:	2078      	movs	r0, #120	; 0x78
 8002112:	f000 f9ff 	bl	8002514 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002116:	222e      	movs	r2, #46	; 0x2e
 8002118:	2100      	movs	r1, #0
 800211a:	2078      	movs	r0, #120	; 0x78
 800211c:	f000 f9fa 	bl	8002514 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002120:	2000      	movs	r0, #0
 8002122:	f000 f843 	bl	80021ac <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002126:	f000 f813 	bl	8002150 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <SSD1306_Init+0x184>)
 800212c:	2200      	movs	r2, #0
 800212e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <SSD1306_Init+0x184>)
 8002132:	2200      	movs	r2, #0
 8002134:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <SSD1306_Init+0x184>)
 8002138:	2201      	movs	r2, #1
 800213a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20002894 	.word	0x20002894
 800214c:	20002cf4 	.word	0x20002cf4

08002150 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002156:	2300      	movs	r3, #0
 8002158:	71fb      	strb	r3, [r7, #7]
 800215a:	e01d      	b.n	8002198 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	3b50      	subs	r3, #80	; 0x50
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	2100      	movs	r1, #0
 8002166:	2078      	movs	r0, #120	; 0x78
 8002168:	f000 f9d4 	bl	8002514 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	2078      	movs	r0, #120	; 0x78
 8002172:	f000 f9cf 	bl	8002514 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002176:	2210      	movs	r2, #16
 8002178:	2100      	movs	r1, #0
 800217a:	2078      	movs	r0, #120	; 0x78
 800217c:	f000 f9ca 	bl	8002514 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	01db      	lsls	r3, r3, #7
 8002184:	4a08      	ldr	r2, [pc, #32]	; (80021a8 <SSD1306_UpdateScreen+0x58>)
 8002186:	441a      	add	r2, r3
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	2140      	movs	r1, #64	; 0x40
 800218c:	2078      	movs	r0, #120	; 0x78
 800218e:	f000 f95b 	bl	8002448 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	3301      	adds	r3, #1
 8002196:	71fb      	strb	r3, [r7, #7]
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	2b07      	cmp	r3, #7
 800219c:	d9de      	bls.n	800215c <SSD1306_UpdateScreen+0xc>
	}
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200028f4 	.word	0x200028f4

080021ac <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <SSD1306_Fill+0x14>
 80021bc:	2300      	movs	r3, #0
 80021be:	e000      	b.n	80021c2 <SSD1306_Fill+0x16>
 80021c0:	23ff      	movs	r3, #255	; 0xff
 80021c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c6:	4619      	mov	r1, r3
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <SSD1306_Fill+0x2c>)
 80021ca:	f002 fdaf 	bl	8004d2c <memset>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200028f4 	.word	0x200028f4

080021dc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
 80021e6:	460b      	mov	r3, r1
 80021e8:	80bb      	strh	r3, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	70fb      	strb	r3, [r7, #3]
	if (
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	2b7f      	cmp	r3, #127	; 0x7f
 80021f2:	d848      	bhi.n	8002286 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80021f4:	88bb      	ldrh	r3, [r7, #4]
 80021f6:	2b3f      	cmp	r3, #63	; 0x3f
 80021f8:	d845      	bhi.n	8002286 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <SSD1306_DrawPixel+0xb4>)
 80021fc:	791b      	ldrb	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d11a      	bne.n	800224c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002216:	88fa      	ldrh	r2, [r7, #6]
 8002218:	88bb      	ldrh	r3, [r7, #4]
 800221a:	08db      	lsrs	r3, r3, #3
 800221c:	b298      	uxth	r0, r3
 800221e:	4603      	mov	r3, r0
 8002220:	01db      	lsls	r3, r3, #7
 8002222:	4413      	add	r3, r2
 8002224:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <SSD1306_DrawPixel+0xb8>)
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	b25a      	sxtb	r2, r3
 800222a:	88bb      	ldrh	r3, [r7, #4]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	b25b      	sxtb	r3, r3
 8002238:	4313      	orrs	r3, r2
 800223a:	b259      	sxtb	r1, r3
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	4603      	mov	r3, r0
 8002240:	01db      	lsls	r3, r3, #7
 8002242:	4413      	add	r3, r2
 8002244:	b2c9      	uxtb	r1, r1
 8002246:	4a13      	ldr	r2, [pc, #76]	; (8002294 <SSD1306_DrawPixel+0xb8>)
 8002248:	54d1      	strb	r1, [r2, r3]
 800224a:	e01d      	b.n	8002288 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800224c:	88fa      	ldrh	r2, [r7, #6]
 800224e:	88bb      	ldrh	r3, [r7, #4]
 8002250:	08db      	lsrs	r3, r3, #3
 8002252:	b298      	uxth	r0, r3
 8002254:	4603      	mov	r3, r0
 8002256:	01db      	lsls	r3, r3, #7
 8002258:	4413      	add	r3, r2
 800225a:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <SSD1306_DrawPixel+0xb8>)
 800225c:	5cd3      	ldrb	r3, [r2, r3]
 800225e:	b25a      	sxtb	r2, r3
 8002260:	88bb      	ldrh	r3, [r7, #4]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	b25b      	sxtb	r3, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	b25b      	sxtb	r3, r3
 8002272:	4013      	ands	r3, r2
 8002274:	b259      	sxtb	r1, r3
 8002276:	88fa      	ldrh	r2, [r7, #6]
 8002278:	4603      	mov	r3, r0
 800227a:	01db      	lsls	r3, r3, #7
 800227c:	4413      	add	r3, r2
 800227e:	b2c9      	uxtb	r1, r1
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <SSD1306_DrawPixel+0xb8>)
 8002282:	54d1      	strb	r1, [r2, r3]
 8002284:	e000      	b.n	8002288 <SSD1306_DrawPixel+0xac>
		return;
 8002286:	bf00      	nop
	}
}
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	20002cf4 	.word	0x20002cf4
 8002294:	200028f4 	.word	0x200028f4

08002298 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	460a      	mov	r2, r1
 80022a2:	80fb      	strh	r3, [r7, #6]
 80022a4:	4613      	mov	r3, r2
 80022a6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80022a8:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <SSD1306_GotoXY+0x28>)
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <SSD1306_GotoXY+0x28>)
 80022b0:	88bb      	ldrh	r3, [r7, #4]
 80022b2:	8053      	strh	r3, [r2, #2]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20002cf4 	.word	0x20002cf4

080022c4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022d4:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <SSD1306_Putc+0xfc>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
	if (
 80022e0:	2b7f      	cmp	r3, #127	; 0x7f
 80022e2:	dc07      	bgt.n	80022f4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80022e4:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <SSD1306_Putc+0xfc>)
 80022e6:	885b      	ldrh	r3, [r3, #2]
 80022e8:	461a      	mov	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	785b      	ldrb	r3, [r3, #1]
 80022ee:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022f0:	2b3f      	cmp	r3, #63	; 0x3f
 80022f2:	dd01      	ble.n	80022f8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e05e      	b.n	80023b6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e04b      	b.n	8002396 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	3b20      	subs	r3, #32
 8002306:	6839      	ldr	r1, [r7, #0]
 8002308:	7849      	ldrb	r1, [r1, #1]
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4619      	mov	r1, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	440b      	add	r3, r1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	e030      	b.n	8002384 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d010      	beq.n	8002354 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <SSD1306_Putc+0xfc>)
 8002334:	881a      	ldrh	r2, [r3, #0]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	b29b      	uxth	r3, r3
 800233a:	4413      	add	r3, r2
 800233c:	b298      	uxth	r0, r3
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <SSD1306_Putc+0xfc>)
 8002340:	885a      	ldrh	r2, [r3, #2]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	b29b      	uxth	r3, r3
 8002346:	4413      	add	r3, r2
 8002348:	b29b      	uxth	r3, r3
 800234a:	79ba      	ldrb	r2, [r7, #6]
 800234c:	4619      	mov	r1, r3
 800234e:	f7ff ff45 	bl	80021dc <SSD1306_DrawPixel>
 8002352:	e014      	b.n	800237e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002354:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <SSD1306_Putc+0xfc>)
 8002356:	881a      	ldrh	r2, [r3, #0]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	b29b      	uxth	r3, r3
 800235c:	4413      	add	r3, r2
 800235e:	b298      	uxth	r0, r3
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <SSD1306_Putc+0xfc>)
 8002362:	885a      	ldrh	r2, [r3, #2]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	b29b      	uxth	r3, r3
 8002368:	4413      	add	r3, r2
 800236a:	b299      	uxth	r1, r3
 800236c:	79bb      	ldrb	r3, [r7, #6]
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf0c      	ite	eq
 8002372:	2301      	moveq	r3, #1
 8002374:	2300      	movne	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	f7ff ff2f 	bl	80021dc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	3301      	adds	r3, #1
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4293      	cmp	r3, r2
 800238e:	d3c8      	bcc.n	8002322 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3301      	adds	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	785b      	ldrb	r3, [r3, #1]
 800239a:	461a      	mov	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	4293      	cmp	r3, r2
 80023a0:	d3ad      	bcc.n	80022fe <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <SSD1306_Putc+0xfc>)
 80023a4:	881a      	ldrh	r2, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <SSD1306_Putc+0xfc>)
 80023b2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80023b4:	79fb      	ldrb	r3, [r7, #7]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20002cf4 	.word	0x20002cf4

080023c4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	4613      	mov	r3, r2
 80023d0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80023d2:	e012      	b.n	80023fa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	79fa      	ldrb	r2, [r7, #7]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff71 	bl	80022c4 <SSD1306_Putc>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d002      	beq.n	80023f4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	e008      	b.n	8002406 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3301      	adds	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e8      	bne.n	80023d4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	781b      	ldrb	r3, [r3, #0]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002412:	2000      	movs	r0, #0
 8002414:	f7ff feca 	bl	80021ac <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002418:	f7ff fe9a 	bl	8002150 <SSD1306_UpdateScreen>
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}

08002420 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <ssd1306_I2C_Init+0x24>)
 8002428:	607b      	str	r3, [r7, #4]
	while(p>0)
 800242a:	e002      	b.n	8002432 <ssd1306_I2C_Init+0x12>
		p--;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f9      	bne.n	800242c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	0003d090 	.word	0x0003d090

08002448 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b0c7      	sub	sp, #284	; 0x11c
 800244c:	af02      	add	r7, sp, #8
 800244e:	4604      	mov	r4, r0
 8002450:	4608      	mov	r0, r1
 8002452:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002456:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800245a:	600a      	str	r2, [r1, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002462:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002466:	4622      	mov	r2, r4
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800246e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002472:	4602      	mov	r2, r0
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800247a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800247e:	460a      	mov	r2, r1
 8002480:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002482:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800248a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800248e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002496:	2300      	movs	r3, #0
 8002498:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800249c:	e015      	b.n	80024ca <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800249e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024a2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024a6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	441a      	add	r2, r3
 80024ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024b2:	3301      	adds	r3, #1
 80024b4:	7811      	ldrb	r1, [r2, #0]
 80024b6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024ba:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80024be:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80024c0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024c4:	3301      	adds	r3, #1
 80024c6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80024ca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024d4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80024d8:	8812      	ldrh	r2, [r2, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d8df      	bhi.n	800249e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80024de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024e2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b299      	uxth	r1, r3
 80024ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f107 020c 	add.w	r2, r7, #12
 80024fc:	200a      	movs	r0, #10
 80024fe:	9000      	str	r0, [sp, #0]
 8002500:	4803      	ldr	r0, [pc, #12]	; (8002510 <ssd1306_I2C_WriteMulti+0xc8>)
 8002502:	f001 fb7d 	bl	8003c00 <HAL_I2C_Master_Transmit>
}
 8002506:	bf00      	nop
 8002508:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800250c:	46bd      	mov	sp, r7
 800250e:	bd90      	pop	{r4, r7, pc}
 8002510:	20002894 	.word	0x20002894

08002514 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af02      	add	r7, sp, #8
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
 800251e:	460b      	mov	r3, r1
 8002520:	71bb      	strb	r3, [r7, #6]
 8002522:	4613      	mov	r3, r2
 8002524:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800252a:	797b      	ldrb	r3, [r7, #5]
 800252c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	b299      	uxth	r1, r3
 8002532:	f107 020c 	add.w	r2, r7, #12
 8002536:	230a      	movs	r3, #10
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	2302      	movs	r3, #2
 800253c:	4803      	ldr	r0, [pc, #12]	; (800254c <ssd1306_I2C_Write+0x38>)
 800253e:	f001 fb5f 	bl	8003c00 <HAL_I2C_Master_Transmit>
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20002894 	.word	0x20002894

08002550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_MspInit+0x5c>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	4a14      	ldr	r2, [pc, #80]	; (80025ac <HAL_MspInit+0x5c>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6193      	str	r3, [r2, #24]
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_MspInit+0x5c>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_MspInit+0x5c>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <HAL_MspInit+0x5c>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	61d3      	str	r3, [r2, #28]
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_MspInit+0x5c>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_MspInit+0x60>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_MspInit+0x60>)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40010000 	.word	0x40010000

080025b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 0310 	add.w	r3, r7, #16
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a15      	ldr	r2, [pc, #84]	; (8002624 <HAL_I2C_MspInit+0x70>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d123      	bne.n	800261c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <HAL_I2C_MspInit+0x74>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	4a13      	ldr	r2, [pc, #76]	; (8002628 <HAL_I2C_MspInit+0x74>)
 80025da:	f043 0308 	orr.w	r3, r3, #8
 80025de:	6193      	str	r3, [r2, #24]
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_I2C_MspInit+0x74>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025ec:	23c0      	movs	r3, #192	; 0xc0
 80025ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f0:	2312      	movs	r3, #18
 80025f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025f4:	2303      	movs	r3, #3
 80025f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	4619      	mov	r1, r3
 80025fe:	480b      	ldr	r0, [pc, #44]	; (800262c <HAL_I2C_MspInit+0x78>)
 8002600:	f001 f806 	bl	8003610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_I2C_MspInit+0x74>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_I2C_MspInit+0x74>)
 800260a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800260e:	61d3      	str	r3, [r2, #28]
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_I2C_MspInit+0x74>)
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800261c:	bf00      	nop
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40005400 	.word	0x40005400
 8002628:	40021000 	.word	0x40021000
 800262c:	40010c00 	.word	0x40010c00

08002630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <NMI_Handler+0x4>

08002636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <HardFault_Handler+0x4>

0800263c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <MemManage_Handler+0x4>

08002642 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <BusFault_Handler+0x4>

08002648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800264c:	e7fe      	b.n	800264c <UsageFault_Handler+0x4>

0800264e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002666:	b580      	push	{r7, lr}
 8002668:	b08c      	sub	sp, #48	; 0x30
 800266a:	af04      	add	r7, sp, #16
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	4613      	mov	r3, r2
 8002674:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fb4a 	bl	8000d14 <pvPortMalloc>
 8002680:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00e      	beq.n	80026a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002688:	205c      	movs	r0, #92	; 0x5c
 800268a:	f7fe fb43 	bl	8000d14 <pvPortMalloc>
 800268e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
 800269c:	e005      	b.n	80026aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	f7fe fbc6 	bl	8000e30 <vPortFree>
 80026a4:	e001      	b.n	80026aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026b0:	88fa      	ldrh	r2, [r7, #6]
 80026b2:	2300      	movs	r3, #0
 80026b4:	9303      	str	r3, [sp, #12]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	9302      	str	r3, [sp, #8]
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f80e 	bl	80026e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026cc:	69f8      	ldr	r0, [r7, #28]
 80026ce:	f000 f883 	bl	80027d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	e002      	b.n	80026de <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295
 80026dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80026de:	69bb      	ldr	r3, [r7, #24]
	}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	461a      	mov	r2, r3
 8002700:	21a5      	movs	r1, #165	; 0xa5
 8002702:	f002 fb13 	bl	8004d2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002710:	3b01      	subs	r3, #1
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f023 0307 	bic.w	r3, r3, #7
 800271e:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e012      	b.n	800274c <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	4413      	add	r3, r2
 800272c:	7819      	ldrb	r1, [r3, #0]
 800272e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	4413      	add	r3, r2
 8002734:	3334      	adds	r3, #52	; 0x34
 8002736:	460a      	mov	r2, r1
 8002738:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	4413      	add	r3, r2
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d006      	beq.n	8002754 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3301      	adds	r3, #1
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b0f      	cmp	r3, #15
 8002750:	d9e9      	bls.n	8002726 <prvInitialiseNewTask+0x3e>
 8002752:	e000      	b.n	8002756 <prvInitialiseNewTask+0x6e>
		{
			break;
 8002754:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	2b05      	cmp	r3, #5
 8002762:	d901      	bls.n	8002768 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002764:	2305      	movs	r3, #5
 8002766:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	6a3a      	ldr	r2, [r7, #32]
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	2200      	movs	r2, #0
 8002778:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	3304      	adds	r3, #4
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fbd7 	bl	8000f32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	3318      	adds	r3, #24
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fbd2 	bl	8000f32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002792:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	f1c3 0206 	rsb	r2, r3, #6
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	2200      	movs	r2, #0
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	68f9      	ldr	r1, [r7, #12]
 80027b6:	6938      	ldr	r0, [r7, #16]
 80027b8:	f7fe ff18 	bl	80015ec <pxPortInitialiseStack>
 80027bc:	4602      	mov	r2, r0
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80027e0:	f7fe ff80 	bl	80016e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80027e4:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <prvAddNewTaskToReadyList+0xc0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	4a2b      	ldr	r2, [pc, #172]	; (8002898 <prvAddNewTaskToReadyList+0xc0>)
 80027ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80027ee:	4b2b      	ldr	r3, [pc, #172]	; (800289c <prvAddNewTaskToReadyList+0xc4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80027f6:	4a29      	ldr	r2, [pc, #164]	; (800289c <prvAddNewTaskToReadyList+0xc4>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027fc:	4b26      	ldr	r3, [pc, #152]	; (8002898 <prvAddNewTaskToReadyList+0xc0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d110      	bne.n	8002826 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002804:	f000 fba6 	bl	8002f54 <prvInitialiseTaskLists>
 8002808:	e00d      	b.n	8002826 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800280a:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <prvAddNewTaskToReadyList+0xc8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <prvAddNewTaskToReadyList+0xc4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	429a      	cmp	r2, r3
 800281e:	d802      	bhi.n	8002826 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002820:	4a1e      	ldr	r2, [pc, #120]	; (800289c <prvAddNewTaskToReadyList+0xc4>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002826:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <prvAddNewTaskToReadyList+0xcc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <prvAddNewTaskToReadyList+0xcc>)
 800282e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002830:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <prvAddNewTaskToReadyList+0xcc>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	2201      	movs	r2, #1
 800283e:	409a      	lsls	r2, r3
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <prvAddNewTaskToReadyList+0xd0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4313      	orrs	r3, r2
 8002846:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <prvAddNewTaskToReadyList+0xd0>)
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <prvAddNewTaskToReadyList+0xd4>)
 8002858:	441a      	add	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3304      	adds	r3, #4
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f7fe fb72 	bl	8000f4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002866:	f7fe ff57 	bl	8001718 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <prvAddNewTaskToReadyList+0xc8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00e      	beq.n	8002890 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <prvAddNewTaskToReadyList+0xc4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	429a      	cmp	r2, r3
 800287e:	d207      	bcs.n	8002890 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <prvAddNewTaskToReadyList+0xd8>)
 8002882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20002de8 	.word	0x20002de8
 800289c:	20002cfc 	.word	0x20002cfc
 80028a0:	20002df4 	.word	0x20002df4
 80028a4:	20002e04 	.word	0x20002e04
 80028a8:	20002df0 	.word	0x20002df0
 80028ac:	20002d00 	.word	0x20002d00
 80028b0:	e000ed04 	.word	0xe000ed04

080028b4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80028bc:	f7fe ff12 	bl	80016e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <vTaskDelete+0x18>
 80028c6:	4b31      	ldr	r3, [pc, #196]	; (800298c <vTaskDelete+0xd8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	e000      	b.n	80028ce <vTaskDelete+0x1a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fb93 	bl	8001000 <uxListRemove>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d115      	bne.n	800290c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e4:	492a      	ldr	r1, [pc, #168]	; (8002990 <vTaskDelete+0xdc>)
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <vTaskDelete+0x58>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	2201      	movs	r2, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43da      	mvns	r2, r3
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <vTaskDelete+0xe0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4013      	ands	r3, r2
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <vTaskDelete+0xe0>)
 800290a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3318      	adds	r3, #24
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe fb71 	bl	8001000 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <vTaskDelete+0xe4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3301      	adds	r3, #1
 8002924:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <vTaskDelete+0xe4>)
 8002926:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002928:	4b18      	ldr	r3, [pc, #96]	; (800298c <vTaskDelete+0xd8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	429a      	cmp	r2, r3
 8002930:	d10b      	bne.n	800294a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3304      	adds	r3, #4
 8002936:	4619      	mov	r1, r3
 8002938:	4818      	ldr	r0, [pc, #96]	; (800299c <vTaskDelete+0xe8>)
 800293a:	f7fe fb06 	bl	8000f4a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <vTaskDelete+0xec>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <vTaskDelete+0xec>)
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	e009      	b.n	800295e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800294a:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <vTaskDelete+0xf0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3b01      	subs	r3, #1
 8002950:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <vTaskDelete+0xf0>)
 8002952:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fb79 	bl	800304c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800295a:	f000 fb87 	bl	800306c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800295e:	f7fe fedb 	bl	8001718 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <vTaskDelete+0xf4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00c      	beq.n	8002984 <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <vTaskDelete+0xd8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	429a      	cmp	r2, r3
 8002972:	d107      	bne.n	8002984 <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8002974:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <vTaskDelete+0xf8>)
 8002976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20002cfc 	.word	0x20002cfc
 8002990:	20002d00 	.word	0x20002d00
 8002994:	20002df0 	.word	0x20002df0
 8002998:	20002e04 	.word	0x20002e04
 800299c:	20002dbc 	.word	0x20002dbc
 80029a0:	20002dd0 	.word	0x20002dd0
 80029a4:	20002de8 	.word	0x20002de8
 80029a8:	20002df4 	.word	0x20002df4
 80029ac:	e000ed04 	.word	0xe000ed04

080029b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 80029c2:	f000 f851 	bl	8002a68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029c6:	2100      	movs	r1, #0
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fc61 	bl	8003290 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80029ce:	f000 f859 	bl	8002a84 <xTaskResumeAll>
 80029d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d107      	bne.n	80029ea <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <vTaskDelay+0x44>)
 80029dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	f3bf 8f4f 	dsb	sy
 80029e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	e000ed04 	.word	0xe000ed04

080029f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80029fe:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <vTaskStartScheduler+0x58>)
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	2300      	movs	r3, #0
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	2300      	movs	r3, #0
 8002a08:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a0c:	4911      	ldr	r1, [pc, #68]	; (8002a54 <vTaskStartScheduler+0x5c>)
 8002a0e:	4812      	ldr	r0, [pc, #72]	; (8002a58 <vTaskStartScheduler+0x60>)
 8002a10:	f7ff fe29 	bl	8002666 <xTaskCreate>
 8002a14:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d115      	bne.n	8002a48 <vTaskStartScheduler+0x50>
	__asm volatile
 8002a1c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	603b      	str	r3, [r7, #0]
}
 8002a2e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <vTaskStartScheduler+0x64>)
 8002a32:	f04f 32ff 	mov.w	r2, #4294967295
 8002a36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <vTaskStartScheduler+0x68>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <vTaskStartScheduler+0x6c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a44:	f7fe fe30 	bl	80016a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20002e0c 	.word	0x20002e0c
 8002a54:	08004e68 	.word	0x08004e68
 8002a58:	08002f25 	.word	0x08002f25
 8002a5c:	20002e08 	.word	0x20002e08
 8002a60:	20002df4 	.word	0x20002df4
 8002a64:	20002dec 	.word	0x20002dec

08002a68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <vTaskSuspendAll+0x18>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	4a03      	ldr	r2, [pc, #12]	; (8002a80 <vTaskSuspendAll+0x18>)
 8002a74:	6013      	str	r3, [r2, #0]
}
 8002a76:	bf00      	nop
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20002e10 	.word	0x20002e10

08002a84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a92:	f7fe fe27 	bl	80016e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a96:	4b39      	ldr	r3, [pc, #228]	; (8002b7c <xTaskResumeAll+0xf8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	4a37      	ldr	r2, [pc, #220]	; (8002b7c <xTaskResumeAll+0xf8>)
 8002a9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aa0:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <xTaskResumeAll+0xf8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d161      	bne.n	8002b6c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002aa8:	4b35      	ldr	r3, [pc, #212]	; (8002b80 <xTaskResumeAll+0xfc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d05d      	beq.n	8002b6c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ab0:	e02e      	b.n	8002b10 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002ab2:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <xTaskResumeAll+0x100>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3318      	adds	r3, #24
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fa9e 	bl	8001000 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe fa99 	bl	8001000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <xTaskResumeAll+0x104>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <xTaskResumeAll+0x104>)
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4a27      	ldr	r2, [pc, #156]	; (8002b8c <xTaskResumeAll+0x108>)
 8002aee:	441a      	add	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3304      	adds	r3, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4610      	mov	r0, r2
 8002af8:	f7fe fa27 	bl	8000f4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b00:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <xTaskResumeAll+0x10c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d302      	bcc.n	8002b10 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 8002b0a:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <xTaskResumeAll+0x110>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b10:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <xTaskResumeAll+0x100>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1cc      	bne.n	8002ab2 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b1e:	f000 faa5 	bl	800306c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <xTaskResumeAll+0x114>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d010      	beq.n	8002b50 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b2e:	f000 f837 	bl	8002ba0 <xTaskIncrementTick>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <xTaskResumeAll+0x110>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f1      	bne.n	8002b2e <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <xTaskResumeAll+0x114>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b50:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <xTaskResumeAll+0x110>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d009      	beq.n	8002b6c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <xTaskResumeAll+0x118>)
 8002b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b6c:	f7fe fdd4 	bl	8001718 <vPortExitCritical>

	return xAlreadyYielded;
 8002b70:	68bb      	ldr	r3, [r7, #8]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20002e10 	.word	0x20002e10
 8002b80:	20002de8 	.word	0x20002de8
 8002b84:	20002da8 	.word	0x20002da8
 8002b88:	20002df0 	.word	0x20002df0
 8002b8c:	20002d00 	.word	0x20002d00
 8002b90:	20002cfc 	.word	0x20002cfc
 8002b94:	20002dfc 	.word	0x20002dfc
 8002b98:	20002df8 	.word	0x20002df8
 8002b9c:	e000ed04 	.word	0xe000ed04

08002ba0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002baa:	4b48      	ldr	r3, [pc, #288]	; (8002ccc <xTaskIncrementTick+0x12c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d17c      	bne.n	8002cac <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8002bb2:	4b47      	ldr	r3, [pc, #284]	; (8002cd0 <xTaskIncrementTick+0x130>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002bba:	4a45      	ldr	r2, [pc, #276]	; (8002cd0 <xTaskIncrementTick+0x130>)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d110      	bne.n	8002be8 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8002bc6:	4b43      	ldr	r3, [pc, #268]	; (8002cd4 <xTaskIncrementTick+0x134>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	4b42      	ldr	r3, [pc, #264]	; (8002cd8 <xTaskIncrementTick+0x138>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a40      	ldr	r2, [pc, #256]	; (8002cd4 <xTaskIncrementTick+0x134>)
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4a40      	ldr	r2, [pc, #256]	; (8002cd8 <xTaskIncrementTick+0x138>)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <xTaskIncrementTick+0x13c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	4a3e      	ldr	r2, [pc, #248]	; (8002cdc <xTaskIncrementTick+0x13c>)
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	f000 fa42 	bl	800306c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002be8:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <xTaskIncrementTick+0x140>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d34d      	bcc.n	8002c8e <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bf2:	4b38      	ldr	r3, [pc, #224]	; (8002cd4 <xTaskIncrementTick+0x134>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <xTaskIncrementTick+0x60>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <xTaskIncrementTick+0x62>
 8002c00:	2300      	movs	r3, #0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c06:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <xTaskIncrementTick+0x140>)
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0c:	601a      	str	r2, [r3, #0]
					break;
 8002c0e:	e03e      	b.n	8002c8e <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c10:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <xTaskIncrementTick+0x134>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d203      	bcs.n	8002c30 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c28:	4a2d      	ldr	r2, [pc, #180]	; (8002ce0 <xTaskIncrementTick+0x140>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6013      	str	r3, [r2, #0]
						break;
 8002c2e:	e02e      	b.n	8002c8e <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe f9e3 	bl	8001000 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d004      	beq.n	8002c4c <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3318      	adds	r3, #24
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe f9da 	bl	8001000 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	2201      	movs	r2, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	4b23      	ldr	r3, [pc, #140]	; (8002ce4 <xTaskIncrementTick+0x144>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	4a22      	ldr	r2, [pc, #136]	; (8002ce4 <xTaskIncrementTick+0x144>)
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ce8 <xTaskIncrementTick+0x148>)
 8002c6c:	441a      	add	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3304      	adds	r3, #4
 8002c72:	4619      	mov	r1, r3
 8002c74:	4610      	mov	r0, r2
 8002c76:	f7fe f968 	bl	8000f4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <xTaskIncrementTick+0x14c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d3b4      	bcc.n	8002bf2 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c8c:	e7b1      	b.n	8002bf2 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c8e:	4b17      	ldr	r3, [pc, #92]	; (8002cec <xTaskIncrementTick+0x14c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c94:	4914      	ldr	r1, [pc, #80]	; (8002ce8 <xTaskIncrementTick+0x148>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d907      	bls.n	8002cb6 <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	e004      	b.n	8002cb6 <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <xTaskIncrementTick+0x150>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <xTaskIncrementTick+0x150>)
 8002cb4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <xTaskIncrementTick+0x154>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002cc2:	697b      	ldr	r3, [r7, #20]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20002e10 	.word	0x20002e10
 8002cd0:	20002dec 	.word	0x20002dec
 8002cd4:	20002da0 	.word	0x20002da0
 8002cd8:	20002da4 	.word	0x20002da4
 8002cdc:	20002e00 	.word	0x20002e00
 8002ce0:	20002e08 	.word	0x20002e08
 8002ce4:	20002df0 	.word	0x20002df0
 8002ce8:	20002d00 	.word	0x20002d00
 8002cec:	20002cfc 	.word	0x20002cfc
 8002cf0:	20002df8 	.word	0x20002df8
 8002cf4:	20002dfc 	.word	0x20002dfc

08002cf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <vTaskSwitchContext+0x78>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d06:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <vTaskSwitchContext+0x7c>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d0c:	e02a      	b.n	8002d64 <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8002d0e:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <vTaskSwitchContext+0x7c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <vTaskSwitchContext+0x80>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	fab3 f383 	clz	r3, r3
 8002d20:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f1c3 031f 	rsb	r3, r3, #31
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <vTaskSwitchContext+0x84>)
 8002d36:	4413      	add	r3, r2
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	3308      	adds	r3, #8
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d104      	bne.n	8002d5a <vTaskSwitchContext+0x62>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <vTaskSwitchContext+0x88>)
 8002d62:	6013      	str	r3, [r2, #0]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20002e10 	.word	0x20002e10
 8002d74:	20002dfc 	.word	0x20002dfc
 8002d78:	20002df0 	.word	0x20002df0
 8002d7c:	20002d00 	.word	0x20002d00
 8002d80:	20002cfc 	.word	0x20002cfc

08002d84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <vTaskPlaceOnEventList+0x28>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3318      	adds	r3, #24
 8002d94:	4619      	mov	r1, r3
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fe f8fa 	bl	8000f90 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	6838      	ldr	r0, [r7, #0]
 8002da0:	f000 fa76 	bl	8003290 <prvAddCurrentTaskToDelayedList>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20002cfc 	.word	0x20002cfc

08002db0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	3318      	adds	r3, #24
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe f91b 	bl	8001000 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <xTaskRemoveFromEventList+0x90>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11c      	bne.n	8002e0c <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe f912 	bl	8001000 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	2201      	movs	r2, #1
 8002de2:	409a      	lsls	r2, r3
 8002de4:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <xTaskRemoveFromEventList+0x94>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	4a16      	ldr	r2, [pc, #88]	; (8002e44 <xTaskRemoveFromEventList+0x94>)
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <xTaskRemoveFromEventList+0x98>)
 8002dfc:	441a      	add	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	3304      	adds	r3, #4
 8002e02:	4619      	mov	r1, r3
 8002e04:	4610      	mov	r0, r2
 8002e06:	f7fe f8a0 	bl	8000f4a <vListInsertEnd>
 8002e0a:	e005      	b.n	8002e18 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	3318      	adds	r3, #24
 8002e10:	4619      	mov	r1, r3
 8002e12:	480e      	ldr	r0, [pc, #56]	; (8002e4c <xTaskRemoveFromEventList+0x9c>)
 8002e14:	f7fe f899 	bl	8000f4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <xTaskRemoveFromEventList+0xa0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d905      	bls.n	8002e32 <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002e26:	2301      	movs	r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <xTaskRemoveFromEventList+0xa4>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e001      	b.n	8002e36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002e36:	68fb      	ldr	r3, [r7, #12]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20002e10 	.word	0x20002e10
 8002e44:	20002df0 	.word	0x20002df0
 8002e48:	20002d00 	.word	0x20002d00
 8002e4c:	20002da8 	.word	0x20002da8
 8002e50:	20002cfc 	.word	0x20002cfc
 8002e54:	20002dfc 	.word	0x20002dfc

08002e58 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <vTaskSetTimeOutState+0x24>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <vTaskSetTimeOutState+0x28>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	605a      	str	r2, [r3, #4]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20002e00 	.word	0x20002e00
 8002e80:	20002dec 	.word	0x20002dec

08002e84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8002e8e:	f7fe fc29 	bl	80016e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002e92:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <xTaskCheckForTimeOut+0x80>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d102      	bne.n	8002ea8 <xTaskCheckForTimeOut+0x24>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	e026      	b.n	8002ef6 <xTaskCheckForTimeOut+0x72>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <xTaskCheckForTimeOut+0x84>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d007      	beq.n	8002ec4 <xTaskCheckForTimeOut+0x40>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <xTaskCheckForTimeOut+0x40>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	e018      	b.n	8002ef6 <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	1ad2      	subs	r2, r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d20e      	bcs.n	8002ef2 <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	1acb      	subs	r3, r1, r3
 8002ee0:	441a      	add	r2, r3
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff ffb6 	bl	8002e58 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e001      	b.n	8002ef6 <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ef6:	f7fe fc0f 	bl	8001718 <vPortExitCritical>

	return xReturn;
 8002efa:	68fb      	ldr	r3, [r7, #12]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20002dec 	.word	0x20002dec
 8002f08:	20002e00 	.word	0x20002e00

08002f0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <vTaskMissedYield+0x14>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
}
 8002f16:	bf00      	nop
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20002dfc 	.word	0x20002dfc

08002f24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f2c:	f000 f852 	bl	8002fd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <prvIdleTask+0x28>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d9f9      	bls.n	8002f2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <prvIdleTask+0x2c>)
 8002f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f48:	e7f0      	b.n	8002f2c <prvIdleTask+0x8>
 8002f4a:	bf00      	nop
 8002f4c:	20002d00 	.word	0x20002d00
 8002f50:	e000ed04 	.word	0xe000ed04

08002f54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	e00c      	b.n	8002f7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <prvInitialiseTaskLists+0x60>)
 8002f6c:	4413      	add	r3, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd ffc0 	bl	8000ef4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3301      	adds	r3, #1
 8002f78:	607b      	str	r3, [r7, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b05      	cmp	r3, #5
 8002f7e:	d9ef      	bls.n	8002f60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f80:	480d      	ldr	r0, [pc, #52]	; (8002fb8 <prvInitialiseTaskLists+0x64>)
 8002f82:	f7fd ffb7 	bl	8000ef4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f86:	480d      	ldr	r0, [pc, #52]	; (8002fbc <prvInitialiseTaskLists+0x68>)
 8002f88:	f7fd ffb4 	bl	8000ef4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f8c:	480c      	ldr	r0, [pc, #48]	; (8002fc0 <prvInitialiseTaskLists+0x6c>)
 8002f8e:	f7fd ffb1 	bl	8000ef4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f92:	480c      	ldr	r0, [pc, #48]	; (8002fc4 <prvInitialiseTaskLists+0x70>)
 8002f94:	f7fd ffae 	bl	8000ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f98:	480b      	ldr	r0, [pc, #44]	; (8002fc8 <prvInitialiseTaskLists+0x74>)
 8002f9a:	f7fd ffab 	bl	8000ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <prvInitialiseTaskLists+0x78>)
 8002fa0:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <prvInitialiseTaskLists+0x64>)
 8002fa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <prvInitialiseTaskLists+0x7c>)
 8002fa6:	4a05      	ldr	r2, [pc, #20]	; (8002fbc <prvInitialiseTaskLists+0x68>)
 8002fa8:	601a      	str	r2, [r3, #0]
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20002d00 	.word	0x20002d00
 8002fb8:	20002d78 	.word	0x20002d78
 8002fbc:	20002d8c 	.word	0x20002d8c
 8002fc0:	20002da8 	.word	0x20002da8
 8002fc4:	20002dbc 	.word	0x20002dbc
 8002fc8:	20002dd4 	.word	0x20002dd4
 8002fcc:	20002da0 	.word	0x20002da0
 8002fd0:	20002da4 	.word	0x20002da4

08002fd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fda:	e028      	b.n	800302e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002fdc:	f7ff fd44 	bl	8002a68 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <prvCheckTasksWaitingTermination+0x6c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002ff0:	f7ff fd48 	bl	8002a84 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d119      	bne.n	800302e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002ffa:	f7fe fb73 	bl	80016e4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <prvCheckTasksWaitingTermination+0x6c>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	3304      	adds	r3, #4
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fff8 	bl	8001000 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <prvCheckTasksWaitingTermination+0x70>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3b01      	subs	r3, #1
 8003016:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <prvCheckTasksWaitingTermination+0x70>)
 8003018:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <prvCheckTasksWaitingTermination+0x74>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3b01      	subs	r3, #1
 8003020:	4a09      	ldr	r2, [pc, #36]	; (8003048 <prvCheckTasksWaitingTermination+0x74>)
 8003022:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8003024:	f7fe fb78 	bl	8001718 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8003028:	6838      	ldr	r0, [r7, #0]
 800302a:	f000 f80f 	bl	800304c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <prvCheckTasksWaitingTermination+0x74>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1d2      	bne.n	8002fdc <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20002dbc 	.word	0x20002dbc
 8003044:	20002de8 	.word	0x20002de8
 8003048:	20002dd0 	.word	0x20002dd0

0800304c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd fee9 	bl	8000e30 <vPortFree>
			vPortFree( pxTCB );
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fd fee6 	bl	8000e30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <prvResetNextTaskUnblockTime+0x40>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <prvResetNextTaskUnblockTime+0x14>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <prvResetNextTaskUnblockTime+0x16>
 8003080:	2300      	movs	r3, #0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d004      	beq.n	8003090 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <prvResetNextTaskUnblockTime+0x44>)
 8003088:	f04f 32ff 	mov.w	r2, #4294967295
 800308c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800308e:	e008      	b.n	80030a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <prvResetNextTaskUnblockTime+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <prvResetNextTaskUnblockTime+0x44>)
 80030a0:	6013      	str	r3, [r2, #0]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	20002da0 	.word	0x20002da0
 80030b0:	20002e08 	.word	0x20002e08

080030b4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d062      	beq.n	800318c <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ca:	4b32      	ldr	r3, [pc, #200]	; (8003194 <vTaskPriorityInherit+0xe0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d25b      	bcs.n	800318c <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	db06      	blt.n	80030ea <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030dc:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <vTaskPriorityInherit+0xe0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	f1c3 0206 	rsb	r2, r3, #6
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6959      	ldr	r1, [r3, #20]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4a27      	ldr	r2, [pc, #156]	; (8003198 <vTaskPriorityInherit+0xe4>)
 80030fc:	4413      	add	r3, r2
 80030fe:	4299      	cmp	r1, r3
 8003100:	d101      	bne.n	8003106 <vTaskPriorityInherit+0x52>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <vTaskPriorityInherit+0x54>
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d03a      	beq.n	8003182 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3304      	adds	r3, #4
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd ff75 	bl	8001000 <uxListRemove>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d115      	bne.n	8003148 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	491d      	ldr	r1, [pc, #116]	; (8003198 <vTaskPriorityInherit+0xe4>)
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <vTaskPriorityInherit+0x94>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	2201      	movs	r2, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43da      	mvns	r2, r3
 800313e:	4b17      	ldr	r3, [pc, #92]	; (800319c <vTaskPriorityInherit+0xe8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4013      	ands	r3, r2
 8003144:	4a15      	ldr	r2, [pc, #84]	; (800319c <vTaskPriorityInherit+0xe8>)
 8003146:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003148:	4b12      	ldr	r3, [pc, #72]	; (8003194 <vTaskPriorityInherit+0xe0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	2201      	movs	r2, #1
 8003158:	409a      	lsls	r2, r3
 800315a:	4b10      	ldr	r3, [pc, #64]	; (800319c <vTaskPriorityInherit+0xe8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	4a0e      	ldr	r2, [pc, #56]	; (800319c <vTaskPriorityInherit+0xe8>)
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4a09      	ldr	r2, [pc, #36]	; (8003198 <vTaskPriorityInherit+0xe4>)
 8003172:	441a      	add	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f7fd fee5 	bl	8000f4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003180:	e004      	b.n	800318c <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003182:	4b04      	ldr	r3, [pc, #16]	; (8003194 <vTaskPriorityInherit+0xe0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20002cfc 	.word	0x20002cfc
 8003198:	20002d00 	.word	0x20002d00
 800319c:	20002df0 	.word	0x20002df0

080031a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d04f      	beq.n	8003256 <xTaskPriorityDisinherit+0xb6>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ba:	1e5a      	subs	r2, r3, #1
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d044      	beq.n	8003256 <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d140      	bne.n	8003256 <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	3304      	adds	r3, #4
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd ff11 	bl	8001000 <uxListRemove>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d115      	bne.n	8003210 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e8:	491d      	ldr	r1, [pc, #116]	; (8003260 <xTaskPriorityDisinherit+0xc0>)
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <xTaskPriorityDisinherit+0x70>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	2201      	movs	r2, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43da      	mvns	r2, r3
 8003206:	4b17      	ldr	r3, [pc, #92]	; (8003264 <xTaskPriorityDisinherit+0xc4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4013      	ands	r3, r2
 800320c:	4a15      	ldr	r2, [pc, #84]	; (8003264 <xTaskPriorityDisinherit+0xc4>)
 800320e:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	f1c3 0206 	rsb	r2, r3, #6
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	2201      	movs	r2, #1
 800322a:	409a      	lsls	r2, r3
 800322c:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <xTaskPriorityDisinherit+0xc4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4313      	orrs	r3, r2
 8003232:	4a0c      	ldr	r2, [pc, #48]	; (8003264 <xTaskPriorityDisinherit+0xc4>)
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4a07      	ldr	r2, [pc, #28]	; (8003260 <xTaskPriorityDisinherit+0xc0>)
 8003244:	441a      	add	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	3304      	adds	r3, #4
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f7fd fe7c 	bl	8000f4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003252:	2301      	movs	r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003256:	68fb      	ldr	r3, [r7, #12]
	}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20002d00 	.word	0x20002d00
 8003264:	20002df0 	.word	0x20002df0

08003268 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <pvTaskIncrementMutexHeldCount+0x24>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d004      	beq.n	800327e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <pvTaskIncrementMutexHeldCount+0x24>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800327a:	3201      	adds	r2, #1
 800327c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800327e:	4b03      	ldr	r3, [pc, #12]	; (800328c <pvTaskIncrementMutexHeldCount+0x24>)
 8003280:	681b      	ldr	r3, [r3, #0]
	}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20002cfc 	.word	0x20002cfc

08003290 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800329a:	4b29      	ldr	r3, [pc, #164]	; (8003340 <prvAddCurrentTaskToDelayedList+0xb0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032a0:	4b28      	ldr	r3, [pc, #160]	; (8003344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3304      	adds	r3, #4
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fd feaa 	bl	8001000 <uxListRemove>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10b      	bne.n	80032ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80032b2:	4b24      	ldr	r3, [pc, #144]	; (8003344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	2201      	movs	r2, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	4b21      	ldr	r3, [pc, #132]	; (8003348 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4013      	ands	r3, r2
 80032c6:	4a20      	ldr	r2, [pc, #128]	; (8003348 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d10a      	bne.n	80032e8 <prvAddCurrentTaskToDelayedList+0x58>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032d8:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3304      	adds	r3, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	481a      	ldr	r0, [pc, #104]	; (800334c <prvAddCurrentTaskToDelayedList+0xbc>)
 80032e2:	f7fd fe32 	bl	8000f4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032e6:	e026      	b.n	8003336 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4413      	add	r3, r2
 80032ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032f0:	4b14      	ldr	r3, [pc, #80]	; (8003344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d209      	bcs.n	8003314 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003300:	4b13      	ldr	r3, [pc, #76]	; (8003350 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3304      	adds	r3, #4
 800330a:	4619      	mov	r1, r3
 800330c:	4610      	mov	r0, r2
 800330e:	f7fd fe3f 	bl	8000f90 <vListInsert>
}
 8003312:	e010      	b.n	8003336 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <prvAddCurrentTaskToDelayedList+0xb4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3304      	adds	r3, #4
 800331e:	4619      	mov	r1, r3
 8003320:	4610      	mov	r0, r2
 8003322:	f7fd fe35 	bl	8000f90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003326:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	429a      	cmp	r2, r3
 800332e:	d202      	bcs.n	8003336 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003330:	4a09      	ldr	r2, [pc, #36]	; (8003358 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	6013      	str	r3, [r2, #0]
}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20002dec 	.word	0x20002dec
 8003344:	20002cfc 	.word	0x20002cfc
 8003348:	20002df0 	.word	0x20002df0
 800334c:	20002dd4 	.word	0x20002dd4
 8003350:	20002da4 	.word	0x20002da4
 8003354:	20002da0 	.word	0x20002da0
 8003358:	20002e08 	.word	0x20002e08

0800335c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800335c:	480c      	ldr	r0, [pc, #48]	; (8003390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800335e:	490d      	ldr	r1, [pc, #52]	; (8003394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003360:	4a0d      	ldr	r2, [pc, #52]	; (8003398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003364:	e002      	b.n	800336c <LoopCopyDataInit>

08003366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800336a:	3304      	adds	r3, #4

0800336c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800336c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800336e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003370:	d3f9      	bcc.n	8003366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003374:	4c0a      	ldr	r4, [pc, #40]	; (80033a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003378:	e001      	b.n	800337e <LoopFillZerobss>

0800337a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800337a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800337c:	3204      	adds	r2, #4

0800337e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800337e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003380:	d3fb      	bcc.n	800337a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003382:	f7ff f96a 	bl	800265a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003386:	f001 fcd9 	bl	8004d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800338a:	f7fd fe63 	bl	8001054 <main>
  bx lr
 800338e:	4770      	bx	lr
  ldr r0, =_sdata
 8003390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003394:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8003398:	08005c24 	.word	0x08005c24
  ldr r2, =_sbss
 800339c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80033a0:	20002e18 	.word	0x20002e18

080033a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033a4:	e7fe      	b.n	80033a4 <ADC1_2_IRQHandler>
	...

080033a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_Init+0x28>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a07      	ldr	r2, [pc, #28]	; (80033d0 <HAL_Init+0x28>)
 80033b2:	f043 0310 	orr.w	r3, r3, #16
 80033b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b8:	2003      	movs	r0, #3
 80033ba:	f000 f8f5 	bl	80035a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033be:	200f      	movs	r0, #15
 80033c0:	f000 f808 	bl	80033d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033c4:	f7ff f8c4 	bl	8002550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40022000 	.word	0x40022000

080033d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_InitTick+0x54>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_InitTick+0x58>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	4619      	mov	r1, r3
 80033e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f8ff 	bl	80035f6 <HAL_SYSTICK_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e00e      	b.n	8003420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b0f      	cmp	r3, #15
 8003406:	d80a      	bhi.n	800341e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003408:	2200      	movs	r2, #0
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	f04f 30ff 	mov.w	r0, #4294967295
 8003410:	f000 f8d5 	bl	80035be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003414:	4a06      	ldr	r2, [pc, #24]	; (8003430 <HAL_InitTick+0x5c>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e000      	b.n	8003420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	2000004c 	.word	0x2000004c
 800342c:	20000054 	.word	0x20000054
 8003430:	20000050 	.word	0x20000050

08003434 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return uwTick;
 8003438:	4b02      	ldr	r3, [pc, #8]	; (8003444 <HAL_GetTick+0x10>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	20002e14 	.word	0x20002e14

08003448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <__NVIC_SetPriorityGrouping+0x44>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003464:	4013      	ands	r3, r2
 8003466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800347a:	4a04      	ldr	r2, [pc, #16]	; (800348c <__NVIC_SetPriorityGrouping+0x44>)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	60d3      	str	r3, [r2, #12]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	0a1b      	lsrs	r3, r3, #8
 800349a:	f003 0307 	and.w	r3, r3, #7
}
 800349e:	4618      	mov	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	6039      	str	r1, [r7, #0]
 80034b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	db0a      	blt.n	80034d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	490c      	ldr	r1, [pc, #48]	; (80034f8 <__NVIC_SetPriority+0x4c>)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	0112      	lsls	r2, r2, #4
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	440b      	add	r3, r1
 80034d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034d4:	e00a      	b.n	80034ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	4908      	ldr	r1, [pc, #32]	; (80034fc <__NVIC_SetPriority+0x50>)
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	3b04      	subs	r3, #4
 80034e4:	0112      	lsls	r2, r2, #4
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	440b      	add	r3, r1
 80034ea:	761a      	strb	r2, [r3, #24]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000e100 	.word	0xe000e100
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003500:	b480      	push	{r7}
 8003502:	b089      	sub	sp, #36	; 0x24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f1c3 0307 	rsb	r3, r3, #7
 800351a:	2b04      	cmp	r3, #4
 800351c:	bf28      	it	cs
 800351e:	2304      	movcs	r3, #4
 8003520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3304      	adds	r3, #4
 8003526:	2b06      	cmp	r3, #6
 8003528:	d902      	bls.n	8003530 <NVIC_EncodePriority+0x30>
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3b03      	subs	r3, #3
 800352e:	e000      	b.n	8003532 <NVIC_EncodePriority+0x32>
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003534:	f04f 32ff 	mov.w	r2, #4294967295
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43da      	mvns	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	401a      	ands	r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003548:	f04f 31ff 	mov.w	r1, #4294967295
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	fa01 f303 	lsl.w	r3, r1, r3
 8003552:	43d9      	mvns	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003558:	4313      	orrs	r3, r2
         );
}
 800355a:	4618      	mov	r0, r3
 800355c:	3724      	adds	r7, #36	; 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3b01      	subs	r3, #1
 8003570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003574:	d301      	bcc.n	800357a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003576:	2301      	movs	r3, #1
 8003578:	e00f      	b.n	800359a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800357a:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <SysTick_Config+0x40>)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003582:	210f      	movs	r1, #15
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	f7ff ff90 	bl	80034ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <SysTick_Config+0x40>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <SysTick_Config+0x40>)
 8003594:	2207      	movs	r2, #7
 8003596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	e000e010 	.word	0xe000e010

080035a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff ff49 	bl	8003448 <__NVIC_SetPriorityGrouping>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035be:	b580      	push	{r7, lr}
 80035c0:	b086      	sub	sp, #24
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4603      	mov	r3, r0
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035d0:	f7ff ff5e 	bl	8003490 <__NVIC_GetPriorityGrouping>
 80035d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	6978      	ldr	r0, [r7, #20]
 80035dc:	f7ff ff90 	bl	8003500 <NVIC_EncodePriority>
 80035e0:	4602      	mov	r2, r0
 80035e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff5f 	bl	80034ac <__NVIC_SetPriority>
}
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ffb0 	bl	8003564 <SysTick_Config>
 8003604:	4603      	mov	r3, r0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003610:	b480      	push	{r7}
 8003612:	b08b      	sub	sp, #44	; 0x2c
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800361e:	2300      	movs	r3, #0
 8003620:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003622:	e169      	b.n	80038f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003624:	2201      	movs	r2, #1
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	429a      	cmp	r2, r3
 800363e:	f040 8158 	bne.w	80038f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4a9a      	ldr	r2, [pc, #616]	; (80038b0 <HAL_GPIO_Init+0x2a0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d05e      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 800364c:	4a98      	ldr	r2, [pc, #608]	; (80038b0 <HAL_GPIO_Init+0x2a0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d875      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 8003652:	4a98      	ldr	r2, [pc, #608]	; (80038b4 <HAL_GPIO_Init+0x2a4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d058      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 8003658:	4a96      	ldr	r2, [pc, #600]	; (80038b4 <HAL_GPIO_Init+0x2a4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d86f      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 800365e:	4a96      	ldr	r2, [pc, #600]	; (80038b8 <HAL_GPIO_Init+0x2a8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d052      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 8003664:	4a94      	ldr	r2, [pc, #592]	; (80038b8 <HAL_GPIO_Init+0x2a8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d869      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 800366a:	4a94      	ldr	r2, [pc, #592]	; (80038bc <HAL_GPIO_Init+0x2ac>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d04c      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 8003670:	4a92      	ldr	r2, [pc, #584]	; (80038bc <HAL_GPIO_Init+0x2ac>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d863      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 8003676:	4a92      	ldr	r2, [pc, #584]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d046      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 800367c:	4a90      	ldr	r2, [pc, #576]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d85d      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 8003682:	2b12      	cmp	r3, #18
 8003684:	d82a      	bhi.n	80036dc <HAL_GPIO_Init+0xcc>
 8003686:	2b12      	cmp	r3, #18
 8003688:	d859      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 800368a:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <HAL_GPIO_Init+0x80>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	0800370b 	.word	0x0800370b
 8003694:	080036e5 	.word	0x080036e5
 8003698:	080036f7 	.word	0x080036f7
 800369c:	08003739 	.word	0x08003739
 80036a0:	0800373f 	.word	0x0800373f
 80036a4:	0800373f 	.word	0x0800373f
 80036a8:	0800373f 	.word	0x0800373f
 80036ac:	0800373f 	.word	0x0800373f
 80036b0:	0800373f 	.word	0x0800373f
 80036b4:	0800373f 	.word	0x0800373f
 80036b8:	0800373f 	.word	0x0800373f
 80036bc:	0800373f 	.word	0x0800373f
 80036c0:	0800373f 	.word	0x0800373f
 80036c4:	0800373f 	.word	0x0800373f
 80036c8:	0800373f 	.word	0x0800373f
 80036cc:	0800373f 	.word	0x0800373f
 80036d0:	0800373f 	.word	0x0800373f
 80036d4:	080036ed 	.word	0x080036ed
 80036d8:	08003701 	.word	0x08003701
 80036dc:	4a79      	ldr	r2, [pc, #484]	; (80038c4 <HAL_GPIO_Init+0x2b4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036e2:	e02c      	b.n	800373e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	623b      	str	r3, [r7, #32]
          break;
 80036ea:	e029      	b.n	8003740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	3304      	adds	r3, #4
 80036f2:	623b      	str	r3, [r7, #32]
          break;
 80036f4:	e024      	b.n	8003740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	3308      	adds	r3, #8
 80036fc:	623b      	str	r3, [r7, #32]
          break;
 80036fe:	e01f      	b.n	8003740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	330c      	adds	r3, #12
 8003706:	623b      	str	r3, [r7, #32]
          break;
 8003708:	e01a      	b.n	8003740 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003712:	2304      	movs	r3, #4
 8003714:	623b      	str	r3, [r7, #32]
          break;
 8003716:	e013      	b.n	8003740 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003720:	2308      	movs	r3, #8
 8003722:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	611a      	str	r2, [r3, #16]
          break;
 800372a:	e009      	b.n	8003740 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800372c:	2308      	movs	r3, #8
 800372e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	615a      	str	r2, [r3, #20]
          break;
 8003736:	e003      	b.n	8003740 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003738:	2300      	movs	r3, #0
 800373a:	623b      	str	r3, [r7, #32]
          break;
 800373c:	e000      	b.n	8003740 <HAL_GPIO_Init+0x130>
          break;
 800373e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2bff      	cmp	r3, #255	; 0xff
 8003744:	d801      	bhi.n	800374a <HAL_GPIO_Init+0x13a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	e001      	b.n	800374e <HAL_GPIO_Init+0x13e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2bff      	cmp	r3, #255	; 0xff
 8003754:	d802      	bhi.n	800375c <HAL_GPIO_Init+0x14c>
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	e002      	b.n	8003762 <HAL_GPIO_Init+0x152>
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	3b08      	subs	r3, #8
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	210f      	movs	r1, #15
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	fa01 f303 	lsl.w	r3, r1, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	401a      	ands	r2, r3
 8003774:	6a39      	ldr	r1, [r7, #32]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	431a      	orrs	r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80b1 	beq.w	80038f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003790:	4b4d      	ldr	r3, [pc, #308]	; (80038c8 <HAL_GPIO_Init+0x2b8>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	4a4c      	ldr	r2, [pc, #304]	; (80038c8 <HAL_GPIO_Init+0x2b8>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6193      	str	r3, [r2, #24]
 800379c:	4b4a      	ldr	r3, [pc, #296]	; (80038c8 <HAL_GPIO_Init+0x2b8>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037a8:	4a48      	ldr	r2, [pc, #288]	; (80038cc <HAL_GPIO_Init+0x2bc>)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	3302      	adds	r3, #2
 80037b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	220f      	movs	r2, #15
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4013      	ands	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a40      	ldr	r2, [pc, #256]	; (80038d0 <HAL_GPIO_Init+0x2c0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <HAL_GPIO_Init+0x1ec>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a3f      	ldr	r2, [pc, #252]	; (80038d4 <HAL_GPIO_Init+0x2c4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00d      	beq.n	80037f8 <HAL_GPIO_Init+0x1e8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a3e      	ldr	r2, [pc, #248]	; (80038d8 <HAL_GPIO_Init+0x2c8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <HAL_GPIO_Init+0x1e4>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a3d      	ldr	r2, [pc, #244]	; (80038dc <HAL_GPIO_Init+0x2cc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d101      	bne.n	80037f0 <HAL_GPIO_Init+0x1e0>
 80037ec:	2303      	movs	r3, #3
 80037ee:	e006      	b.n	80037fe <HAL_GPIO_Init+0x1ee>
 80037f0:	2304      	movs	r3, #4
 80037f2:	e004      	b.n	80037fe <HAL_GPIO_Init+0x1ee>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e002      	b.n	80037fe <HAL_GPIO_Init+0x1ee>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <HAL_GPIO_Init+0x1ee>
 80037fc:	2300      	movs	r3, #0
 80037fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003800:	f002 0203 	and.w	r2, r2, #3
 8003804:	0092      	lsls	r2, r2, #2
 8003806:	4093      	lsls	r3, r2
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800380e:	492f      	ldr	r1, [pc, #188]	; (80038cc <HAL_GPIO_Init+0x2bc>)
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	3302      	adds	r3, #2
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d006      	beq.n	8003836 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003828:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	492c      	ldr	r1, [pc, #176]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]
 8003834:	e006      	b.n	8003844 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003836:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	43db      	mvns	r3, r3
 800383e:	4928      	ldr	r1, [pc, #160]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003840:	4013      	ands	r3, r2
 8003842:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d006      	beq.n	800385e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003850:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	4922      	ldr	r1, [pc, #136]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
 800385c:	e006      	b.n	800386c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	43db      	mvns	r3, r3
 8003866:	491e      	ldr	r1, [pc, #120]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003868:	4013      	ands	r3, r2
 800386a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d006      	beq.n	8003886 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	4918      	ldr	r1, [pc, #96]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]
 8003884:	e006      	b.n	8003894 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003886:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	43db      	mvns	r3, r3
 800388e:	4914      	ldr	r1, [pc, #80]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003890:	4013      	ands	r3, r2
 8003892:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d021      	beq.n	80038e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038a0:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	490e      	ldr	r1, [pc, #56]	; (80038e0 <HAL_GPIO_Init+0x2d0>)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60cb      	str	r3, [r1, #12]
 80038ac:	e021      	b.n	80038f2 <HAL_GPIO_Init+0x2e2>
 80038ae:	bf00      	nop
 80038b0:	10320000 	.word	0x10320000
 80038b4:	10310000 	.word	0x10310000
 80038b8:	10220000 	.word	0x10220000
 80038bc:	10210000 	.word	0x10210000
 80038c0:	10120000 	.word	0x10120000
 80038c4:	10110000 	.word	0x10110000
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40010800 	.word	0x40010800
 80038d4:	40010c00 	.word	0x40010c00
 80038d8:	40011000 	.word	0x40011000
 80038dc:	40011400 	.word	0x40011400
 80038e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_GPIO_Init+0x304>)
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	4909      	ldr	r1, [pc, #36]	; (8003914 <HAL_GPIO_Init+0x304>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	3301      	adds	r3, #1
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	f47f ae8e 	bne.w	8003624 <HAL_GPIO_Init+0x14>
  }
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	372c      	adds	r7, #44	; 0x2c
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40010400 	.word	0x40010400

08003918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	887b      	ldrh	r3, [r7, #2]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
 8003934:	e001      	b.n	800393a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	807b      	strh	r3, [r7, #2]
 8003952:	4613      	mov	r3, r2
 8003954:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003956:	787b      	ldrb	r3, [r7, #1]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800395c:	887a      	ldrh	r2, [r7, #2]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003962:	e003      	b.n	800396c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	041a      	lsls	r2, r3, #16
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	611a      	str	r2, [r3, #16]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr
	...

08003978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e12b      	b.n	8003be2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fe fe08 	bl	80025b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2224      	movs	r2, #36	; 0x24
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039dc:	f001 f918 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 80039e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4a81      	ldr	r2, [pc, #516]	; (8003bec <HAL_I2C_Init+0x274>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d807      	bhi.n	80039fc <HAL_I2C_Init+0x84>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a80      	ldr	r2, [pc, #512]	; (8003bf0 <HAL_I2C_Init+0x278>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	bf94      	ite	ls
 80039f4:	2301      	movls	r3, #1
 80039f6:	2300      	movhi	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	e006      	b.n	8003a0a <HAL_I2C_Init+0x92>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a7d      	ldr	r2, [pc, #500]	; (8003bf4 <HAL_I2C_Init+0x27c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	bf94      	ite	ls
 8003a04:	2301      	movls	r3, #1
 8003a06:	2300      	movhi	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e0e7      	b.n	8003be2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a78      	ldr	r2, [pc, #480]	; (8003bf8 <HAL_I2C_Init+0x280>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	0c9b      	lsrs	r3, r3, #18
 8003a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	4a6a      	ldr	r2, [pc, #424]	; (8003bec <HAL_I2C_Init+0x274>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d802      	bhi.n	8003a4c <HAL_I2C_Init+0xd4>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	e009      	b.n	8003a60 <HAL_I2C_Init+0xe8>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	4a69      	ldr	r2, [pc, #420]	; (8003bfc <HAL_I2C_Init+0x284>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	3301      	adds	r3, #1
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	495c      	ldr	r1, [pc, #368]	; (8003bec <HAL_I2C_Init+0x274>)
 8003a7c:	428b      	cmp	r3, r1
 8003a7e:	d819      	bhi.n	8003ab4 <HAL_I2C_Init+0x13c>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1e59      	subs	r1, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a8e:	1c59      	adds	r1, r3, #1
 8003a90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a94:	400b      	ands	r3, r1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_I2C_Init+0x138>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1e59      	subs	r1, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aae:	e051      	b.n	8003b54 <HAL_I2C_Init+0x1dc>
 8003ab0:	2304      	movs	r3, #4
 8003ab2:	e04f      	b.n	8003b54 <HAL_I2C_Init+0x1dc>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d111      	bne.n	8003ae0 <HAL_I2C_Init+0x168>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1e58      	subs	r0, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	440b      	add	r3, r1
 8003aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	e012      	b.n	8003b06 <HAL_I2C_Init+0x18e>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	1e58      	subs	r0, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6859      	ldr	r1, [r3, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	0099      	lsls	r1, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af6:	3301      	adds	r3, #1
 8003af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Init+0x196>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e022      	b.n	8003b54 <HAL_I2C_Init+0x1dc>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10e      	bne.n	8003b34 <HAL_I2C_Init+0x1bc>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1e58      	subs	r0, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6859      	ldr	r1, [r3, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	440b      	add	r3, r1
 8003b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b28:	3301      	adds	r3, #1
 8003b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b32:	e00f      	b.n	8003b54 <HAL_I2C_Init+0x1dc>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1e58      	subs	r0, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	0099      	lsls	r1, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	6809      	ldr	r1, [r1, #0]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6911      	ldr	r1, [r2, #16]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68d2      	ldr	r2, [r2, #12]
 8003b8e:	4311      	orrs	r1, r2
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	000186a0 	.word	0x000186a0
 8003bf0:	001e847f 	.word	0x001e847f
 8003bf4:	003d08ff 	.word	0x003d08ff
 8003bf8:	431bde83 	.word	0x431bde83
 8003bfc:	10624dd3 	.word	0x10624dd3

08003c00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	817b      	strh	r3, [r7, #10]
 8003c10:	4613      	mov	r3, r2
 8003c12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c14:	f7ff fc0e 	bl	8003434 <HAL_GetTick>
 8003c18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	f040 80e0 	bne.w	8003de8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2319      	movs	r3, #25
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4970      	ldr	r1, [pc, #448]	; (8003df4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fa92 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e0d3      	b.n	8003dea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_I2C_Master_Transmit+0x50>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e0cc      	b.n	8003dea <HAL_I2C_Master_Transmit+0x1ea>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d007      	beq.n	8003c76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0201 	orr.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2221      	movs	r2, #33	; 0x21
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2210      	movs	r2, #16
 8003c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	893a      	ldrh	r2, [r7, #8]
 8003ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4a50      	ldr	r2, [pc, #320]	; (8003df8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cb8:	8979      	ldrh	r1, [r7, #10]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	6a3a      	ldr	r2, [r7, #32]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f9ca 	bl	8004058 <I2C_MasterRequestWrite>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e08d      	b.n	8003dea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ce4:	e066      	b.n	8003db4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	6a39      	ldr	r1, [r7, #32]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fb0c 	bl	8004308 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d107      	bne.n	8003d0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e06b      	b.n	8003dea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	781a      	ldrb	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d11b      	bne.n	8003d88 <HAL_I2C_Master_Transmit+0x188>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d017      	beq.n	8003d88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	6a39      	ldr	r1, [r7, #32]
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fafc 	bl	800438a <I2C_WaitOnBTFFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00d      	beq.n	8003db4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d107      	bne.n	8003db0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e01a      	b.n	8003dea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d194      	bne.n	8003ce6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
  }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	00100002 	.word	0x00100002
 8003df8:	ffff0000 	.word	0xffff0000

08003dfc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e0c:	f7ff fb12 	bl	8003434 <HAL_GetTick>
 8003e10:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	f040 8111 	bne.w	8004046 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	2319      	movs	r3, #25
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4988      	ldr	r1, [pc, #544]	; (8004050 <HAL_I2C_IsDeviceReady+0x254>)
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f994 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e104      	b.n	8004048 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_I2C_IsDeviceReady+0x50>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e0fd      	b.n	8004048 <HAL_I2C_IsDeviceReady+0x24c>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d007      	beq.n	8003e72 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0201 	orr.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2224      	movs	r2, #36	; 0x24
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a70      	ldr	r2, [pc, #448]	; (8004054 <HAL_I2C_IsDeviceReady+0x258>)
 8003e94:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f952 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00d      	beq.n	8003eda <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ecc:	d103      	bne.n	8003ed6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e0b6      	b.n	8004048 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eda:	897b      	ldrh	r3, [r7, #10]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ee8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003eea:	f7ff faa3 	bl	8003434 <HAL_GetTick>
 8003eee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	bf0c      	ite	eq
 8003efe:	2301      	moveq	r3, #1
 8003f00:	2300      	movne	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f14:	bf0c      	ite	eq
 8003f16:	2301      	moveq	r3, #1
 8003f18:	2300      	movne	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f1e:	e025      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f20:	f7ff fa88 	bl	8003434 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d302      	bcc.n	8003f36 <HAL_I2C_IsDeviceReady+0x13a>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	22a0      	movs	r2, #160	; 0xa0
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f62:	bf0c      	ite	eq
 8003f64:	2301      	moveq	r3, #1
 8003f66:	2300      	movne	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2ba0      	cmp	r3, #160	; 0xa0
 8003f76:	d005      	beq.n	8003f84 <HAL_I2C_IsDeviceReady+0x188>
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d102      	bne.n	8003f84 <HAL_I2C_IsDeviceReady+0x188>
 8003f7e:	7dbb      	ldrb	r3, [r7, #22]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0cd      	beq.n	8003f20 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d129      	bne.n	8003fee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003faa:	2300      	movs	r3, #0
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2319      	movs	r3, #25
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	4921      	ldr	r1, [pc, #132]	; (8004050 <HAL_I2C_IsDeviceReady+0x254>)
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f8c6 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e036      	b.n	8004048 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e02c      	b.n	8004048 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004006:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	2319      	movs	r3, #25
 800400e:	2201      	movs	r2, #1
 8004010:	490f      	ldr	r1, [pc, #60]	; (8004050 <HAL_I2C_IsDeviceReady+0x254>)
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f8a2 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e012      	b.n	8004048 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	3301      	adds	r3, #1
 8004026:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	f4ff af32 	bcc.w	8003e96 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004046:	2302      	movs	r3, #2
  }
}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	00100002 	.word	0x00100002
 8004054:	ffff0000 	.word	0xffff0000

08004058 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	460b      	mov	r3, r1
 8004066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d006      	beq.n	8004082 <I2C_MasterRequestWrite+0x2a>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d003      	beq.n	8004082 <I2C_MasterRequestWrite+0x2a>
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004080:	d108      	bne.n	8004094 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e00b      	b.n	80040ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	2b12      	cmp	r3, #18
 800409a:	d107      	bne.n	80040ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f84f 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00d      	beq.n	80040e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d2:	d103      	bne.n	80040dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e035      	b.n	800414c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040e8:	d108      	bne.n	80040fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ea:	897b      	ldrh	r3, [r7, #10]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040f8:	611a      	str	r2, [r3, #16]
 80040fa:	e01b      	b.n	8004134 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040fc:	897b      	ldrh	r3, [r7, #10]
 80040fe:	11db      	asrs	r3, r3, #7
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f003 0306 	and.w	r3, r3, #6
 8004106:	b2db      	uxtb	r3, r3
 8004108:	f063 030f 	orn	r3, r3, #15
 800410c:	b2da      	uxtb	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	490e      	ldr	r1, [pc, #56]	; (8004154 <I2C_MasterRequestWrite+0xfc>)
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f875 	bl	800420a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e010      	b.n	800414c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800412a:	897b      	ldrh	r3, [r7, #10]
 800412c:	b2da      	uxtb	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4907      	ldr	r1, [pc, #28]	; (8004158 <I2C_MasterRequestWrite+0x100>)
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f865 	bl	800420a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	00010008 	.word	0x00010008
 8004158:	00010002 	.word	0x00010002

0800415c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800416c:	e025      	b.n	80041ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d021      	beq.n	80041ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004176:	f7ff f95d 	bl	8003434 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d302      	bcc.n	800418c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d116      	bne.n	80041ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e023      	b.n	8004202 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d10d      	bne.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	43da      	mvns	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	e00c      	b.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	43da      	mvns	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4013      	ands	r3, r2
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bf0c      	ite	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	2300      	movne	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d0b6      	beq.n	800416e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
 8004216:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004218:	e051      	b.n	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004228:	d123      	bne.n	8004272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004238:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004242:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f043 0204 	orr.w	r2, r3, #4
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e046      	b.n	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d021      	beq.n	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427a:	f7ff f8db 	bl	8003434 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	429a      	cmp	r2, r3
 8004288:	d302      	bcc.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d116      	bne.n	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f043 0220 	orr.w	r2, r3, #32
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e020      	b.n	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10c      	bne.n	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	43da      	mvns	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4013      	ands	r3, r2
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	bf14      	ite	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	2300      	moveq	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	e00b      	b.n	80042fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	43da      	mvns	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4013      	ands	r3, r2
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d18d      	bne.n	800421a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004314:	e02d      	b.n	8004372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f878 	bl	800440c <I2C_IsAcknowledgeFailed>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e02d      	b.n	8004382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d021      	beq.n	8004372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432e:	f7ff f881 	bl	8003434 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	d302      	bcc.n	8004344 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d116      	bne.n	8004372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f043 0220 	orr.w	r2, r3, #32
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e007      	b.n	8004382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d1ca      	bne.n	8004316 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004396:	e02d      	b.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f837 	bl	800440c <I2C_IsAcknowledgeFailed>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e02d      	b.n	8004404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d021      	beq.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b0:	f7ff f840 	bl	8003434 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d302      	bcc.n	80043c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d116      	bne.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f043 0220 	orr.w	r2, r3, #32
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e007      	b.n	8004404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d1ca      	bne.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	d11b      	bne.n	800445c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800442c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f043 0204 	orr.w	r2, r3, #4
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e272      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8087 	beq.w	8004596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004488:	4b92      	ldr	r3, [pc, #584]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 030c 	and.w	r3, r3, #12
 8004490:	2b04      	cmp	r3, #4
 8004492:	d00c      	beq.n	80044ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004494:	4b8f      	ldr	r3, [pc, #572]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d112      	bne.n	80044c6 <HAL_RCC_OscConfig+0x5e>
 80044a0:	4b8c      	ldr	r3, [pc, #560]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ac:	d10b      	bne.n	80044c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ae:	4b89      	ldr	r3, [pc, #548]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d06c      	beq.n	8004594 <HAL_RCC_OscConfig+0x12c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d168      	bne.n	8004594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e24c      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ce:	d106      	bne.n	80044de <HAL_RCC_OscConfig+0x76>
 80044d0:	4b80      	ldr	r3, [pc, #512]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a7f      	ldr	r2, [pc, #508]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	e02e      	b.n	800453c <HAL_RCC_OscConfig+0xd4>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0x98>
 80044e6:	4b7b      	ldr	r3, [pc, #492]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a7a      	ldr	r2, [pc, #488]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b78      	ldr	r3, [pc, #480]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a77      	ldr	r2, [pc, #476]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e01d      	b.n	800453c <HAL_RCC_OscConfig+0xd4>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0xbc>
 800450a:	4b72      	ldr	r3, [pc, #456]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a71      	ldr	r2, [pc, #452]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b6f      	ldr	r3, [pc, #444]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6e      	ldr	r2, [pc, #440]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e00b      	b.n	800453c <HAL_RCC_OscConfig+0xd4>
 8004524:	4b6b      	ldr	r3, [pc, #428]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a6a      	ldr	r2, [pc, #424]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800452a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b68      	ldr	r3, [pc, #416]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a67      	ldr	r2, [pc, #412]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800453a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d013      	beq.n	800456c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fe ff76 	bl	8003434 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800454c:	f7fe ff72 	bl	8003434 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e200      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	4b5d      	ldr	r3, [pc, #372]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0xe4>
 800456a:	e014      	b.n	8004596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fe ff62 	bl	8003434 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004574:	f7fe ff5e 	bl	8003434 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	; 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e1ec      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004586:	4b53      	ldr	r3, [pc, #332]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x10c>
 8004592:	e000      	b.n	8004596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d063      	beq.n	800466a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a2:	4b4c      	ldr	r3, [pc, #304]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045ae:	4b49      	ldr	r3, [pc, #292]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d11c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x18c>
 80045ba:	4b46      	ldr	r3, [pc, #280]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d116      	bne.n	80045f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c6:	4b43      	ldr	r3, [pc, #268]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_RCC_OscConfig+0x176>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d001      	beq.n	80045de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e1c0      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045de:	4b3d      	ldr	r3, [pc, #244]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4939      	ldr	r1, [pc, #228]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f2:	e03a      	b.n	800466a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045fc:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <HAL_RCC_OscConfig+0x270>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004602:	f7fe ff17 	bl	8003434 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460a:	f7fe ff13 	bl	8003434 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e1a1      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461c:	4b2d      	ldr	r3, [pc, #180]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004628:	4b2a      	ldr	r3, [pc, #168]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	4927      	ldr	r1, [pc, #156]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]
 800463c:	e015      	b.n	800466a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463e:	4b26      	ldr	r3, [pc, #152]	; (80046d8 <HAL_RCC_OscConfig+0x270>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe fef6 	bl	8003434 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464c:	f7fe fef2 	bl	8003434 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e180      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465e:	4b1d      	ldr	r3, [pc, #116]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d03a      	beq.n	80046ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d019      	beq.n	80046b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467e:	4b17      	ldr	r3, [pc, #92]	; (80046dc <HAL_RCC_OscConfig+0x274>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004684:	f7fe fed6 	bl	8003434 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468c:	f7fe fed2 	bl	8003434 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e160      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469e:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046aa:	2001      	movs	r0, #1
 80046ac:	f000 fac4 	bl	8004c38 <RCC_Delay>
 80046b0:	e01c      	b.n	80046ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b2:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <HAL_RCC_OscConfig+0x274>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b8:	f7fe febc 	bl	8003434 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046be:	e00f      	b.n	80046e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fe feb8 	bl	8003434 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d908      	bls.n	80046e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e146      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000
 80046d8:	42420000 	.word	0x42420000
 80046dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e0:	4b92      	ldr	r3, [pc, #584]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e9      	bne.n	80046c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80a6 	beq.w	8004846 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fe:	4b8b      	ldr	r3, [pc, #556]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	4b88      	ldr	r3, [pc, #544]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	4a87      	ldr	r2, [pc, #540]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004714:	61d3      	str	r3, [r2, #28]
 8004716:	4b85      	ldr	r3, [pc, #532]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004726:	4b82      	ldr	r3, [pc, #520]	; (8004930 <HAL_RCC_OscConfig+0x4c8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d118      	bne.n	8004764 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004732:	4b7f      	ldr	r3, [pc, #508]	; (8004930 <HAL_RCC_OscConfig+0x4c8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7e      	ldr	r2, [pc, #504]	; (8004930 <HAL_RCC_OscConfig+0x4c8>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473e:	f7fe fe79 	bl	8003434 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fe fe75 	bl	8003434 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b64      	cmp	r3, #100	; 0x64
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e103      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	4b75      	ldr	r3, [pc, #468]	; (8004930 <HAL_RCC_OscConfig+0x4c8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x312>
 800476c:	4b6f      	ldr	r3, [pc, #444]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4a6e      	ldr	r2, [pc, #440]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6213      	str	r3, [r2, #32]
 8004778:	e02d      	b.n	80047d6 <HAL_RCC_OscConfig+0x36e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x334>
 8004782:	4b6a      	ldr	r3, [pc, #424]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	4a69      	ldr	r2, [pc, #420]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6213      	str	r3, [r2, #32]
 800478e:	4b67      	ldr	r3, [pc, #412]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	4a66      	ldr	r2, [pc, #408]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004794:	f023 0304 	bic.w	r3, r3, #4
 8004798:	6213      	str	r3, [r2, #32]
 800479a:	e01c      	b.n	80047d6 <HAL_RCC_OscConfig+0x36e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b05      	cmp	r3, #5
 80047a2:	d10c      	bne.n	80047be <HAL_RCC_OscConfig+0x356>
 80047a4:	4b61      	ldr	r3, [pc, #388]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	4a60      	ldr	r2, [pc, #384]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	6213      	str	r3, [r2, #32]
 80047b0:	4b5e      	ldr	r3, [pc, #376]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	4a5d      	ldr	r2, [pc, #372]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6213      	str	r3, [r2, #32]
 80047bc:	e00b      	b.n	80047d6 <HAL_RCC_OscConfig+0x36e>
 80047be:	4b5b      	ldr	r3, [pc, #364]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	4a5a      	ldr	r2, [pc, #360]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	6213      	str	r3, [r2, #32]
 80047ca:	4b58      	ldr	r3, [pc, #352]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a57      	ldr	r2, [pc, #348]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d015      	beq.n	800480a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047de:	f7fe fe29 	bl	8003434 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7fe fe25 	bl	8003434 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0b1      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fc:	4b4b      	ldr	r3, [pc, #300]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ee      	beq.n	80047e6 <HAL_RCC_OscConfig+0x37e>
 8004808:	e014      	b.n	8004834 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7fe fe13 	bl	8003434 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fe fe0f 	bl	8003434 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e09b      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004828:	4b40      	ldr	r3, [pc, #256]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ee      	bne.n	8004812 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483a:	4b3c      	ldr	r3, [pc, #240]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	4a3b      	ldr	r2, [pc, #236]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004844:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8087 	beq.w	800495e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004850:	4b36      	ldr	r3, [pc, #216]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	d061      	beq.n	8004920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d146      	bne.n	80048f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004864:	4b33      	ldr	r3, [pc, #204]	; (8004934 <HAL_RCC_OscConfig+0x4cc>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fe fde3 	bl	8003434 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7fe fddf 	bl	8003434 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e06d      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004884:	4b29      	ldr	r3, [pc, #164]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f0      	bne.n	8004872 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004898:	d108      	bne.n	80048ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800489a:	4b24      	ldr	r3, [pc, #144]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	4921      	ldr	r1, [pc, #132]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ac:	4b1f      	ldr	r3, [pc, #124]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a19      	ldr	r1, [r3, #32]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	430b      	orrs	r3, r1
 80048be:	491b      	ldr	r1, [pc, #108]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c4:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <HAL_RCC_OscConfig+0x4cc>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ca:	f7fe fdb3 	bl	8003434 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d2:	f7fe fdaf 	bl	8003434 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e03d      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048e4:	4b11      	ldr	r3, [pc, #68]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x46a>
 80048f0:	e035      	b.n	800495e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f2:	4b10      	ldr	r3, [pc, #64]	; (8004934 <HAL_RCC_OscConfig+0x4cc>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f8:	f7fe fd9c 	bl	8003434 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004900:	f7fe fd98 	bl	8003434 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e026      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004912:	4b06      	ldr	r3, [pc, #24]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f0      	bne.n	8004900 <HAL_RCC_OscConfig+0x498>
 800491e:	e01e      	b.n	800495e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d107      	bne.n	8004938 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e019      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
 800492c:	40021000 	.word	0x40021000
 8004930:	40007000 	.word	0x40007000
 8004934:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_OscConfig+0x500>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	429a      	cmp	r2, r3
 800494a:	d106      	bne.n	800495a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d001      	beq.n	800495e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40021000 	.word	0x40021000

0800496c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0d0      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d910      	bls.n	80049b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b67      	ldr	r3, [pc, #412]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 0207 	bic.w	r2, r3, #7
 8004996:	4965      	ldr	r1, [pc, #404]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b63      	ldr	r3, [pc, #396]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0b8      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c8:	4b59      	ldr	r3, [pc, #356]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4a58      	ldr	r2, [pc, #352]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e0:	4b53      	ldr	r3, [pc, #332]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4a52      	ldr	r2, [pc, #328]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b50      	ldr	r3, [pc, #320]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	494d      	ldr	r1, [pc, #308]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d040      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b47      	ldr	r3, [pc, #284]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d115      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2a:	4b41      	ldr	r3, [pc, #260]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e073      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3a:	4b3d      	ldr	r3, [pc, #244]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e06b      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4a:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4936      	ldr	r1, [pc, #216]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a5c:	f7fe fcea 	bl	8003434 <HAL_GetTick>
 8004a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fe fce6 	bl	8003434 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e053      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	4b2d      	ldr	r3, [pc, #180]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 020c 	and.w	r2, r3, #12
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1eb      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b27      	ldr	r3, [pc, #156]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d210      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 0207 	bic.w	r2, r3, #7
 8004aa2:	4922      	ldr	r1, [pc, #136]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e032      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac8:	4b19      	ldr	r3, [pc, #100]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4916      	ldr	r1, [pc, #88]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ae6:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	490e      	ldr	r1, [pc, #56]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004afa:	f000 f821 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	490a      	ldr	r1, [pc, #40]	; (8004b34 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0c:	5ccb      	ldrb	r3, [r1, r3]
 8004b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b12:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <HAL_RCC_ClockConfig+0x1cc>)
 8004b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b16:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_ClockConfig+0x1d0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe fc5a 	bl	80033d4 <HAL_InitTick>

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40022000 	.word	0x40022000
 8004b30:	40021000 	.word	0x40021000
 8004b34:	08005bdc 	.word	0x08005bdc
 8004b38:	2000004c 	.word	0x2000004c
 8004b3c:	20000050 	.word	0x20000050

08004b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b40:	b490      	push	{r4, r7}
 8004b42:	b08a      	sub	sp, #40	; 0x28
 8004b44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b46:	4b29      	ldr	r3, [pc, #164]	; (8004bec <HAL_RCC_GetSysClockFreq+0xac>)
 8004b48:	1d3c      	adds	r4, r7, #4
 8004b4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b50:	f240 2301 	movw	r3, #513	; 0x201
 8004b54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b6a:	4b21      	ldr	r3, [pc, #132]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d002      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x40>
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d003      	beq.n	8004b86 <HAL_RCC_GetSysClockFreq+0x46>
 8004b7e:	e02b      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b80:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b82:	623b      	str	r3, [r7, #32]
      break;
 8004b84:	e02b      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	0c9b      	lsrs	r3, r3, #18
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	3328      	adds	r3, #40	; 0x28
 8004b90:	443b      	add	r3, r7
 8004b92:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b96:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d012      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ba2:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	0c5b      	lsrs	r3, r3, #17
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	3328      	adds	r3, #40	; 0x28
 8004bae:	443b      	add	r3, r7
 8004bb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	4a0e      	ldr	r2, [pc, #56]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bba:	fb03 f202 	mul.w	r2, r3, r2
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	e004      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	4a0b      	ldr	r2, [pc, #44]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bcc:	fb02 f303 	mul.w	r3, r2, r3
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	623b      	str	r3, [r7, #32]
      break;
 8004bd6:	e002      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bd8:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bda:	623b      	str	r3, [r7, #32]
      break;
 8004bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bde:	6a3b      	ldr	r3, [r7, #32]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3728      	adds	r7, #40	; 0x28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc90      	pop	{r4, r7}
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	08004e70 	.word	0x08004e70
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	007a1200 	.word	0x007a1200
 8004bf8:	003d0900 	.word	0x003d0900

08004bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c00:	4b02      	ldr	r3, [pc, #8]	; (8004c0c <HAL_RCC_GetHCLKFreq+0x10>)
 8004c02:	681b      	ldr	r3, [r3, #0]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr
 8004c0c:	2000004c 	.word	0x2000004c

08004c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c14:	f7ff fff2 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4903      	ldr	r1, [pc, #12]	; (8004c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021000 	.word	0x40021000
 8004c34:	08005bec 	.word	0x08005bec

08004c38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <RCC_Delay+0x34>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a0a      	ldr	r2, [pc, #40]	; (8004c70 <RCC_Delay+0x38>)
 8004c46:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4a:	0a5b      	lsrs	r3, r3, #9
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c54:	bf00      	nop
  }
  while (Delay --);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1e5a      	subs	r2, r3, #1
 8004c5a:	60fa      	str	r2, [r7, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f9      	bne.n	8004c54 <RCC_Delay+0x1c>
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	2000004c 	.word	0x2000004c
 8004c70:	10624dd3 	.word	0x10624dd3

08004c74 <__itoa>:
 8004c74:	1e93      	subs	r3, r2, #2
 8004c76:	2b22      	cmp	r3, #34	; 0x22
 8004c78:	b510      	push	{r4, lr}
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	d904      	bls.n	8004c88 <__itoa+0x14>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	461c      	mov	r4, r3
 8004c82:	700b      	strb	r3, [r1, #0]
 8004c84:	4620      	mov	r0, r4
 8004c86:	bd10      	pop	{r4, pc}
 8004c88:	2a0a      	cmp	r2, #10
 8004c8a:	d109      	bne.n	8004ca0 <__itoa+0x2c>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	da07      	bge.n	8004ca0 <__itoa+0x2c>
 8004c90:	232d      	movs	r3, #45	; 0x2d
 8004c92:	700b      	strb	r3, [r1, #0]
 8004c94:	2101      	movs	r1, #1
 8004c96:	4240      	negs	r0, r0
 8004c98:	4421      	add	r1, r4
 8004c9a:	f000 f805 	bl	8004ca8 <__utoa>
 8004c9e:	e7f1      	b.n	8004c84 <__itoa+0x10>
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	e7f9      	b.n	8004c98 <__itoa+0x24>

08004ca4 <itoa>:
 8004ca4:	f7ff bfe6 	b.w	8004c74 <__itoa>

08004ca8 <__utoa>:
 8004ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004caa:	b08b      	sub	sp, #44	; 0x2c
 8004cac:	4605      	mov	r5, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	466e      	mov	r6, sp
 8004cb2:	4c1d      	ldr	r4, [pc, #116]	; (8004d28 <__utoa+0x80>)
 8004cb4:	f104 0c20 	add.w	ip, r4, #32
 8004cb8:	4637      	mov	r7, r6
 8004cba:	6820      	ldr	r0, [r4, #0]
 8004cbc:	6861      	ldr	r1, [r4, #4]
 8004cbe:	3408      	adds	r4, #8
 8004cc0:	c703      	stmia	r7!, {r0, r1}
 8004cc2:	4564      	cmp	r4, ip
 8004cc4:	463e      	mov	r6, r7
 8004cc6:	d1f7      	bne.n	8004cb8 <__utoa+0x10>
 8004cc8:	7921      	ldrb	r1, [r4, #4]
 8004cca:	6820      	ldr	r0, [r4, #0]
 8004ccc:	7139      	strb	r1, [r7, #4]
 8004cce:	1e91      	subs	r1, r2, #2
 8004cd0:	2922      	cmp	r1, #34	; 0x22
 8004cd2:	6038      	str	r0, [r7, #0]
 8004cd4:	f04f 0100 	mov.w	r1, #0
 8004cd8:	d904      	bls.n	8004ce4 <__utoa+0x3c>
 8004cda:	7019      	strb	r1, [r3, #0]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4618      	mov	r0, r3
 8004ce0:	b00b      	add	sp, #44	; 0x2c
 8004ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ce4:	1e58      	subs	r0, r3, #1
 8004ce6:	4684      	mov	ip, r0
 8004ce8:	fbb5 f7f2 	udiv	r7, r5, r2
 8004cec:	fb02 5617 	mls	r6, r2, r7, r5
 8004cf0:	3628      	adds	r6, #40	; 0x28
 8004cf2:	446e      	add	r6, sp
 8004cf4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004cfe:	462e      	mov	r6, r5
 8004d00:	42b2      	cmp	r2, r6
 8004d02:	463d      	mov	r5, r7
 8004d04:	f101 0101 	add.w	r1, r1, #1
 8004d08:	d9ee      	bls.n	8004ce8 <__utoa+0x40>
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	545a      	strb	r2, [r3, r1]
 8004d0e:	1919      	adds	r1, r3, r4
 8004d10:	1aa5      	subs	r5, r4, r2
 8004d12:	42aa      	cmp	r2, r5
 8004d14:	dae3      	bge.n	8004cde <__utoa+0x36>
 8004d16:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004d1a:	780e      	ldrb	r6, [r1, #0]
 8004d1c:	3201      	adds	r2, #1
 8004d1e:	7006      	strb	r6, [r0, #0]
 8004d20:	f801 5901 	strb.w	r5, [r1], #-1
 8004d24:	e7f4      	b.n	8004d10 <__utoa+0x68>
 8004d26:	bf00      	nop
 8004d28:	08005bf4 	.word	0x08005bf4

08004d2c <memset>:
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4402      	add	r2, r0
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d100      	bne.n	8004d36 <memset+0xa>
 8004d34:	4770      	bx	lr
 8004d36:	f803 1b01 	strb.w	r1, [r3], #1
 8004d3a:	e7f9      	b.n	8004d30 <memset+0x4>

08004d3c <__libc_init_array>:
 8004d3c:	b570      	push	{r4, r5, r6, lr}
 8004d3e:	2600      	movs	r6, #0
 8004d40:	4d0c      	ldr	r5, [pc, #48]	; (8004d74 <__libc_init_array+0x38>)
 8004d42:	4c0d      	ldr	r4, [pc, #52]	; (8004d78 <__libc_init_array+0x3c>)
 8004d44:	1b64      	subs	r4, r4, r5
 8004d46:	10a4      	asrs	r4, r4, #2
 8004d48:	42a6      	cmp	r6, r4
 8004d4a:	d109      	bne.n	8004d60 <__libc_init_array+0x24>
 8004d4c:	f000 f828 	bl	8004da0 <_init>
 8004d50:	2600      	movs	r6, #0
 8004d52:	4d0a      	ldr	r5, [pc, #40]	; (8004d7c <__libc_init_array+0x40>)
 8004d54:	4c0a      	ldr	r4, [pc, #40]	; (8004d80 <__libc_init_array+0x44>)
 8004d56:	1b64      	subs	r4, r4, r5
 8004d58:	10a4      	asrs	r4, r4, #2
 8004d5a:	42a6      	cmp	r6, r4
 8004d5c:	d105      	bne.n	8004d6a <__libc_init_array+0x2e>
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d64:	4798      	blx	r3
 8004d66:	3601      	adds	r6, #1
 8004d68:	e7ee      	b.n	8004d48 <__libc_init_array+0xc>
 8004d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d6e:	4798      	blx	r3
 8004d70:	3601      	adds	r6, #1
 8004d72:	e7f2      	b.n	8004d5a <__libc_init_array+0x1e>
 8004d74:	08005c1c 	.word	0x08005c1c
 8004d78:	08005c1c 	.word	0x08005c1c
 8004d7c:	08005c1c 	.word	0x08005c1c
 8004d80:	08005c20 	.word	0x08005c20

08004d84 <memcpy>:
 8004d84:	440a      	add	r2, r1
 8004d86:	4291      	cmp	r1, r2
 8004d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d8c:	d100      	bne.n	8004d90 <memcpy+0xc>
 8004d8e:	4770      	bx	lr
 8004d90:	b510      	push	{r4, lr}
 8004d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d96:	4291      	cmp	r1, r2
 8004d98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d9c:	d1f9      	bne.n	8004d92 <memcpy+0xe>
 8004d9e:	bd10      	pop	{r4, pc}

08004da0 <_init>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	bf00      	nop
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr

08004dac <_fini>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	bf00      	nop
 8004db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db2:	bc08      	pop	{r3}
 8004db4:	469e      	mov	lr, r3
 8004db6:	4770      	bx	lr
