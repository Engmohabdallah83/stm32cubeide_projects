
OLED_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de0  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f08  08004f08  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f08  08004f08  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f08  08004f08  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f0c  08004f0c  00014f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dac  2000001c  08004f2c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002dc8  08004f2c  00022dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ddf  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000212e  00000000  00000000  00029e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002bf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000089c  00000000  00000000  0002cad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015f65  00000000  00000000  0002d36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dcff  00000000  00000000  000432d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000889da  00000000  00000000  00050fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e44  00000000  00000000  000d99ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  000dc7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004110 	.word	0x08004110

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	08004110 	.word	0x08004110

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 80005e4:	f001 fc84 	bl	8001ef0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 80005e8:	4b3e      	ldr	r3, [pc, #248]	; (80006e4 <pvPortMalloc+0x10c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d104      	bne.n	80005fa <pvPortMalloc+0x22>
		{
			prvHeapInit();
 80005f0:	f000 f8ba 	bl	8000768 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 80005f4:	4b3b      	ldr	r3, [pc, #236]	; (80006e4 <pvPortMalloc+0x10c>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d00e      	beq.n	800061e <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8000600:	2308      	movs	r3, #8
 8000602:	461a      	mov	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4413      	add	r3, r2
 8000608:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f003 0307 	and.w	r3, r3, #7
 8000610:	2b00      	cmp	r3, #0
 8000612:	d004      	beq.n	800061e <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f023 0307 	bic.w	r3, r3, #7
 800061a:	3308      	adds	r3, #8
 800061c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d057      	beq.n	80006d4 <pvPortMalloc+0xfc>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f242 72f7 	movw	r2, #10231	; 0x27f7
 800062a:	4293      	cmp	r3, r2
 800062c:	d852      	bhi.n	80006d4 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 800062e:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <pvPortMalloc+0x110>)
 8000630:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <pvPortMalloc+0x110>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000638:	e004      	b.n	8000644 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	429a      	cmp	r2, r3
 800064c:	d903      	bls.n	8000656 <pvPortMalloc+0x7e>
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1f1      	bne.n	800063a <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	4a24      	ldr	r2, [pc, #144]	; (80006ec <pvPortMalloc+0x114>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d03a      	beq.n	80006d4 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2208      	movs	r2, #8
 8000664:	4413      	add	r3, r2
 8000666:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	2208      	movs	r2, #8
 800067a:	0052      	lsls	r2, r2, #1
 800067c:	4293      	cmp	r3, r2
 800067e:	d922      	bls.n	80006c6 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000680:	69fa      	ldr	r2, [r7, #28]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	1ad2      	subs	r2, r2, r3
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <pvPortMalloc+0x110>)
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	e002      	b.n	80006ac <pvPortMalloc+0xd4>
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d8f6      	bhi.n	80006a6 <pvPortMalloc+0xce>
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <pvPortMalloc+0x118>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <pvPortMalloc+0x118>)
 80006d2:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80006d4:	f001 fc1a 	bl	8001f0c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80006d8:	697b      	ldr	r3, [r7, #20]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20002848 	.word	0x20002848
 80006e8:	20002838 	.word	0x20002838
 80006ec:	20002840 	.word	0x20002840
 80006f0:	20000008 	.word	0x20000008

080006f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d027      	beq.n	8000756 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8000706:	2308      	movs	r3, #8
 8000708:	425b      	negs	r3, r3
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	4413      	add	r3, r2
 800070e:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8000714:	f001 fbec 	bl	8001ef0 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <vPortFree+0x6c>)
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	e002      	b.n	800072a <vPortFree+0x36>
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	429a      	cmp	r2, r3
 8000734:	d8f6      	bhi.n	8000724 <vPortFree+0x30>
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <vPortFree+0x70>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4413      	add	r3, r2
 800074e:	4a05      	ldr	r2, [pc, #20]	; (8000764 <vPortFree+0x70>)
 8000750:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8000752:	f001 fbdb 	bl	8001f0c <xTaskResumeAll>
	}
}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20002838 	.word	0x20002838
 8000764:	20000008 	.word	0x20000008

08000768 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <prvHeapInit+0x44>)
 8000770:	f023 0307 	bic.w	r3, r3, #7
 8000774:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <prvHeapInit+0x48>)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <prvHeapInit+0x48>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <prvHeapInit+0x4c>)
 8000784:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000788:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <prvHeapInit+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	f242 72f8 	movw	r2, #10232	; 0x27f8
 800079a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <prvHeapInit+0x4c>)
 80007a0:	601a      	str	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000040 	.word	0x20000040
 80007b0:	20002838 	.word	0x20002838
 80007b4:	20002840 	.word	0x20002840

080007b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f103 0208 	add.w	r2, r3, #8
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f04f 32ff 	mov.w	r2, #4294967295
 80007d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f103 0208 	add.w	r2, r3, #8
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f103 0208 	add.w	r2, r3, #8
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800080e:	b480      	push	{r7}
 8000810:	b085      	sub	sp, #20
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	689a      	ldr	r2, [r3, #8]
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	601a      	str	r2, [r3, #0]
}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800086a:	d103      	bne.n	8000874 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e00c      	b.n	800088e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3308      	adds	r3, #8
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	e002      	b.n	8000882 <vListInsert+0x2e>
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	429a      	cmp	r2, r3
 800088c:	d2f6      	bcs.n	800087c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	601a      	str	r2, [r3, #0]
}
 80008ba:	bf00      	nop
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	6892      	ldr	r2, [r2, #8]
 80008da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	6852      	ldr	r2, [r2, #4]
 80008e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d103      	bne.n	80008f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
	...

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f001 ff87 	bl	8002830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f95b 	bl	8000bdc <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  RCC->APB2ENR = (1<<2); //Enable GPIOA
 8000926:	4b3c      	ldr	r3, [pc, #240]	; (8000a18 <main+0x100>)
 8000928:	2204      	movs	r2, #4
 800092a:	619a      	str	r2, [r3, #24]
  GPIOA->CRL = (3<<4) | (3<<8); // configure PA1 = blue led as output pin
 800092c:	4b3b      	ldr	r3, [pc, #236]	; (8000a1c <main+0x104>)
 800092e:	f44f 724c 	mov.w	r2, #816	; 0x330
 8000932:	601a      	str	r2, [r3, #0]

  Mutex = xSemaphoreCreateMutex();  //Mutex creation
 8000934:	2001      	movs	r0, #1
 8000936:	f000 fb5e 	bl	8000ff6 <xQueueCreateMutex>
 800093a:	4603      	mov	r3, r0
 800093c:	4a38      	ldr	r2, [pc, #224]	; (8000a20 <main+0x108>)
 800093e:	6013      	str	r3, [r2, #0]
  MX_GPIO_Init();
 8000940:	f000 f92a 	bl	8000b98 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000944:	f000 f8fa 	bl	8000b3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000948:	f000 fe00 	bl	800154c <SSD1306_Init>



  GPIOA->ODR |=(1<<1);
 800094c:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <main+0x104>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	4a32      	ldr	r2, [pc, #200]	; (8000a1c <main+0x104>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	60d3      	str	r3, [r2, #12]

  SSD1306_GotoXY (0,0);
 8000958:	2100      	movs	r1, #0
 800095a:	2000      	movs	r0, #0
 800095c:	f000 ff5e 	bl	800181c <SSD1306_GotoXY>
  SSD1306_Puts ("Robotics", &Font_11x18, 1);
 8000960:	2201      	movs	r2, #1
 8000962:	4930      	ldr	r1, [pc, #192]	; (8000a24 <main+0x10c>)
 8000964:	4830      	ldr	r0, [pc, #192]	; (8000a28 <main+0x110>)
 8000966:	f000 ffef 	bl	8001948 <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 800096a:	211e      	movs	r1, #30
 800096c:	2000      	movs	r0, #0
 800096e:	f000 ff55 	bl	800181c <SSD1306_GotoXY>
  SSD1306_Puts ("Corner", &Font_11x18, 1);
 8000972:	2201      	movs	r2, #1
 8000974:	492b      	ldr	r1, [pc, #172]	; (8000a24 <main+0x10c>)
 8000976:	482d      	ldr	r0, [pc, #180]	; (8000a2c <main+0x114>)
 8000978:	f000 ffe6 	bl	8001948 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800097c:	f000 feaa 	bl	80016d4 <SSD1306_UpdateScreen>
//  HAL_Delay (1000);
  for(double i=0;i<100000;i++);
 8000980:	f04f 0200 	mov.w	r2, #0
 8000984:	f04f 0300 	mov.w	r3, #0
 8000988:	e9c7 2300 	strd	r2, r3, [r7]
 800098c:	e00a      	b.n	80009a4 <main+0x8c>
 800098e:	f04f 0200 	mov.w	r2, #0
 8000992:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <main+0x118>)
 8000994:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000998:	f7ff fbe0 	bl	800015c <__adddf3>
 800099c:	4602      	mov	r2, r0
 800099e:	460b      	mov	r3, r1
 80009a0:	e9c7 2300 	strd	r2, r3, [r7]
 80009a4:	a31a      	add	r3, pc, #104	; (adr r3, 8000a10 <main+0xf8>)
 80009a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80009ae:	f7ff fdeb 	bl	8000588 <__aeabi_dcmplt>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1ea      	bne.n	800098e <main+0x76>
  SSD1306_Clear();
 80009b8:	f000 ffeb 	bl	8001992 <SSD1306_Clear>


  if(Mutex != NULL)
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <main+0x108>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d024      	beq.n	8000a0e <main+0xf6>
  {
	  RCC->APB2ENR = (1<<2); //Enable GPIOA
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <main+0x100>)
 80009c6:	2204      	movs	r2, #4
 80009c8:	619a      	str	r2, [r3, #24]
	  GPIOA->CRL = (3<<4) | (3<<8); // configure PA1 = blue led as output pin
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <main+0x104>)
 80009cc:	f44f 724c 	mov.w	r2, #816	; 0x330
 80009d0:	601a      	str	r2, [r3, #0]
	  GPIOA->ODR |=(1<<1);
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <main+0x104>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <main+0x104>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	60d3      	str	r3, [r2, #12]

	  xTaskCreate(TempSensor, "TempSensorTask", 300, NULL, 3, NULL);
 80009de:	2300      	movs	r3, #0
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	2303      	movs	r3, #3
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2300      	movs	r3, #0
 80009e8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80009ec:	4911      	ldr	r1, [pc, #68]	; (8000a34 <main+0x11c>)
 80009ee:	4812      	ldr	r0, [pc, #72]	; (8000a38 <main+0x120>)
 80009f0:	f001 f8fb 	bl	8001bea <xTaskCreate>
	  xTaskCreate(Welcome, "WelcomeTask", 300, NULL, 3, NULL);
 80009f4:	2300      	movs	r3, #0
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	2303      	movs	r3, #3
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2300      	movs	r3, #0
 80009fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a02:	490e      	ldr	r1, [pc, #56]	; (8000a3c <main+0x124>)
 8000a04:	480e      	ldr	r0, [pc, #56]	; (8000a40 <main+0x128>)
 8000a06:	f001 f8f0 	bl	8001bea <xTaskCreate>

	  vTaskStartScheduler();
 8000a0a:	f001 fa39 	bl	8001e80 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <main+0xf6>
 8000a10:	00000000 	.word	0x00000000
 8000a14:	40f86a00 	.word	0x40f86a00
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010800 	.word	0x40010800
 8000a20:	2000284c 	.word	0x2000284c
 8000a24:	20000000 	.word	0x20000000
 8000a28:	08004128 	.word	0x08004128
 8000a2c:	08004134 	.word	0x08004134
 8000a30:	3ff00000 	.word	0x3ff00000
 8000a34:	0800413c 	.word	0x0800413c
 8000a38:	08000ac1 	.word	0x08000ac1
 8000a3c:	0800414c 	.word	0x0800414c
 8000a40:	08000a45 	.word	0x08000a45

08000a44 <Welcome>:
  /* USER CODE END 3 */
  return 0;
}

void Welcome(void *pvParameter)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(Mutex, portMAX_DELAY);
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <Welcome+0x68>)
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	2300      	movs	r3, #0
 8000a52:	f04f 32ff 	mov.w	r2, #4294967295
 8000a56:	2100      	movs	r1, #0
 8000a58:	f000 fb90 	bl	800117c <xQueueGenericReceive>
		SSD1306_Clear();
 8000a5c:	f000 ff99 	bl	8001992 <SSD1306_Clear>
		GPIOA->ODR |=(1<<1);
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <Welcome+0x6c>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <Welcome+0x6c>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	60d3      	str	r3, [r2, #12]

		SSD1306_GotoXY (0,0);
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 fed4 	bl	800181c <SSD1306_GotoXY>
		SSD1306_Puts ("Mohamed", &Font_11x18, 1);
 8000a74:	2201      	movs	r2, #1
 8000a76:	490f      	ldr	r1, [pc, #60]	; (8000ab4 <Welcome+0x70>)
 8000a78:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <Welcome+0x74>)
 8000a7a:	f000 ff65 	bl	8001948 <SSD1306_Puts>
		SSD1306_GotoXY (0, 30);
 8000a7e:	211e      	movs	r1, #30
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 fecb 	bl	800181c <SSD1306_GotoXY>
		SSD1306_Puts ("Abdallah", &Font_11x18, 1);
 8000a86:	2201      	movs	r2, #1
 8000a88:	490a      	ldr	r1, [pc, #40]	; (8000ab4 <Welcome+0x70>)
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <Welcome+0x78>)
 8000a8c:	f000 ff5c 	bl	8001948 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000a90:	f000 fe20 	bl	80016d4 <SSD1306_UpdateScreen>
//		HAL_Delay (1000);
		vTaskDelay(300/portTICK_PERIOD_MS);
 8000a94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a98:	f001 f9ce 	bl	8001e38 <vTaskDelay>

		xSemaphoreGive(Mutex);
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <Welcome+0x68>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f000 fabf 	bl	8001028 <xQueueGenericSend>
		xSemaphoreTake(Mutex, portMAX_DELAY);
 8000aaa:	e7cf      	b.n	8000a4c <Welcome+0x8>
 8000aac:	2000284c 	.word	0x2000284c
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	08004158 	.word	0x08004158
 8000abc:	08004160 	.word	0x08004160

08000ac0 <TempSensor>:
	}
}

void TempSensor(void *pvParameter)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
		xSemaphoreTake(Mutex, portMAX_DELAY);
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <TempSensor+0x68>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	2300      	movs	r3, #0
 8000ace:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	f000 fb52 	bl	800117c <xQueueGenericReceive>
		SSD1306_Clear();
 8000ad8:	f000 ff5b 	bl	8001992 <SSD1306_Clear>
		GPIOA->ODR &=~(1<<1);
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <TempSensor+0x6c>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <TempSensor+0x6c>)
 8000ae2:	f023 0302 	bic.w	r3, r3, #2
 8000ae6:	60d3      	str	r3, [r2, #12]
		SSD1306_GotoXY (0,0);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 fe96 	bl	800181c <SSD1306_GotoXY>
		SSD1306_Puts ("Temp", &Font_11x18, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	490f      	ldr	r1, [pc, #60]	; (8000b30 <TempSensor+0x70>)
 8000af4:	480f      	ldr	r0, [pc, #60]	; (8000b34 <TempSensor+0x74>)
 8000af6:	f000 ff27 	bl	8001948 <SSD1306_Puts>
		SSD1306_GotoXY (0, 30);
 8000afa:	211e      	movs	r1, #30
 8000afc:	2000      	movs	r0, #0
 8000afe:	f000 fe8d 	bl	800181c <SSD1306_GotoXY>
		SSD1306_Puts ("IS : ", &Font_11x18, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	490a      	ldr	r1, [pc, #40]	; (8000b30 <TempSensor+0x70>)
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <TempSensor+0x78>)
 8000b08:	f000 ff1e 	bl	8001948 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000b0c:	f000 fde2 	bl	80016d4 <SSD1306_UpdateScreen>
//		HAL_Delay (1000);
		vTaskDelay(100/portTICK_PERIOD_MS);
 8000b10:	2064      	movs	r0, #100	; 0x64
 8000b12:	f001 f991 	bl	8001e38 <vTaskDelay>
		xSemaphoreGive(Mutex);
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <TempSensor+0x68>)
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f000 fa82 	bl	8001028 <xQueueGenericSend>
		while(1);
 8000b24:	e7fe      	b.n	8000b24 <TempSensor+0x64>
 8000b26:	bf00      	nop
 8000b28:	2000284c 	.word	0x2000284c
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	20000000 	.word	0x20000000
 8000b34:	0800416c 	.word	0x0800416c
 8000b38:	08004174 	.word	0x08004174

08000b3c <MX_I2C1_Init>:
}


static void MX_I2C1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <MX_I2C1_Init+0x54>)
 8000b44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_I2C1_Init+0x58>)
 8000b4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b7a:	f002 f911 	bl	8002da0 <HAL_I2C_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b84:	f000 f865 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20002850 	.word	0x20002850
 8000b90:	40005400 	.word	0x40005400
 8000b94:	00061a80 	.word	0x00061a80

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_GPIO_Init+0x40>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <MX_GPIO_Init+0x40>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6193      	str	r3, [r2, #24]
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_GPIO_Init+0x40>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_GPIO_Init+0x40>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <MX_GPIO_Init+0x40>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	6193      	str	r3, [r2, #24]
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <MX_GPIO_Init+0x40>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	40021000 	.word	0x40021000

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b090      	sub	sp, #64	; 0x40
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	2228      	movs	r2, #40	; 0x28
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 fa56 	bl	800409c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c06:	2310      	movs	r3, #16
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	f107 0318 	add.w	r3, r7, #24
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 fe3c 	bl	8003890 <HAL_RCC_OscConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c1e:	f000 f818 	bl	8000c52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c22:	230f      	movs	r3, #15
 8000c24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f003 f8aa 	bl	8003d94 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c46:	f000 f804 	bl	8000c52 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3740      	adds	r7, #64	; 0x40
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c56:	b672      	cpsid	i
}
 8000c58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <Error_Handler+0x8>

08000c5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3b04      	subs	r3, #4
 8000c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	f023 0201 	bic.w	r2, r3, #1
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3b04      	subs	r3, #4
 8000c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000c8c:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <pxPortInitialiseStack+0x54>)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3b14      	subs	r3, #20
 8000c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	3b20      	subs	r3, #32
 8000ca2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	08000cb5 	.word	0x08000cb5

08000cb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000cba:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000cbe:	f383 8811 	msr	BASEPRI, r3
 8000cc2:	f3bf 8f6f 	isb	sy
 8000cc6:	f3bf 8f4f 	dsb	sy
 8000cca:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8000ccc:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 8000cce:	e7fe      	b.n	8000cce <prvTaskExitError+0x1a>

08000cd0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <pxCurrentTCBConst2>)
 8000cd2:	6819      	ldr	r1, [r3, #0]
 8000cd4:	6808      	ldr	r0, [r1, #0]
 8000cd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000cda:	f380 8809 	msr	PSP, r0
 8000cde:	f3bf 8f6f 	isb	sy
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	f380 8811 	msr	BASEPRI, r0
 8000cea:	f04e 0e0d 	orr.w	lr, lr, #13
 8000cee:	4770      	bx	lr

08000cf0 <pxCurrentTCBConst2>:
 8000cf0:	20002cac 	.word	0x20002cac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop

08000cf8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000cf8:	4806      	ldr	r0, [pc, #24]	; (8000d14 <prvPortStartFirstTask+0x1c>)
 8000cfa:	6800      	ldr	r0, [r0, #0]
 8000cfc:	6800      	ldr	r0, [r0, #0]
 8000cfe:	f380 8808 	msr	MSP, r0
 8000d02:	b662      	cpsie	i
 8000d04:	b661      	cpsie	f
 8000d06:	f3bf 8f4f 	dsb	sy
 8000d0a:	f3bf 8f6f 	isb	sy
 8000d0e:	df00      	svc	0
 8000d10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000d12:	bf00      	nop
 8000d14:	e000ed08 	.word	0xe000ed08

08000d18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <xPortStartScheduler+0x34>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <xPortStartScheduler+0x34>)
 8000d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000d26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <xPortStartScheduler+0x34>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <xPortStartScheduler+0x34>)
 8000d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000d32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000d34:	f000 f88a 	bl	8000e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <xPortStartScheduler+0x38>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000d3e:	f7ff ffdb 	bl	8000cf8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8000d42:	f7ff ffb7 	bl	8000cb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	e000ed20 	.word	0xe000ed20
 8000d50:	2000000c 	.word	0x2000000c

08000d54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
	__asm volatile
 8000d5a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000d5e:	f383 8811 	msr	BASEPRI, r3
 8000d62:	f3bf 8f6f 	isb	sy
 8000d66:	f3bf 8f4f 	dsb	sy
 8000d6a:	607b      	str	r3, [r7, #4]
}
 8000d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <vPortEnterCritical+0x30>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	4a03      	ldr	r2, [pc, #12]	; (8000d84 <vPortEnterCritical+0x30>)
 8000d76:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	2000000c 	.word	0x2000000c

08000d88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <vPortExitCritical+0x30>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <vPortExitCritical+0x30>)
 8000d96:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <vPortExitCritical+0x30>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d105      	bne.n	8000dac <vPortExitCritical+0x24>
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 8000daa:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2000000c 	.word	0x2000000c
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000dc0:	f3ef 8009 	mrs	r0, PSP
 8000dc4:	f3bf 8f6f 	isb	sy
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <pxCurrentTCBConst>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000dd0:	6010      	str	r0, [r2, #0]
 8000dd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000dd6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8000dda:	f380 8811 	msr	BASEPRI, r0
 8000dde:	f001 f9cf 	bl	8002180 <vTaskSwitchContext>
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	f380 8811 	msr	BASEPRI, r0
 8000dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000dee:	6819      	ldr	r1, [r3, #0]
 8000df0:	6808      	ldr	r0, [r1, #0]
 8000df2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000df6:	f380 8809 	msr	PSP, r0
 8000dfa:	f3bf 8f6f 	isb	sy
 8000dfe:	4770      	bx	lr

08000e00 <pxCurrentTCBConst>:
 8000e00:	20002cac 	.word	0x20002cac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop

08000e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8000e0e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000e12:	f383 8811 	msr	BASEPRI, r3
 8000e16:	f3bf 8f6f 	isb	sy
 8000e1a:	f3bf 8f4f 	dsb	sy
 8000e1e:	607b      	str	r3, [r7, #4]
}
 8000e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000e22:	f001 f901 	bl	8002028 <xTaskIncrementTick>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SysTick_Handler+0x40>)
 8000e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	2300      	movs	r3, #0
 8000e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	f383 8811 	msr	BASEPRI, r3
}
 8000e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	e000ed04 	.word	0xe000ed04

08000e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <vPortSetupTimerInterrupt+0x1c>)
 8000e52:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e56:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <vPortSetupTimerInterrupt+0x20>)
 8000e5a:	2207      	movs	r2, #7
 8000e5c:	601a      	str	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e014 	.word	0xe000e014
 8000e6c:	e000e010 	.word	0xe000e010

08000e70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8000e7e:	f7ff ff69 	bl	8000d54 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e8a:	68f9      	ldr	r1, [r7, #12]
 8000e8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000e8e:	fb01 f303 	mul.w	r3, r1, r3
 8000e92:	441a      	add	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	68f9      	ldr	r1, [r7, #12]
 8000eb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000eb4:	fb01 f303 	mul.w	r3, r1, r3
 8000eb8:	441a      	add	r2, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	22ff      	movs	r2, #255	; 0xff
 8000ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	22ff      	movs	r2, #255	; 0xff
 8000eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d114      	bne.n	8000efe <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d01a      	beq.n	8000f12 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3310      	adds	r3, #16
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 f9a9 	bl	8002238 <xTaskRemoveFromEventList>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d012      	beq.n	8000f12 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <xQueueGenericReset+0xb0>)
 8000eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	f3bf 8f4f 	dsb	sy
 8000ef8:	f3bf 8f6f 	isb	sy
 8000efc:	e009      	b.n	8000f12 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3310      	adds	r3, #16
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fc58 	bl	80007b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3324      	adds	r3, #36	; 0x24
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fc53 	bl	80007b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000f12:	f7ff ff39 	bl	8000d88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	e000ed04 	.word	0xe000ed04

08000f24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	e004      	b.n	8000f48 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	fb02 f303 	mul.w	r3, r2, r3
 8000f46:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	3350      	adds	r3, #80	; 0x50
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fb43 	bl	80005d8 <pvPortMalloc>
 8000f52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00b      	beq.n	8000f72 <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	3350      	adds	r3, #80	; 0x50
 8000f5e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000f60:	79fa      	ldrb	r2, [r7, #7]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	4613      	mov	r3, r2
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f000 f805 	bl	8000f7c <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000f72:	69bb      	ldr	r3, [r7, #24]
	}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3720      	adds	r7, #32
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d103      	bne.n	8000f98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	e002      	b.n	8000f9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000faa:	2101      	movs	r1, #1
 8000fac:	69b8      	ldr	r0, [r7, #24]
 8000fae:	f7ff ff5f 	bl	8000e70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	78fa      	ldrb	r2, [r7, #3]
 8000fb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00e      	beq.n	8000fee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 f81d 	bl	8001028 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001000:	2301      	movs	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	461a      	mov	r2, r3
 800100c:	6939      	ldr	r1, [r7, #16]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff88 	bl	8000f24 <xQueueGenericCreate>
 8001014:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff ffd3 	bl	8000fc2 <prvInitialiseMutex>

		return pxNewQueue;
 800101c:	68fb      	ldr	r3, [r7, #12]
	}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800103e:	f7ff fe89 	bl	8000d54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104a:	429a      	cmp	r2, r3
 800104c:	d302      	bcc.n	8001054 <xQueueGenericSend+0x2c>
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d129      	bne.n	80010a8 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	68b9      	ldr	r1, [r7, #8]
 8001058:	6a38      	ldr	r0, [r7, #32]
 800105a:	f000 f967 	bl	800132c <prvCopyDataToQueue>
 800105e:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	2b00      	cmp	r3, #0
 8001066:	d010      	beq.n	800108a <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	3324      	adds	r3, #36	; 0x24
 800106c:	4618      	mov	r0, r3
 800106e:	f001 f8e3 	bl	8002238 <xTaskRemoveFromEventList>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d013      	beq.n	80010a0 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001078:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <xQueueGenericSend+0x150>)
 800107a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	f3bf 8f4f 	dsb	sy
 8001084:	f3bf 8f6f 	isb	sy
 8001088:	e00a      	b.n	80010a0 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d007      	beq.n	80010a0 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001090:	4b39      	ldr	r3, [pc, #228]	; (8001178 <xQueueGenericSend+0x150>)
 8001092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	f3bf 8f4f 	dsb	sy
 800109c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80010a0:	f7ff fe72 	bl	8000d88 <vPortExitCritical>
				return pdPASS;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e063      	b.n	8001170 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d103      	bne.n	80010b6 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80010ae:	f7ff fe6b 	bl	8000d88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e05c      	b.n	8001170 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d106      	bne.n	80010ca <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 f90d 	bl	80022e0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80010c6:	2301      	movs	r3, #1
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80010ca:	f7ff fe5d 	bl	8000d88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80010ce:	f000 ff0f 	bl	8001ef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80010d2:	f7ff fe3f 	bl	8000d54 <vPortEnterCritical>
 80010d6:	6a3b      	ldr	r3, [r7, #32]
 80010d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e2:	d103      	bne.n	80010ec <xQueueGenericSend+0xc4>
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d103      	bne.n	8001102 <xQueueGenericSend+0xda>
 80010fa:	6a3b      	ldr	r3, [r7, #32]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001102:	f7ff fe41 	bl	8000d88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001106:	1d3a      	adds	r2, r7, #4
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f001 f8fc 	bl	800230c <xTaskCheckForTimeOut>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d124      	bne.n	8001164 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800111a:	6a38      	ldr	r0, [r7, #32]
 800111c:	f000 f9fe 	bl	800151c <prvIsQueueFull>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d018      	beq.n	8001158 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001126:	6a3b      	ldr	r3, [r7, #32]
 8001128:	3310      	adds	r3, #16
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f001 f86c 	bl	800220c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001134:	6a38      	ldr	r0, [r7, #32]
 8001136:	f000 f989 	bl	800144c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800113a:	f000 fee7 	bl	8001f0c <xTaskResumeAll>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	f47f af7c 	bne.w	800103e <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <xQueueGenericSend+0x150>)
 8001148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	f3bf 8f4f 	dsb	sy
 8001152:	f3bf 8f6f 	isb	sy
 8001156:	e772      	b.n	800103e <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001158:	6a38      	ldr	r0, [r7, #32]
 800115a:	f000 f977 	bl	800144c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800115e:	f000 fed5 	bl	8001f0c <xTaskResumeAll>
 8001162:	e76c      	b.n	800103e <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001164:	6a38      	ldr	r0, [r7, #32]
 8001166:	f000 f971 	bl	800144c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800116a:	f000 fecf 	bl	8001f0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800116e:	2300      	movs	r3, #0
		}
	}
}
 8001170:	4618      	mov	r0, r3
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	e000ed04 	.word	0xe000ed04

0800117c <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001192:	f7ff fddf 	bl	8000d54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d046      	beq.n	8001230 <xQueueGenericReceive+0xb4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6a38      	ldr	r0, [r7, #32]
 80011ac:	f000 f928 	bl	8001400 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d121      	bne.n	80011fa <xQueueGenericReceive+0x7e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	1e5a      	subs	r2, r3, #1
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d104      	bne.n	80011d0 <xQueueGenericReceive+0x54>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80011c6:	f001 fa93 	bl	80026f0 <pvTaskIncrementMutexHeldCount>
 80011ca:	4602      	mov	r2, r0
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d027      	beq.n	8001228 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	3310      	adds	r3, #16
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 f82b 	bl	8002238 <xTaskRemoveFromEventList>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d01f      	beq.n	8001228 <xQueueGenericReceive+0xac>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80011e8:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <xQueueGenericReceive+0x1ac>)
 80011ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	f3bf 8f4f 	dsb	sy
 80011f4:	f3bf 8f6f 	isb	sy
 80011f8:	e016      	b.n	8001228 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00f      	beq.n	8001228 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	3324      	adds	r3, #36	; 0x24
 800120c:	4618      	mov	r0, r3
 800120e:	f001 f813 	bl	8002238 <xTaskRemoveFromEventList>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d007      	beq.n	8001228 <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001218:	4b43      	ldr	r3, [pc, #268]	; (8001328 <xQueueGenericReceive+0x1ac>)
 800121a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	f3bf 8f4f 	dsb	sy
 8001224:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001228:	f7ff fdae 	bl	8000d88 <vPortExitCritical>
				return pdPASS;
 800122c:	2301      	movs	r3, #1
 800122e:	e077      	b.n	8001320 <xQueueGenericReceive+0x1a4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d103      	bne.n	800123e <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001236:	f7ff fda7 	bl	8000d88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800123a:	2300      	movs	r3, #0
 800123c:	e070      	b.n	8001320 <xQueueGenericReceive+0x1a4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	2b00      	cmp	r3, #0
 8001242:	d106      	bne.n	8001252 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4618      	mov	r0, r3
 800124a:	f001 f849 	bl	80022e0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800124e:	2301      	movs	r3, #1
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001252:	f7ff fd99 	bl	8000d88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001256:	f000 fe4b 	bl	8001ef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800125a:	f7ff fd7b 	bl	8000d54 <vPortEnterCritical>
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001264:	b25b      	sxtb	r3, r3
 8001266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126a:	d103      	bne.n	8001274 <xQueueGenericReceive+0xf8>
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800127a:	b25b      	sxtb	r3, r3
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d103      	bne.n	800128a <xQueueGenericReceive+0x10e>
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800128a:	f7ff fd7d 	bl	8000d88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800128e:	1d3a      	adds	r2, r7, #4
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f001 f838 	bl	800230c <xTaskCheckForTimeOut>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d131      	bne.n	8001306 <xQueueGenericReceive+0x18a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012a2:	6a38      	ldr	r0, [r7, #32]
 80012a4:	f000 f924 	bl	80014f0 <prvIsQueueEmpty>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d025      	beq.n	80012fa <xQueueGenericReceive+0x17e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d108      	bne.n	80012c8 <xQueueGenericReceive+0x14c>
					{
						taskENTER_CRITICAL();
 80012b6:	f7ff fd4d 	bl	8000d54 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 f93c 	bl	800253c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80012c4:	f7ff fd60 	bl	8000d88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	3324      	adds	r3, #36	; 0x24
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 ff9b 	bl	800220c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80012d6:	6a38      	ldr	r0, [r7, #32]
 80012d8:	f000 f8b8 	bl	800144c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80012dc:	f000 fe16 	bl	8001f0c <xTaskResumeAll>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f47f af55 	bne.w	8001192 <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <xQueueGenericReceive+0x1ac>)
 80012ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	f3bf 8f4f 	dsb	sy
 80012f4:	f3bf 8f6f 	isb	sy
 80012f8:	e74b      	b.n	8001192 <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80012fa:	6a38      	ldr	r0, [r7, #32]
 80012fc:	f000 f8a6 	bl	800144c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001300:	f000 fe04 	bl	8001f0c <xTaskResumeAll>
 8001304:	e745      	b.n	8001192 <xQueueGenericReceive+0x16>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001306:	6a38      	ldr	r0, [r7, #32]
 8001308:	f000 f8a0 	bl	800144c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800130c:	f000 fdfe 	bl	8001f0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001310:	6a38      	ldr	r0, [r7, #32]
 8001312:	f000 f8ed 	bl	80014f0 <prvIsQueueEmpty>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	f43f af3a 	beq.w	8001192 <xQueueGenericReceive+0x16>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800131e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001320:	4618      	mov	r0, r3
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	e000ed04 	.word	0xe000ed04

0800132c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001340:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10d      	bne.n	8001366 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d14d      	bne.n	80013ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4618      	mov	r0, r3
 8001358:	f001 f966 	bl	8002628 <xTaskPriorityDisinherit>
 800135c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	e043      	b.n	80013ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d119      	bne.n	80013a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6898      	ldr	r0, [r3, #8]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	461a      	mov	r2, r3
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	f002 febc 	bl	80040f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	441a      	add	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	d32b      	bcc.n	80013ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	e026      	b.n	80013ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	68d8      	ldr	r0, [r3, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	461a      	mov	r2, r3
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	f002 fea2 	bl	80040f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	425b      	negs	r3, r3
 80013ba:	441a      	add	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	425b      	negs	r3, r3
 80013d6:	441a      	add	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d105      	bne.n	80013ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80013f6:	697b      	ldr	r3, [r7, #20]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	2b00      	cmp	r3, #0
 8001410:	d018      	beq.n	8001444 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	441a      	add	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	429a      	cmp	r2, r3
 800142a:	d303      	bcc.n	8001434 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68d9      	ldr	r1, [r3, #12]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	461a      	mov	r2, r3
 800143e:	6838      	ldr	r0, [r7, #0]
 8001440:	f002 fe58 	bl	80040f4 <memcpy>
	}
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001454:	f7ff fc7e 	bl	8000d54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800145e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001460:	e011      	b.n	8001486 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001466:	2b00      	cmp	r3, #0
 8001468:	d012      	beq.n	8001490 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3324      	adds	r3, #36	; 0x24
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fee2 	bl	8002238 <xTaskRemoveFromEventList>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800147a:	f000 ff8b 	bl	8002394 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	3b01      	subs	r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	2b00      	cmp	r3, #0
 800148c:	dce9      	bgt.n	8001462 <prvUnlockQueue+0x16>
 800148e:	e000      	b.n	8001492 <prvUnlockQueue+0x46>
					break;
 8001490:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	22ff      	movs	r2, #255	; 0xff
 8001496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800149a:	f7ff fc75 	bl	8000d88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800149e:	f7ff fc59 	bl	8000d54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80014aa:	e011      	b.n	80014d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d012      	beq.n	80014da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3310      	adds	r3, #16
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 febd 	bl	8002238 <xTaskRemoveFromEventList>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80014c4:	f000 ff66 	bl	8002394 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80014d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dce9      	bgt.n	80014ac <prvUnlockQueue+0x60>
 80014d8:	e000      	b.n	80014dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80014da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	22ff      	movs	r2, #255	; 0xff
 80014e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80014e4:	f7ff fc50 	bl	8000d88 <vPortExitCritical>
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80014f8:	f7ff fc2c 	bl	8000d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001504:	2301      	movs	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e001      	b.n	800150e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800150e:	f7ff fc3b 	bl	8000d88 <vPortExitCritical>

	return xReturn;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001524:	f7ff fc16 	bl	8000d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001530:	429a      	cmp	r2, r3
 8001532:	d102      	bne.n	800153a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001534:	2301      	movs	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	e001      	b.n	800153e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800153e:	f7ff fc23 	bl	8000d88 <vPortExitCritical>

	return xReturn;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001552:	f000 fa27 	bl	80019a4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001556:	f644 6320 	movw	r3, #20000	; 0x4e20
 800155a:	2201      	movs	r2, #1
 800155c:	2178      	movs	r1, #120	; 0x78
 800155e:	485b      	ldr	r0, [pc, #364]	; (80016cc <SSD1306_Init+0x180>)
 8001560:	f001 fe60 	bl	8003224 <HAL_I2C_IsDeviceReady>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800156a:	2300      	movs	r3, #0
 800156c:	e0a9      	b.n	80016c2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800156e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001572:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001574:	e002      	b.n	800157c <SSD1306_Init+0x30>
		p--;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3b01      	subs	r3, #1
 800157a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f9      	bne.n	8001576 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001582:	22ae      	movs	r2, #174	; 0xae
 8001584:	2100      	movs	r1, #0
 8001586:	2078      	movs	r0, #120	; 0x78
 8001588:	f000 fa86 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800158c:	2220      	movs	r2, #32
 800158e:	2100      	movs	r1, #0
 8001590:	2078      	movs	r0, #120	; 0x78
 8001592:	f000 fa81 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001596:	2210      	movs	r2, #16
 8001598:	2100      	movs	r1, #0
 800159a:	2078      	movs	r0, #120	; 0x78
 800159c:	f000 fa7c 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015a0:	22b0      	movs	r2, #176	; 0xb0
 80015a2:	2100      	movs	r1, #0
 80015a4:	2078      	movs	r0, #120	; 0x78
 80015a6:	f000 fa77 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80015aa:	22c8      	movs	r2, #200	; 0xc8
 80015ac:	2100      	movs	r1, #0
 80015ae:	2078      	movs	r0, #120	; 0x78
 80015b0:	f000 fa72 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2078      	movs	r0, #120	; 0x78
 80015ba:	f000 fa6d 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80015be:	2210      	movs	r2, #16
 80015c0:	2100      	movs	r1, #0
 80015c2:	2078      	movs	r0, #120	; 0x78
 80015c4:	f000 fa68 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80015c8:	2240      	movs	r2, #64	; 0x40
 80015ca:	2100      	movs	r1, #0
 80015cc:	2078      	movs	r0, #120	; 0x78
 80015ce:	f000 fa63 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80015d2:	2281      	movs	r2, #129	; 0x81
 80015d4:	2100      	movs	r1, #0
 80015d6:	2078      	movs	r0, #120	; 0x78
 80015d8:	f000 fa5e 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80015dc:	22ff      	movs	r2, #255	; 0xff
 80015de:	2100      	movs	r1, #0
 80015e0:	2078      	movs	r0, #120	; 0x78
 80015e2:	f000 fa59 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80015e6:	22a1      	movs	r2, #161	; 0xa1
 80015e8:	2100      	movs	r1, #0
 80015ea:	2078      	movs	r0, #120	; 0x78
 80015ec:	f000 fa54 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80015f0:	22a6      	movs	r2, #166	; 0xa6
 80015f2:	2100      	movs	r1, #0
 80015f4:	2078      	movs	r0, #120	; 0x78
 80015f6:	f000 fa4f 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80015fa:	22a8      	movs	r2, #168	; 0xa8
 80015fc:	2100      	movs	r1, #0
 80015fe:	2078      	movs	r0, #120	; 0x78
 8001600:	f000 fa4a 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001604:	223f      	movs	r2, #63	; 0x3f
 8001606:	2100      	movs	r1, #0
 8001608:	2078      	movs	r0, #120	; 0x78
 800160a:	f000 fa45 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800160e:	22a4      	movs	r2, #164	; 0xa4
 8001610:	2100      	movs	r1, #0
 8001612:	2078      	movs	r0, #120	; 0x78
 8001614:	f000 fa40 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001618:	22d3      	movs	r2, #211	; 0xd3
 800161a:	2100      	movs	r1, #0
 800161c:	2078      	movs	r0, #120	; 0x78
 800161e:	f000 fa3b 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2078      	movs	r0, #120	; 0x78
 8001628:	f000 fa36 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800162c:	22d5      	movs	r2, #213	; 0xd5
 800162e:	2100      	movs	r1, #0
 8001630:	2078      	movs	r0, #120	; 0x78
 8001632:	f000 fa31 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001636:	22f0      	movs	r2, #240	; 0xf0
 8001638:	2100      	movs	r1, #0
 800163a:	2078      	movs	r0, #120	; 0x78
 800163c:	f000 fa2c 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001640:	22d9      	movs	r2, #217	; 0xd9
 8001642:	2100      	movs	r1, #0
 8001644:	2078      	movs	r0, #120	; 0x78
 8001646:	f000 fa27 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800164a:	2222      	movs	r2, #34	; 0x22
 800164c:	2100      	movs	r1, #0
 800164e:	2078      	movs	r0, #120	; 0x78
 8001650:	f000 fa22 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001654:	22da      	movs	r2, #218	; 0xda
 8001656:	2100      	movs	r1, #0
 8001658:	2078      	movs	r0, #120	; 0x78
 800165a:	f000 fa1d 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800165e:	2212      	movs	r2, #18
 8001660:	2100      	movs	r1, #0
 8001662:	2078      	movs	r0, #120	; 0x78
 8001664:	f000 fa18 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001668:	22db      	movs	r2, #219	; 0xdb
 800166a:	2100      	movs	r1, #0
 800166c:	2078      	movs	r0, #120	; 0x78
 800166e:	f000 fa13 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001672:	2220      	movs	r2, #32
 8001674:	2100      	movs	r1, #0
 8001676:	2078      	movs	r0, #120	; 0x78
 8001678:	f000 fa0e 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800167c:	228d      	movs	r2, #141	; 0x8d
 800167e:	2100      	movs	r1, #0
 8001680:	2078      	movs	r0, #120	; 0x78
 8001682:	f000 fa09 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001686:	2214      	movs	r2, #20
 8001688:	2100      	movs	r1, #0
 800168a:	2078      	movs	r0, #120	; 0x78
 800168c:	f000 fa04 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001690:	22af      	movs	r2, #175	; 0xaf
 8001692:	2100      	movs	r1, #0
 8001694:	2078      	movs	r0, #120	; 0x78
 8001696:	f000 f9ff 	bl	8001a98 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800169a:	222e      	movs	r2, #46	; 0x2e
 800169c:	2100      	movs	r1, #0
 800169e:	2078      	movs	r0, #120	; 0x78
 80016a0:	f000 f9fa 	bl	8001a98 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 f843 	bl	8001730 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80016aa:	f000 f813 	bl	80016d4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <SSD1306_Init+0x184>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <SSD1306_Init+0x184>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SSD1306_Init+0x184>)
 80016bc:	2201      	movs	r2, #1
 80016be:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80016c0:	2301      	movs	r3, #1
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20002850 	.word	0x20002850
 80016d0:	20002ca4 	.word	0x20002ca4

080016d4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80016da:	2300      	movs	r3, #0
 80016dc:	71fb      	strb	r3, [r7, #7]
 80016de:	e01d      	b.n	800171c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	3b50      	subs	r3, #80	; 0x50
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	2100      	movs	r1, #0
 80016ea:	2078      	movs	r0, #120	; 0x78
 80016ec:	f000 f9d4 	bl	8001a98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2078      	movs	r0, #120	; 0x78
 80016f6:	f000 f9cf 	bl	8001a98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80016fa:	2210      	movs	r2, #16
 80016fc:	2100      	movs	r1, #0
 80016fe:	2078      	movs	r0, #120	; 0x78
 8001700:	f000 f9ca 	bl	8001a98 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	01db      	lsls	r3, r3, #7
 8001708:	4a08      	ldr	r2, [pc, #32]	; (800172c <SSD1306_UpdateScreen+0x58>)
 800170a:	441a      	add	r2, r3
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	2140      	movs	r1, #64	; 0x40
 8001710:	2078      	movs	r0, #120	; 0x78
 8001712:	f000 f95b 	bl	80019cc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	3301      	adds	r3, #1
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2b07      	cmp	r3, #7
 8001720:	d9de      	bls.n	80016e0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200028a4 	.word	0x200028a4

08001730 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <SSD1306_Fill+0x14>
 8001740:	2300      	movs	r3, #0
 8001742:	e000      	b.n	8001746 <SSD1306_Fill+0x16>
 8001744:	23ff      	movs	r3, #255	; 0xff
 8001746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800174a:	4619      	mov	r1, r3
 800174c:	4803      	ldr	r0, [pc, #12]	; (800175c <SSD1306_Fill+0x2c>)
 800174e:	f002 fca5 	bl	800409c <memset>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200028a4 	.word	0x200028a4

08001760 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
 800176a:	460b      	mov	r3, r1
 800176c:	80bb      	strh	r3, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	70fb      	strb	r3, [r7, #3]
	if (
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	2b7f      	cmp	r3, #127	; 0x7f
 8001776:	d848      	bhi.n	800180a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001778:	88bb      	ldrh	r3, [r7, #4]
 800177a:	2b3f      	cmp	r3, #63	; 0x3f
 800177c:	d845      	bhi.n	800180a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <SSD1306_DrawPixel+0xb4>)
 8001780:	791b      	ldrb	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d11a      	bne.n	80017d0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800179a:	88fa      	ldrh	r2, [r7, #6]
 800179c:	88bb      	ldrh	r3, [r7, #4]
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	b298      	uxth	r0, r3
 80017a2:	4603      	mov	r3, r0
 80017a4:	01db      	lsls	r3, r3, #7
 80017a6:	4413      	add	r3, r2
 80017a8:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <SSD1306_DrawPixel+0xb8>)
 80017aa:	5cd3      	ldrb	r3, [r2, r3]
 80017ac:	b25a      	sxtb	r2, r3
 80017ae:	88bb      	ldrh	r3, [r7, #4]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	2101      	movs	r1, #1
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	4313      	orrs	r3, r2
 80017be:	b259      	sxtb	r1, r3
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	4603      	mov	r3, r0
 80017c4:	01db      	lsls	r3, r3, #7
 80017c6:	4413      	add	r3, r2
 80017c8:	b2c9      	uxtb	r1, r1
 80017ca:	4a13      	ldr	r2, [pc, #76]	; (8001818 <SSD1306_DrawPixel+0xb8>)
 80017cc:	54d1      	strb	r1, [r2, r3]
 80017ce:	e01d      	b.n	800180c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017d0:	88fa      	ldrh	r2, [r7, #6]
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	08db      	lsrs	r3, r3, #3
 80017d6:	b298      	uxth	r0, r3
 80017d8:	4603      	mov	r3, r0
 80017da:	01db      	lsls	r3, r3, #7
 80017dc:	4413      	add	r3, r2
 80017de:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <SSD1306_DrawPixel+0xb8>)
 80017e0:	5cd3      	ldrb	r3, [r2, r3]
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	88bb      	ldrh	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	4013      	ands	r3, r2
 80017f8:	b259      	sxtb	r1, r3
 80017fa:	88fa      	ldrh	r2, [r7, #6]
 80017fc:	4603      	mov	r3, r0
 80017fe:	01db      	lsls	r3, r3, #7
 8001800:	4413      	add	r3, r2
 8001802:	b2c9      	uxtb	r1, r1
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <SSD1306_DrawPixel+0xb8>)
 8001806:	54d1      	strb	r1, [r2, r3]
 8001808:	e000      	b.n	800180c <SSD1306_DrawPixel+0xac>
		return;
 800180a:	bf00      	nop
	}
}
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	20002ca4 	.word	0x20002ca4
 8001818:	200028a4 	.word	0x200028a4

0800181c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	460a      	mov	r2, r1
 8001826:	80fb      	strh	r3, [r7, #6]
 8001828:	4613      	mov	r3, r2
 800182a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800182c:	4a05      	ldr	r2, [pc, #20]	; (8001844 <SSD1306_GotoXY+0x28>)
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001832:	4a04      	ldr	r2, [pc, #16]	; (8001844 <SSD1306_GotoXY+0x28>)
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	8053      	strh	r3, [r2, #2]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20002ca4 	.word	0x20002ca4

08001848 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	4613      	mov	r3, r2
 8001856:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001858:	4b3a      	ldr	r3, [pc, #232]	; (8001944 <SSD1306_Putc+0xfc>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
	if (
 8001864:	2b7f      	cmp	r3, #127	; 0x7f
 8001866:	dc07      	bgt.n	8001878 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001868:	4b36      	ldr	r3, [pc, #216]	; (8001944 <SSD1306_Putc+0xfc>)
 800186a:	885b      	ldrh	r3, [r3, #2]
 800186c:	461a      	mov	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	785b      	ldrb	r3, [r3, #1]
 8001872:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001874:	2b3f      	cmp	r3, #63	; 0x3f
 8001876:	dd01      	ble.n	800187c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001878:	2300      	movs	r3, #0
 800187a:	e05e      	b.n	800193a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e04b      	b.n	800191a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	3b20      	subs	r3, #32
 800188a:	6839      	ldr	r1, [r7, #0]
 800188c:	7849      	ldrb	r1, [r1, #1]
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4619      	mov	r1, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	440b      	add	r3, r1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	e030      	b.n	8001908 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d010      	beq.n	80018d8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80018b6:	4b23      	ldr	r3, [pc, #140]	; (8001944 <SSD1306_Putc+0xfc>)
 80018b8:	881a      	ldrh	r2, [r3, #0]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b298      	uxth	r0, r3
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <SSD1306_Putc+0xfc>)
 80018c4:	885a      	ldrh	r2, [r3, #2]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	79ba      	ldrb	r2, [r7, #6]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7ff ff45 	bl	8001760 <SSD1306_DrawPixel>
 80018d6:	e014      	b.n	8001902 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <SSD1306_Putc+0xfc>)
 80018da:	881a      	ldrh	r2, [r3, #0]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	b298      	uxth	r0, r3
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <SSD1306_Putc+0xfc>)
 80018e6:	885a      	ldrh	r2, [r3, #2]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	b299      	uxth	r1, r3
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	bf0c      	ite	eq
 80018f6:	2301      	moveq	r3, #1
 80018f8:	2300      	movne	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	f7ff ff2f 	bl	8001760 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	3301      	adds	r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4293      	cmp	r3, r2
 8001912:	d3c8      	bcc.n	80018a6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	785b      	ldrb	r3, [r3, #1]
 800191e:	461a      	mov	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	4293      	cmp	r3, r2
 8001924:	d3ad      	bcc.n	8001882 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <SSD1306_Putc+0xfc>)
 8001928:	881a      	ldrh	r2, [r3, #0]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4413      	add	r3, r2
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <SSD1306_Putc+0xfc>)
 8001936:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001938:	79fb      	ldrb	r3, [r7, #7]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20002ca4 	.word	0x20002ca4

08001948 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	4613      	mov	r3, r2
 8001954:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001956:	e012      	b.n	800197e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff71 	bl	8001848 <SSD1306_Putc>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d002      	beq.n	8001978 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	e008      	b.n	800198a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1e8      	bne.n	8001958 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	781b      	ldrb	r3, [r3, #0]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff feca 	bl	8001730 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800199c:	f7ff fe9a 	bl	80016d4 <SSD1306_UpdateScreen>
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <ssd1306_I2C_Init+0x24>)
 80019ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019ae:	e002      	b.n	80019b6 <ssd1306_I2C_Init+0x12>
		p--;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f9      	bne.n	80019b0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	0003d090 	.word	0x0003d090

080019cc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b0c7      	sub	sp, #284	; 0x11c
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	4604      	mov	r4, r0
 80019d4:	4608      	mov	r0, r1
 80019d6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80019da:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80019de:	600a      	str	r2, [r1, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019e6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019ea:	4622      	mov	r2, r4
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019f2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80019f6:	4602      	mov	r2, r0
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a02:	460a      	mov	r2, r1
 8001a04:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a0e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a12:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001a16:	7812      	ldrb	r2, [r2, #0]
 8001a18:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a20:	e015      	b.n	8001a4e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001a22:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a26:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a2a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	441a      	add	r2, r3
 8001a32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a36:	3301      	adds	r3, #1
 8001a38:	7811      	ldrb	r1, [r2, #0]
 8001a3a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a3e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001a42:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001a44:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a4e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a58:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001a5c:	8812      	ldrh	r2, [r2, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d8df      	bhi.n	8001a22 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001a62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a66:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	f107 020c 	add.w	r2, r7, #12
 8001a80:	200a      	movs	r0, #10
 8001a82:	9000      	str	r0, [sp, #0]
 8001a84:	4803      	ldr	r0, [pc, #12]	; (8001a94 <ssd1306_I2C_WriteMulti+0xc8>)
 8001a86:	f001 facf 	bl	8003028 <HAL_I2C_Master_Transmit>
}
 8001a8a:	bf00      	nop
 8001a8c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd90      	pop	{r4, r7, pc}
 8001a94:	20002850 	.word	0x20002850

08001a98 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	71bb      	strb	r3, [r7, #6]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001aaa:	79bb      	ldrb	r3, [r7, #6]
 8001aac:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001aae:	797b      	ldrb	r3, [r7, #5]
 8001ab0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	b299      	uxth	r1, r3
 8001ab6:	f107 020c 	add.w	r2, r7, #12
 8001aba:	230a      	movs	r3, #10
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2302      	movs	r3, #2
 8001ac0:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <ssd1306_I2C_Write+0x38>)
 8001ac2:	f001 fab1 	bl	8003028 <HAL_I2C_Master_Transmit>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20002850 	.word	0x20002850

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_MspInit+0x5c>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <HAL_MspInit+0x5c>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6193      	str	r3, [r2, #24]
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_MspInit+0x5c>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_MspInit+0x5c>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_MspInit+0x5c>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	61d3      	str	r3, [r2, #28]
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_MspInit+0x5c>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_MspInit+0x60>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_MspInit+0x60>)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40010000 	.word	0x40010000

08001b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <HAL_I2C_MspInit+0x70>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d123      	bne.n	8001ba0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_I2C_MspInit+0x74>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a13      	ldr	r2, [pc, #76]	; (8001bac <HAL_I2C_MspInit+0x74>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_I2C_MspInit+0x74>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b70:	23c0      	movs	r3, #192	; 0xc0
 8001b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b74:	2312      	movs	r3, #18
 8001b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4619      	mov	r1, r3
 8001b82:	480b      	ldr	r0, [pc, #44]	; (8001bb0 <HAL_I2C_MspInit+0x78>)
 8001b84:	f000 ff88 	bl	8002a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_I2C_MspInit+0x74>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_I2C_MspInit+0x74>)
 8001b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b92:	61d3      	str	r3, [r2, #28]
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_I2C_MspInit+0x74>)
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40005400 	.word	0x40005400
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010c00 	.word	0x40010c00

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <NMI_Handler+0x4>

08001bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b08c      	sub	sp, #48	; 0x30
 8001bee:	af04      	add	r7, sp, #16
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fcea 	bl	80005d8 <pvPortMalloc>
 8001c04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00e      	beq.n	8001c2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c0c:	205c      	movs	r0, #92	; 0x5c
 8001c0e:	f7fe fce3 	bl	80005d8 <pvPortMalloc>
 8001c12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c20:	e005      	b.n	8001c2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7fe fd66 	bl	80006f4 <vPortFree>
 8001c28:	e001      	b.n	8001c2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c34:	88fa      	ldrh	r2, [r7, #6]
 8001c36:	2300      	movs	r3, #0
 8001c38:	9303      	str	r3, [sp, #12]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	9302      	str	r3, [sp, #8]
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 f80e 	bl	8001c6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c50:	69f8      	ldr	r0, [r7, #28]
 8001c52:	f000 f883 	bl	8001d5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	e002      	b.n	8001c62 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001c62:	69bb      	ldr	r3, [r7, #24]
	}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	461a      	mov	r2, r3
 8001c84:	21a5      	movs	r1, #165	; 0xa5
 8001c86:	f002 fa09 	bl	800409c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c94:	3b01      	subs	r3, #1
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f023 0307 	bic.w	r3, r3, #7
 8001ca2:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e012      	b.n	8001cd0 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	4413      	add	r3, r2
 8001cb0:	7819      	ldrb	r1, [r3, #0]
 8001cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3334      	adds	r3, #52	; 0x34
 8001cba:	460a      	mov	r2, r1
 8001cbc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b0f      	cmp	r3, #15
 8001cd4:	d9e9      	bls.n	8001caa <prvInitialiseNewTask+0x3e>
 8001cd6:	e000      	b.n	8001cda <prvInitialiseNewTask+0x6e>
		{
			break;
 8001cd8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d901      	bls.n	8001cec <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001ce8:	2305      	movs	r3, #5
 8001cea:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	6a3a      	ldr	r2, [r7, #32]
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf4:	6a3a      	ldr	r2, [r7, #32]
 8001cf6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d00:	3304      	adds	r3, #4
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fd77 	bl	80007f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0a:	3318      	adds	r3, #24
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fd72 	bl	80007f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	f1c3 0206 	rsb	r2, r3, #6
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	68f9      	ldr	r1, [r7, #12]
 8001d3a:	6938      	ldr	r0, [r7, #16]
 8001d3c:	f7fe ff8e 	bl	8000c5c <pxPortInitialiseStack>
 8001d40:	4602      	mov	r2, r0
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001d64:	f7fe fff6 	bl	8000d54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001d68:	4b2c      	ldr	r3, [pc, #176]	; (8001e1c <prvAddNewTaskToReadyList+0xc0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	4a2b      	ldr	r2, [pc, #172]	; (8001e1c <prvAddNewTaskToReadyList+0xc0>)
 8001d70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001d72:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <prvAddNewTaskToReadyList+0xc4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001d7a:	4a29      	ldr	r2, [pc, #164]	; (8001e20 <prvAddNewTaskToReadyList+0xc4>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d80:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <prvAddNewTaskToReadyList+0xc0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d110      	bne.n	8001daa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001d88:	f000 fb28 	bl	80023dc <prvInitialiseTaskLists>
 8001d8c:	e00d      	b.n	8001daa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001d8e:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <prvAddNewTaskToReadyList+0xc8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <prvAddNewTaskToReadyList+0xc4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d802      	bhi.n	8001daa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001da4:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <prvAddNewTaskToReadyList+0xc4>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001daa:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <prvAddNewTaskToReadyList+0xcc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <prvAddNewTaskToReadyList+0xcc>)
 8001db2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <prvAddNewTaskToReadyList+0xcc>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <prvAddNewTaskToReadyList+0xd0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <prvAddNewTaskToReadyList+0xd0>)
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <prvAddNewTaskToReadyList+0xd4>)
 8001ddc:	441a      	add	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3304      	adds	r3, #4
 8001de2:	4619      	mov	r1, r3
 8001de4:	4610      	mov	r0, r2
 8001de6:	f7fe fd12 	bl	800080e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001dea:	f7fe ffcd 	bl	8000d88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <prvAddNewTaskToReadyList+0xc8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00e      	beq.n	8001e14 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <prvAddNewTaskToReadyList+0xc4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <prvAddNewTaskToReadyList+0xd8>)
 8001e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20002d98 	.word	0x20002d98
 8001e20:	20002cac 	.word	0x20002cac
 8001e24:	20002da4 	.word	0x20002da4
 8001e28:	20002db4 	.word	0x20002db4
 8001e2c:	20002da0 	.word	0x20002da0
 8001e30:	20002cb0 	.word	0x20002cb0
 8001e34:	e000ed04 	.word	0xe000ed04

08001e38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d008      	beq.n	8001e5c <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8001e4a:	f000 f851 	bl	8001ef0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e4e:	2100      	movs	r1, #0
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fc61 	bl	8002718 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001e56:	f000 f859 	bl	8001f0c <xTaskResumeAll>
 8001e5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d107      	bne.n	8001e72 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <vTaskDelay+0x44>)
 8001e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	f3bf 8f4f 	dsb	sy
 8001e6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000ed04 	.word	0xe000ed04

08001e80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <vTaskStartScheduler+0x58>)
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e94:	4911      	ldr	r1, [pc, #68]	; (8001edc <vTaskStartScheduler+0x5c>)
 8001e96:	4812      	ldr	r0, [pc, #72]	; (8001ee0 <vTaskStartScheduler+0x60>)
 8001e98:	f7ff fea7 	bl	8001bea <xTaskCreate>
 8001e9c:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d115      	bne.n	8001ed0 <vTaskStartScheduler+0x50>
	__asm volatile
 8001ea4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001ea8:	f383 8811 	msr	BASEPRI, r3
 8001eac:	f3bf 8f6f 	isb	sy
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	603b      	str	r3, [r7, #0]
}
 8001eb6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <vTaskStartScheduler+0x64>)
 8001eba:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <vTaskStartScheduler+0x68>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <vTaskStartScheduler+0x6c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001ecc:	f7fe ff24 	bl	8000d18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20002dbc 	.word	0x20002dbc
 8001edc:	0800417c 	.word	0x0800417c
 8001ee0:	080023ad 	.word	0x080023ad
 8001ee4:	20002db8 	.word	0x20002db8
 8001ee8:	20002da4 	.word	0x20002da4
 8001eec:	20002d9c 	.word	0x20002d9c

08001ef0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <vTaskSuspendAll+0x18>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	4a03      	ldr	r2, [pc, #12]	; (8001f08 <vTaskSuspendAll+0x18>)
 8001efc:	6013      	str	r3, [r2, #0]
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20002dc0 	.word	0x20002dc0

08001f0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001f1a:	f7fe ff1b 	bl	8000d54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <xTaskResumeAll+0xf8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	4a37      	ldr	r2, [pc, #220]	; (8002004 <xTaskResumeAll+0xf8>)
 8001f26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f28:	4b36      	ldr	r3, [pc, #216]	; (8002004 <xTaskResumeAll+0xf8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d161      	bne.n	8001ff4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f30:	4b35      	ldr	r3, [pc, #212]	; (8002008 <xTaskResumeAll+0xfc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d05d      	beq.n	8001ff4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f38:	e02e      	b.n	8001f98 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <xTaskResumeAll+0x100>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3318      	adds	r3, #24
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fcbc 	bl	80008c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fcb7 	bl	80008c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <xTaskResumeAll+0x104>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	4a2a      	ldr	r2, [pc, #168]	; (8002010 <xTaskResumeAll+0x104>)
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4a27      	ldr	r2, [pc, #156]	; (8002014 <xTaskResumeAll+0x108>)
 8001f76:	441a      	add	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4610      	mov	r0, r2
 8001f80:	f7fe fc45 	bl	800080e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f88:	4b23      	ldr	r3, [pc, #140]	; (8002018 <xTaskResumeAll+0x10c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d302      	bcc.n	8001f98 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 8001f92:	4b22      	ldr	r3, [pc, #136]	; (800201c <xTaskResumeAll+0x110>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f98:	4b1c      	ldr	r3, [pc, #112]	; (800200c <xTaskResumeAll+0x100>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1cc      	bne.n	8001f3a <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001fa6:	f000 faa5 	bl	80024f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <xTaskResumeAll+0x114>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d010      	beq.n	8001fd8 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001fb6:	f000 f837 	bl	8002028 <xTaskIncrementTick>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <xTaskResumeAll+0x110>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f1      	bne.n	8001fb6 <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <xTaskResumeAll+0x114>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <xTaskResumeAll+0x110>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <xTaskResumeAll+0x118>)
 8001fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001ff4:	f7fe fec8 	bl	8000d88 <vPortExitCritical>

	return xAlreadyYielded;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20002dc0 	.word	0x20002dc0
 8002008:	20002d98 	.word	0x20002d98
 800200c:	20002d58 	.word	0x20002d58
 8002010:	20002da0 	.word	0x20002da0
 8002014:	20002cb0 	.word	0x20002cb0
 8002018:	20002cac 	.word	0x20002cac
 800201c:	20002dac 	.word	0x20002dac
 8002020:	20002da8 	.word	0x20002da8
 8002024:	e000ed04 	.word	0xe000ed04

08002028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002032:	4b48      	ldr	r3, [pc, #288]	; (8002154 <xTaskIncrementTick+0x12c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d17c      	bne.n	8002134 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800203a:	4b47      	ldr	r3, [pc, #284]	; (8002158 <xTaskIncrementTick+0x130>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002042:	4a45      	ldr	r2, [pc, #276]	; (8002158 <xTaskIncrementTick+0x130>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d110      	bne.n	8002070 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 800204e:	4b43      	ldr	r3, [pc, #268]	; (800215c <xTaskIncrementTick+0x134>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	4b42      	ldr	r3, [pc, #264]	; (8002160 <xTaskIncrementTick+0x138>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a40      	ldr	r2, [pc, #256]	; (800215c <xTaskIncrementTick+0x134>)
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4a40      	ldr	r2, [pc, #256]	; (8002160 <xTaskIncrementTick+0x138>)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b40      	ldr	r3, [pc, #256]	; (8002164 <xTaskIncrementTick+0x13c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	4a3e      	ldr	r2, [pc, #248]	; (8002164 <xTaskIncrementTick+0x13c>)
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	f000 fa42 	bl	80024f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002070:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <xTaskIncrementTick+0x140>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	429a      	cmp	r2, r3
 8002078:	d34d      	bcc.n	8002116 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <xTaskIncrementTick+0x134>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <xTaskIncrementTick+0x60>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <xTaskIncrementTick+0x62>
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d004      	beq.n	8002098 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800208e:	4b36      	ldr	r3, [pc, #216]	; (8002168 <xTaskIncrementTick+0x140>)
 8002090:	f04f 32ff 	mov.w	r2, #4294967295
 8002094:	601a      	str	r2, [r3, #0]
					break;
 8002096:	e03e      	b.n	8002116 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002098:	4b30      	ldr	r3, [pc, #192]	; (800215c <xTaskIncrementTick+0x134>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d203      	bcs.n	80020b8 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80020b0:	4a2d      	ldr	r2, [pc, #180]	; (8002168 <xTaskIncrementTick+0x140>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6013      	str	r3, [r2, #0]
						break;
 80020b6:	e02e      	b.n	8002116 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	3304      	adds	r3, #4
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fc01 	bl	80008c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3318      	adds	r3, #24
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fbf8 	bl	80008c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	2201      	movs	r2, #1
 80020da:	409a      	lsls	r2, r3
 80020dc:	4b23      	ldr	r3, [pc, #140]	; (800216c <xTaskIncrementTick+0x144>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	4a22      	ldr	r2, [pc, #136]	; (800216c <xTaskIncrementTick+0x144>)
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <xTaskIncrementTick+0x148>)
 80020f4:	441a      	add	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3304      	adds	r3, #4
 80020fa:	4619      	mov	r1, r3
 80020fc:	4610      	mov	r0, r2
 80020fe:	f7fe fb86 	bl	800080e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <xTaskIncrementTick+0x14c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	429a      	cmp	r2, r3
 800210e:	d3b4      	bcc.n	800207a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8002110:	2301      	movs	r3, #1
 8002112:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002114:	e7b1      	b.n	800207a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <xTaskIncrementTick+0x14c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211c:	4914      	ldr	r1, [pc, #80]	; (8002170 <xTaskIncrementTick+0x148>)
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d907      	bls.n	800213e <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 800212e:	2301      	movs	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	e004      	b.n	800213e <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <xTaskIncrementTick+0x150>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	4a0f      	ldr	r2, [pc, #60]	; (8002178 <xTaskIncrementTick+0x150>)
 800213c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <xTaskIncrementTick+0x154>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 8002146:	2301      	movs	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800214a:	697b      	ldr	r3, [r7, #20]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20002dc0 	.word	0x20002dc0
 8002158:	20002d9c 	.word	0x20002d9c
 800215c:	20002d50 	.word	0x20002d50
 8002160:	20002d54 	.word	0x20002d54
 8002164:	20002db0 	.word	0x20002db0
 8002168:	20002db8 	.word	0x20002db8
 800216c:	20002da0 	.word	0x20002da0
 8002170:	20002cb0 	.word	0x20002cb0
 8002174:	20002cac 	.word	0x20002cac
 8002178:	20002da8 	.word	0x20002da8
 800217c:	20002dac 	.word	0x20002dac

08002180 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <vTaskSwitchContext+0x78>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <vTaskSwitchContext+0x7c>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002194:	e02a      	b.n	80021ec <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <vTaskSwitchContext+0x7c>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <vTaskSwitchContext+0x80>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f1c3 031f 	rsb	r3, r3, #31
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <vTaskSwitchContext+0x84>)
 80021be:	4413      	add	r3, r2
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	3308      	adds	r3, #8
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d104      	bne.n	80021e2 <vTaskSwitchContext+0x62>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <vTaskSwitchContext+0x88>)
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20002dc0 	.word	0x20002dc0
 80021fc:	20002dac 	.word	0x20002dac
 8002200:	20002da0 	.word	0x20002da0
 8002204:	20002cb0 	.word	0x20002cb0
 8002208:	20002cac 	.word	0x20002cac

0800220c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <vTaskPlaceOnEventList+0x28>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3318      	adds	r3, #24
 800221c:	4619      	mov	r1, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe fb18 	bl	8000854 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002224:	2101      	movs	r1, #1
 8002226:	6838      	ldr	r0, [r7, #0]
 8002228:	f000 fa76 	bl	8002718 <prvAddCurrentTaskToDelayedList>
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20002cac 	.word	0x20002cac

08002238 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	3318      	adds	r3, #24
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe fb39 	bl	80008c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <xTaskRemoveFromEventList+0x90>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d11c      	bne.n	8002294 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	3304      	adds	r3, #4
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fb30 	bl	80008c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	2201      	movs	r2, #1
 800226a:	409a      	lsls	r2, r3
 800226c:	4b17      	ldr	r3, [pc, #92]	; (80022cc <xTaskRemoveFromEventList+0x94>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4313      	orrs	r3, r2
 8002272:	4a16      	ldr	r2, [pc, #88]	; (80022cc <xTaskRemoveFromEventList+0x94>)
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <xTaskRemoveFromEventList+0x98>)
 8002284:	441a      	add	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3304      	adds	r3, #4
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f7fe fabe 	bl	800080e <vListInsertEnd>
 8002292:	e005      	b.n	80022a0 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3318      	adds	r3, #24
 8002298:	4619      	mov	r1, r3
 800229a:	480e      	ldr	r0, [pc, #56]	; (80022d4 <xTaskRemoveFromEventList+0x9c>)
 800229c:	f7fe fab7 	bl	800080e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <xTaskRemoveFromEventList+0xa0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d905      	bls.n	80022ba <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80022ae:	2301      	movs	r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <xTaskRemoveFromEventList+0xa4>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e001      	b.n	80022be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80022be:	68fb      	ldr	r3, [r7, #12]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20002dc0 	.word	0x20002dc0
 80022cc:	20002da0 	.word	0x20002da0
 80022d0:	20002cb0 	.word	0x20002cb0
 80022d4:	20002d58 	.word	0x20002d58
 80022d8:	20002cac 	.word	0x20002cac
 80022dc:	20002dac 	.word	0x20002dac

080022e0 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <vTaskSetTimeOutState+0x24>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <vTaskSetTimeOutState+0x28>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	605a      	str	r2, [r3, #4]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20002db0 	.word	0x20002db0
 8002308:	20002d9c 	.word	0x20002d9c

0800230c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8002316:	f7fe fd1d 	bl	8000d54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <xTaskCheckForTimeOut+0x80>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d102      	bne.n	8002330 <xTaskCheckForTimeOut+0x24>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	e026      	b.n	800237e <xTaskCheckForTimeOut+0x72>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b16      	ldr	r3, [pc, #88]	; (8002390 <xTaskCheckForTimeOut+0x84>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d007      	beq.n	800234c <xTaskCheckForTimeOut+0x40>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <xTaskCheckForTimeOut+0x40>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002346:	2301      	movs	r3, #1
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e018      	b.n	800237e <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	1ad2      	subs	r2, r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d20e      	bcs.n	800237a <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1acb      	subs	r3, r1, r3
 8002368:	441a      	add	r2, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffb6 	bl	80022e0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e001      	b.n	800237e <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 800237a:	2301      	movs	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800237e:	f7fe fd03 	bl	8000d88 <vPortExitCritical>

	return xReturn;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20002d9c 	.word	0x20002d9c
 8002390:	20002db0 	.word	0x20002db0

08002394 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <vTaskMissedYield+0x14>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20002dac 	.word	0x20002dac

080023ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80023b4:	f000 f852 	bl	800245c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <prvIdleTask+0x28>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d9f9      	bls.n	80023b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <prvIdleTask+0x2c>)
 80023c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80023d0:	e7f0      	b.n	80023b4 <prvIdleTask+0x8>
 80023d2:	bf00      	nop
 80023d4:	20002cb0 	.word	0x20002cb0
 80023d8:	e000ed04 	.word	0xe000ed04

080023dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	e00c      	b.n	8002402 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4a12      	ldr	r2, [pc, #72]	; (800243c <prvInitialiseTaskLists+0x60>)
 80023f4:	4413      	add	r3, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f9de 	bl	80007b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3301      	adds	r3, #1
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d9ef      	bls.n	80023e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002408:	480d      	ldr	r0, [pc, #52]	; (8002440 <prvInitialiseTaskLists+0x64>)
 800240a:	f7fe f9d5 	bl	80007b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800240e:	480d      	ldr	r0, [pc, #52]	; (8002444 <prvInitialiseTaskLists+0x68>)
 8002410:	f7fe f9d2 	bl	80007b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002414:	480c      	ldr	r0, [pc, #48]	; (8002448 <prvInitialiseTaskLists+0x6c>)
 8002416:	f7fe f9cf 	bl	80007b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800241a:	480c      	ldr	r0, [pc, #48]	; (800244c <prvInitialiseTaskLists+0x70>)
 800241c:	f7fe f9cc 	bl	80007b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002420:	480b      	ldr	r0, [pc, #44]	; (8002450 <prvInitialiseTaskLists+0x74>)
 8002422:	f7fe f9c9 	bl	80007b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <prvInitialiseTaskLists+0x78>)
 8002428:	4a05      	ldr	r2, [pc, #20]	; (8002440 <prvInitialiseTaskLists+0x64>)
 800242a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <prvInitialiseTaskLists+0x7c>)
 800242e:	4a05      	ldr	r2, [pc, #20]	; (8002444 <prvInitialiseTaskLists+0x68>)
 8002430:	601a      	str	r2, [r3, #0]
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20002cb0 	.word	0x20002cb0
 8002440:	20002d28 	.word	0x20002d28
 8002444:	20002d3c 	.word	0x20002d3c
 8002448:	20002d58 	.word	0x20002d58
 800244c:	20002d6c 	.word	0x20002d6c
 8002450:	20002d84 	.word	0x20002d84
 8002454:	20002d50 	.word	0x20002d50
 8002458:	20002d54 	.word	0x20002d54

0800245c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002462:	e028      	b.n	80024b6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002464:	f7ff fd44 	bl	8001ef0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <prvCheckTasksWaitingTermination+0x6c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002478:	f7ff fd48 	bl	8001f0c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d119      	bne.n	80024b6 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002482:	f7fe fc67 	bl	8000d54 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <prvCheckTasksWaitingTermination+0x6c>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	3304      	adds	r3, #4
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fa16 	bl	80008c4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <prvCheckTasksWaitingTermination+0x70>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3b01      	subs	r3, #1
 800249e:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <prvCheckTasksWaitingTermination+0x70>)
 80024a0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <prvCheckTasksWaitingTermination+0x74>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <prvCheckTasksWaitingTermination+0x74>)
 80024aa:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80024ac:	f7fe fc6c 	bl	8000d88 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80024b0:	6838      	ldr	r0, [r7, #0]
 80024b2:	f000 f80f 	bl	80024d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <prvCheckTasksWaitingTermination+0x74>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1d2      	bne.n	8002464 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80024be:	bf00      	nop
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20002d6c 	.word	0x20002d6c
 80024cc:	20002d98 	.word	0x20002d98
 80024d0:	20002d80 	.word	0x20002d80

080024d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe f907 	bl	80006f4 <vPortFree>
			vPortFree( pxTCB );
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe f904 	bl	80006f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <prvResetNextTaskUnblockTime+0x40>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <prvResetNextTaskUnblockTime+0x14>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <prvResetNextTaskUnblockTime+0x16>
 8002508:	2300      	movs	r3, #0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <prvResetNextTaskUnblockTime+0x44>)
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002516:	e008      	b.n	800252a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <prvResetNextTaskUnblockTime+0x40>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a04      	ldr	r2, [pc, #16]	; (8002538 <prvResetNextTaskUnblockTime+0x44>)
 8002528:	6013      	str	r3, [r2, #0]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	20002d50 	.word	0x20002d50
 8002538:	20002db8 	.word	0x20002db8

0800253c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d062      	beq.n	8002614 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002552:	4b32      	ldr	r3, [pc, #200]	; (800261c <vTaskPriorityInherit+0xe0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	429a      	cmp	r2, r3
 800255a:	d25b      	bcs.n	8002614 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	2b00      	cmp	r3, #0
 8002562:	db06      	blt.n	8002572 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002564:	4b2d      	ldr	r3, [pc, #180]	; (800261c <vTaskPriorityInherit+0xe0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	f1c3 0206 	rsb	r2, r3, #6
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6959      	ldr	r1, [r3, #20]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4a27      	ldr	r2, [pc, #156]	; (8002620 <vTaskPriorityInherit+0xe4>)
 8002584:	4413      	add	r3, r2
 8002586:	4299      	cmp	r1, r3
 8002588:	d101      	bne.n	800258e <vTaskPriorityInherit+0x52>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <vTaskPriorityInherit+0x54>
 800258e:	2300      	movs	r3, #0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d03a      	beq.n	800260a <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3304      	adds	r3, #4
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe f993 	bl	80008c4 <uxListRemove>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d115      	bne.n	80025d0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a8:	491d      	ldr	r1, [pc, #116]	; (8002620 <vTaskPriorityInherit+0xe4>)
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10a      	bne.n	80025d0 <vTaskPriorityInherit+0x94>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	2201      	movs	r2, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43da      	mvns	r2, r3
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <vTaskPriorityInherit+0xe8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4013      	ands	r3, r2
 80025cc:	4a15      	ldr	r2, [pc, #84]	; (8002624 <vTaskPriorityInherit+0xe8>)
 80025ce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <vTaskPriorityInherit+0xe0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	2201      	movs	r2, #1
 80025e0:	409a      	lsls	r2, r3
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <vTaskPriorityInherit+0xe8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	4a0e      	ldr	r2, [pc, #56]	; (8002624 <vTaskPriorityInherit+0xe8>)
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4a09      	ldr	r2, [pc, #36]	; (8002620 <vTaskPriorityInherit+0xe4>)
 80025fa:	441a      	add	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3304      	adds	r3, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f7fe f903 	bl	800080e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002608:	e004      	b.n	8002614 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <vTaskPriorityInherit+0xe0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20002cac 	.word	0x20002cac
 8002620:	20002cb0 	.word	0x20002cb0
 8002624:	20002da0 	.word	0x20002da0

08002628 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d04f      	beq.n	80026de <xTaskPriorityDisinherit+0xb6>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002642:	1e5a      	subs	r2, r3, #1
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	429a      	cmp	r2, r3
 8002652:	d044      	beq.n	80026de <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002658:	2b00      	cmp	r3, #0
 800265a:	d140      	bne.n	80026de <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	3304      	adds	r3, #4
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe f92f 	bl	80008c4 <uxListRemove>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d115      	bne.n	8002698 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002670:	491d      	ldr	r1, [pc, #116]	; (80026e8 <xTaskPriorityDisinherit+0xc0>)
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10a      	bne.n	8002698 <xTaskPriorityDisinherit+0x70>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	2201      	movs	r2, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43da      	mvns	r2, r3
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <xTaskPriorityDisinherit+0xc4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4013      	ands	r3, r2
 8002694:	4a15      	ldr	r2, [pc, #84]	; (80026ec <xTaskPriorityDisinherit+0xc4>)
 8002696:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	f1c3 0206 	rsb	r2, r3, #6
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	2201      	movs	r2, #1
 80026b2:	409a      	lsls	r2, r3
 80026b4:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <xTaskPriorityDisinherit+0xc4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <xTaskPriorityDisinherit+0xc4>)
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <xTaskPriorityDisinherit+0xc0>)
 80026cc:	441a      	add	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	3304      	adds	r3, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f7fe f89a 	bl	800080e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80026da:	2301      	movs	r3, #1
 80026dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80026de:	68fb      	ldr	r3, [r7, #12]
	}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20002cb0 	.word	0x20002cb0
 80026ec:	20002da0 	.word	0x20002da0

080026f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <pvTaskIncrementMutexHeldCount+0x24>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <pvTaskIncrementMutexHeldCount+0x24>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002702:	3201      	adds	r2, #1
 8002704:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8002706:	4b03      	ldr	r3, [pc, #12]	; (8002714 <pvTaskIncrementMutexHeldCount+0x24>)
 8002708:	681b      	ldr	r3, [r3, #0]
	}
 800270a:	4618      	mov	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20002cac 	.word	0x20002cac

08002718 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002722:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002728:	4b28      	ldr	r3, [pc, #160]	; (80027cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3304      	adds	r3, #4
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe f8c8 	bl	80008c4 <uxListRemove>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10b      	bne.n	8002752 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	2201      	movs	r2, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4013      	ands	r3, r2
 800274e:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002750:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d10a      	bne.n	8002770 <prvAddCurrentTaskToDelayedList+0x58>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d007      	beq.n	8002770 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3304      	adds	r3, #4
 8002766:	4619      	mov	r1, r3
 8002768:	481a      	ldr	r0, [pc, #104]	; (80027d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800276a:	f7fe f850 	bl	800080e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800276e:	e026      	b.n	80027be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	429a      	cmp	r2, r3
 8002786:	d209      	bcs.n	800279c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3304      	adds	r3, #4
 8002792:	4619      	mov	r1, r3
 8002794:	4610      	mov	r0, r2
 8002796:	f7fe f85d 	bl	8000854 <vListInsert>
}
 800279a:	e010      	b.n	80027be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3304      	adds	r3, #4
 80027a6:	4619      	mov	r1, r3
 80027a8:	4610      	mov	r0, r2
 80027aa:	f7fe f853 	bl	8000854 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d202      	bcs.n	80027be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80027b8:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	6013      	str	r3, [r2, #0]
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20002d9c 	.word	0x20002d9c
 80027cc:	20002cac 	.word	0x20002cac
 80027d0:	20002da0 	.word	0x20002da0
 80027d4:	20002d84 	.word	0x20002d84
 80027d8:	20002d54 	.word	0x20002d54
 80027dc:	20002d50 	.word	0x20002d50
 80027e0:	20002db8 	.word	0x20002db8

080027e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027e4:	480c      	ldr	r0, [pc, #48]	; (8002818 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027e6:	490d      	ldr	r1, [pc, #52]	; (800281c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027e8:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027ec:	e002      	b.n	80027f4 <LoopCopyDataInit>

080027ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f2:	3304      	adds	r3, #4

080027f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f8:	d3f9      	bcc.n	80027ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027fc:	4c0a      	ldr	r4, [pc, #40]	; (8002828 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002800:	e001      	b.n	8002806 <LoopFillZerobss>

08002802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002804:	3204      	adds	r2, #4

08002806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002808:	d3fb      	bcc.n	8002802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800280a:	f7ff f9e8 	bl	8001bde <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800280e:	f001 fc4d 	bl	80040ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002812:	f7fe f881 	bl	8000918 <main>
  bx lr
 8002816:	4770      	bx	lr
  ldr r0, =_sdata
 8002818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800281c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002820:	08004f10 	.word	0x08004f10
  ldr r2, =_sbss
 8002824:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002828:	20002dc8 	.word	0x20002dc8

0800282c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800282c:	e7fe      	b.n	800282c <ADC1_2_IRQHandler>
	...

08002830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_Init+0x28>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a07      	ldr	r2, [pc, #28]	; (8002858 <HAL_Init+0x28>)
 800283a:	f043 0310 	orr.w	r3, r3, #16
 800283e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002840:	2003      	movs	r0, #3
 8002842:	f000 f8f5 	bl	8002a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002846:	200f      	movs	r0, #15
 8002848:	f000 f808 	bl	800285c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800284c:	f7ff f942 	bl	8001ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40022000 	.word	0x40022000

0800285c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_InitTick+0x54>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_InitTick+0x58>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	4619      	mov	r1, r3
 800286e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002872:	fbb3 f3f1 	udiv	r3, r3, r1
 8002876:	fbb2 f3f3 	udiv	r3, r2, r3
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f8ff 	bl	8002a7e <HAL_SYSTICK_Config>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e00e      	b.n	80028a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b0f      	cmp	r3, #15
 800288e:	d80a      	bhi.n	80028a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002890:	2200      	movs	r2, #0
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	f04f 30ff 	mov.w	r0, #4294967295
 8002898:	f000 f8d5 	bl	8002a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800289c:	4a06      	ldr	r2, [pc, #24]	; (80028b8 <HAL_InitTick+0x5c>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e000      	b.n	80028a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000010 	.word	0x20000010
 80028b4:	20000018 	.word	0x20000018
 80028b8:	20000014 	.word	0x20000014

080028bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return uwTick;
 80028c0:	4b02      	ldr	r3, [pc, #8]	; (80028cc <HAL_GetTick+0x10>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	20002dc4 	.word	0x20002dc4

080028d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <__NVIC_SetPriorityGrouping+0x44>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ec:	4013      	ands	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002902:	4a04      	ldr	r2, [pc, #16]	; (8002914 <__NVIC_SetPriorityGrouping+0x44>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	60d3      	str	r3, [r2, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <__NVIC_GetPriorityGrouping+0x18>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	f003 0307 	and.w	r3, r3, #7
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002944:	2b00      	cmp	r3, #0
 8002946:	db0a      	blt.n	800295e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	490c      	ldr	r1, [pc, #48]	; (8002980 <__NVIC_SetPriority+0x4c>)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	0112      	lsls	r2, r2, #4
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	440b      	add	r3, r1
 8002958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800295c:	e00a      	b.n	8002974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4908      	ldr	r1, [pc, #32]	; (8002984 <__NVIC_SetPriority+0x50>)
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	3b04      	subs	r3, #4
 800296c:	0112      	lsls	r2, r2, #4
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	440b      	add	r3, r1
 8002972:	761a      	strb	r2, [r3, #24]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e100 	.word	0xe000e100
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	; 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f1c3 0307 	rsb	r3, r3, #7
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	bf28      	it	cs
 80029a6:	2304      	movcs	r3, #4
 80029a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d902      	bls.n	80029b8 <NVIC_EncodePriority+0x30>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3b03      	subs	r3, #3
 80029b6:	e000      	b.n	80029ba <NVIC_EncodePriority+0x32>
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43da      	mvns	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	401a      	ands	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d0:	f04f 31ff 	mov.w	r1, #4294967295
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43d9      	mvns	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	4313      	orrs	r3, r2
         );
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029fc:	d301      	bcc.n	8002a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00f      	b.n	8002a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <SysTick_Config+0x40>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a10:	f7ff ff90 	bl	8002934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <SysTick_Config+0x40>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <SysTick_Config+0x40>)
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	e000e010 	.word	0xe000e010

08002a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff49 	bl	80028d0 <__NVIC_SetPriorityGrouping>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a58:	f7ff ff5e 	bl	8002918 <__NVIC_GetPriorityGrouping>
 8002a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	6978      	ldr	r0, [r7, #20]
 8002a64:	f7ff ff90 	bl	8002988 <NVIC_EncodePriority>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff5f 	bl	8002934 <__NVIC_SetPriority>
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff ffb0 	bl	80029ec <SysTick_Config>
 8002a8c:	4603      	mov	r3, r0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b08b      	sub	sp, #44	; 0x2c
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aaa:	e169      	b.n	8002d80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002aac:	2201      	movs	r2, #1
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	f040 8158 	bne.w	8002d7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4a9a      	ldr	r2, [pc, #616]	; (8002d38 <HAL_GPIO_Init+0x2a0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d05e      	beq.n	8002b92 <HAL_GPIO_Init+0xfa>
 8002ad4:	4a98      	ldr	r2, [pc, #608]	; (8002d38 <HAL_GPIO_Init+0x2a0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d875      	bhi.n	8002bc6 <HAL_GPIO_Init+0x12e>
 8002ada:	4a98      	ldr	r2, [pc, #608]	; (8002d3c <HAL_GPIO_Init+0x2a4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d058      	beq.n	8002b92 <HAL_GPIO_Init+0xfa>
 8002ae0:	4a96      	ldr	r2, [pc, #600]	; (8002d3c <HAL_GPIO_Init+0x2a4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d86f      	bhi.n	8002bc6 <HAL_GPIO_Init+0x12e>
 8002ae6:	4a96      	ldr	r2, [pc, #600]	; (8002d40 <HAL_GPIO_Init+0x2a8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d052      	beq.n	8002b92 <HAL_GPIO_Init+0xfa>
 8002aec:	4a94      	ldr	r2, [pc, #592]	; (8002d40 <HAL_GPIO_Init+0x2a8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d869      	bhi.n	8002bc6 <HAL_GPIO_Init+0x12e>
 8002af2:	4a94      	ldr	r2, [pc, #592]	; (8002d44 <HAL_GPIO_Init+0x2ac>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d04c      	beq.n	8002b92 <HAL_GPIO_Init+0xfa>
 8002af8:	4a92      	ldr	r2, [pc, #584]	; (8002d44 <HAL_GPIO_Init+0x2ac>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d863      	bhi.n	8002bc6 <HAL_GPIO_Init+0x12e>
 8002afe:	4a92      	ldr	r2, [pc, #584]	; (8002d48 <HAL_GPIO_Init+0x2b0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d046      	beq.n	8002b92 <HAL_GPIO_Init+0xfa>
 8002b04:	4a90      	ldr	r2, [pc, #576]	; (8002d48 <HAL_GPIO_Init+0x2b0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d85d      	bhi.n	8002bc6 <HAL_GPIO_Init+0x12e>
 8002b0a:	2b12      	cmp	r3, #18
 8002b0c:	d82a      	bhi.n	8002b64 <HAL_GPIO_Init+0xcc>
 8002b0e:	2b12      	cmp	r3, #18
 8002b10:	d859      	bhi.n	8002bc6 <HAL_GPIO_Init+0x12e>
 8002b12:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <HAL_GPIO_Init+0x80>)
 8002b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b18:	08002b93 	.word	0x08002b93
 8002b1c:	08002b6d 	.word	0x08002b6d
 8002b20:	08002b7f 	.word	0x08002b7f
 8002b24:	08002bc1 	.word	0x08002bc1
 8002b28:	08002bc7 	.word	0x08002bc7
 8002b2c:	08002bc7 	.word	0x08002bc7
 8002b30:	08002bc7 	.word	0x08002bc7
 8002b34:	08002bc7 	.word	0x08002bc7
 8002b38:	08002bc7 	.word	0x08002bc7
 8002b3c:	08002bc7 	.word	0x08002bc7
 8002b40:	08002bc7 	.word	0x08002bc7
 8002b44:	08002bc7 	.word	0x08002bc7
 8002b48:	08002bc7 	.word	0x08002bc7
 8002b4c:	08002bc7 	.word	0x08002bc7
 8002b50:	08002bc7 	.word	0x08002bc7
 8002b54:	08002bc7 	.word	0x08002bc7
 8002b58:	08002bc7 	.word	0x08002bc7
 8002b5c:	08002b75 	.word	0x08002b75
 8002b60:	08002b89 	.word	0x08002b89
 8002b64:	4a79      	ldr	r2, [pc, #484]	; (8002d4c <HAL_GPIO_Init+0x2b4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d013      	beq.n	8002b92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b6a:	e02c      	b.n	8002bc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	623b      	str	r3, [r7, #32]
          break;
 8002b72:	e029      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	623b      	str	r3, [r7, #32]
          break;
 8002b7c:	e024      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	3308      	adds	r3, #8
 8002b84:	623b      	str	r3, [r7, #32]
          break;
 8002b86:	e01f      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	330c      	adds	r3, #12
 8002b8e:	623b      	str	r3, [r7, #32]
          break;
 8002b90:	e01a      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	623b      	str	r3, [r7, #32]
          break;
 8002b9e:	e013      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba8:	2308      	movs	r3, #8
 8002baa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	611a      	str	r2, [r3, #16]
          break;
 8002bb2:	e009      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bb4:	2308      	movs	r3, #8
 8002bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	615a      	str	r2, [r3, #20]
          break;
 8002bbe:	e003      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
          break;
 8002bc4:	e000      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          break;
 8002bc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2bff      	cmp	r3, #255	; 0xff
 8002bcc:	d801      	bhi.n	8002bd2 <HAL_GPIO_Init+0x13a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	e001      	b.n	8002bd6 <HAL_GPIO_Init+0x13e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2bff      	cmp	r3, #255	; 0xff
 8002bdc:	d802      	bhi.n	8002be4 <HAL_GPIO_Init+0x14c>
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	e002      	b.n	8002bea <HAL_GPIO_Init+0x152>
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	3b08      	subs	r3, #8
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	210f      	movs	r1, #15
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	6a39      	ldr	r1, [r7, #32]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	431a      	orrs	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80b1 	beq.w	8002d7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c18:	4b4d      	ldr	r3, [pc, #308]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	4a4c      	ldr	r2, [pc, #304]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6193      	str	r3, [r2, #24]
 8002c24:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c30:	4a48      	ldr	r2, [pc, #288]	; (8002d54 <HAL_GPIO_Init+0x2bc>)
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	220f      	movs	r2, #15
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4013      	ands	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a40      	ldr	r2, [pc, #256]	; (8002d58 <HAL_GPIO_Init+0x2c0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d013      	beq.n	8002c84 <HAL_GPIO_Init+0x1ec>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a3f      	ldr	r2, [pc, #252]	; (8002d5c <HAL_GPIO_Init+0x2c4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00d      	beq.n	8002c80 <HAL_GPIO_Init+0x1e8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a3e      	ldr	r2, [pc, #248]	; (8002d60 <HAL_GPIO_Init+0x2c8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d007      	beq.n	8002c7c <HAL_GPIO_Init+0x1e4>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a3d      	ldr	r2, [pc, #244]	; (8002d64 <HAL_GPIO_Init+0x2cc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <HAL_GPIO_Init+0x1e0>
 8002c74:	2303      	movs	r3, #3
 8002c76:	e006      	b.n	8002c86 <HAL_GPIO_Init+0x1ee>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	e004      	b.n	8002c86 <HAL_GPIO_Init+0x1ee>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e002      	b.n	8002c86 <HAL_GPIO_Init+0x1ee>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <HAL_GPIO_Init+0x1ee>
 8002c84:	2300      	movs	r3, #0
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	f002 0203 	and.w	r2, r2, #3
 8002c8c:	0092      	lsls	r2, r2, #2
 8002c8e:	4093      	lsls	r3, r2
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c96:	492f      	ldr	r1, [pc, #188]	; (8002d54 <HAL_GPIO_Init+0x2bc>)
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	089b      	lsrs	r3, r3, #2
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d006      	beq.n	8002cbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	492c      	ldr	r1, [pc, #176]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
 8002cbc:	e006      	b.n	8002ccc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cbe:	4b2a      	ldr	r3, [pc, #168]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	4928      	ldr	r1, [pc, #160]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cd8:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	4922      	ldr	r1, [pc, #136]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	491e      	ldr	r1, [pc, #120]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d006      	beq.n	8002d0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	4918      	ldr	r1, [pc, #96]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	608b      	str	r3, [r1, #8]
 8002d0c:	e006      	b.n	8002d1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	4914      	ldr	r1, [pc, #80]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d021      	beq.n	8002d6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	490e      	ldr	r1, [pc, #56]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60cb      	str	r3, [r1, #12]
 8002d34:	e021      	b.n	8002d7a <HAL_GPIO_Init+0x2e2>
 8002d36:	bf00      	nop
 8002d38:	10320000 	.word	0x10320000
 8002d3c:	10310000 	.word	0x10310000
 8002d40:	10220000 	.word	0x10220000
 8002d44:	10210000 	.word	0x10210000
 8002d48:	10120000 	.word	0x10120000
 8002d4c:	10110000 	.word	0x10110000
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40010000 	.word	0x40010000
 8002d58:	40010800 	.word	0x40010800
 8002d5c:	40010c00 	.word	0x40010c00
 8002d60:	40011000 	.word	0x40011000
 8002d64:	40011400 	.word	0x40011400
 8002d68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	4909      	ldr	r1, [pc, #36]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f47f ae8e 	bne.w	8002aac <HAL_GPIO_Init+0x14>
  }
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	372c      	adds	r7, #44	; 0x2c
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	40010400 	.word	0x40010400

08002da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e12b      	b.n	800300a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fe feb6 	bl	8001b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e04:	f001 f918 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 8002e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4a81      	ldr	r2, [pc, #516]	; (8003014 <HAL_I2C_Init+0x274>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d807      	bhi.n	8002e24 <HAL_I2C_Init+0x84>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a80      	ldr	r2, [pc, #512]	; (8003018 <HAL_I2C_Init+0x278>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bf94      	ite	ls
 8002e1c:	2301      	movls	r3, #1
 8002e1e:	2300      	movhi	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	e006      	b.n	8002e32 <HAL_I2C_Init+0x92>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a7d      	ldr	r2, [pc, #500]	; (800301c <HAL_I2C_Init+0x27c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	bf94      	ite	ls
 8002e2c:	2301      	movls	r3, #1
 8002e2e:	2300      	movhi	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0e7      	b.n	800300a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4a78      	ldr	r2, [pc, #480]	; (8003020 <HAL_I2C_Init+0x280>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	0c9b      	lsrs	r3, r3, #18
 8002e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4a6a      	ldr	r2, [pc, #424]	; (8003014 <HAL_I2C_Init+0x274>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d802      	bhi.n	8002e74 <HAL_I2C_Init+0xd4>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	3301      	adds	r3, #1
 8002e72:	e009      	b.n	8002e88 <HAL_I2C_Init+0xe8>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
 8002e7e:	4a69      	ldr	r2, [pc, #420]	; (8003024 <HAL_I2C_Init+0x284>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	3301      	adds	r3, #1
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	495c      	ldr	r1, [pc, #368]	; (8003014 <HAL_I2C_Init+0x274>)
 8002ea4:	428b      	cmp	r3, r1
 8002ea6:	d819      	bhi.n	8002edc <HAL_I2C_Init+0x13c>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e59      	subs	r1, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb6:	1c59      	adds	r1, r3, #1
 8002eb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_I2C_Init+0x138>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1e59      	subs	r1, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed6:	e051      	b.n	8002f7c <HAL_I2C_Init+0x1dc>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	e04f      	b.n	8002f7c <HAL_I2C_Init+0x1dc>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d111      	bne.n	8002f08 <HAL_I2C_Init+0x168>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e58      	subs	r0, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	440b      	add	r3, r1
 8002ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e012      	b.n	8002f2e <HAL_I2C_Init+0x18e>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1e58      	subs	r0, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	0099      	lsls	r1, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_I2C_Init+0x196>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e022      	b.n	8002f7c <HAL_I2C_Init+0x1dc>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10e      	bne.n	8002f5c <HAL_I2C_Init+0x1bc>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1e58      	subs	r0, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6859      	ldr	r1, [r3, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	440b      	add	r3, r1
 8002f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f50:	3301      	adds	r3, #1
 8002f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5a:	e00f      	b.n	8002f7c <HAL_I2C_Init+0x1dc>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e58      	subs	r0, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	0099      	lsls	r1, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	6809      	ldr	r1, [r1, #0]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002faa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6911      	ldr	r1, [r2, #16]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68d2      	ldr	r2, [r2, #12]
 8002fb6:	4311      	orrs	r1, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	000186a0 	.word	0x000186a0
 8003018:	001e847f 	.word	0x001e847f
 800301c:	003d08ff 	.word	0x003d08ff
 8003020:	431bde83 	.word	0x431bde83
 8003024:	10624dd3 	.word	0x10624dd3

08003028 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	461a      	mov	r2, r3
 8003034:	460b      	mov	r3, r1
 8003036:	817b      	strh	r3, [r7, #10]
 8003038:	4613      	mov	r3, r2
 800303a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff fc3e 	bl	80028bc <HAL_GetTick>
 8003040:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b20      	cmp	r3, #32
 800304c:	f040 80e0 	bne.w	8003210 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2319      	movs	r3, #25
 8003056:	2201      	movs	r2, #1
 8003058:	4970      	ldr	r1, [pc, #448]	; (800321c <HAL_I2C_Master_Transmit+0x1f4>)
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fa92 	bl	8003584 <I2C_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003066:	2302      	movs	r3, #2
 8003068:	e0d3      	b.n	8003212 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_I2C_Master_Transmit+0x50>
 8003074:	2302      	movs	r3, #2
 8003076:	e0cc      	b.n	8003212 <HAL_I2C_Master_Transmit+0x1ea>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d007      	beq.n	800309e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2221      	movs	r2, #33	; 0x21
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2210      	movs	r2, #16
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	893a      	ldrh	r2, [r7, #8]
 80030ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a50      	ldr	r2, [pc, #320]	; (8003220 <HAL_I2C_Master_Transmit+0x1f8>)
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030e0:	8979      	ldrh	r1, [r7, #10]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	6a3a      	ldr	r2, [r7, #32]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f9ca 	bl	8003480 <I2C_MasterRequestWrite>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e08d      	b.n	8003212 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800310c:	e066      	b.n	80031dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	6a39      	ldr	r1, [r7, #32]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fb0c 	bl	8003730 <I2C_WaitOnTXEFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00d      	beq.n	800313a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	2b04      	cmp	r3, #4
 8003124:	d107      	bne.n	8003136 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003134:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e06b      	b.n	8003212 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b04      	cmp	r3, #4
 8003176:	d11b      	bne.n	80031b0 <HAL_I2C_Master_Transmit+0x188>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	2b00      	cmp	r3, #0
 800317e:	d017      	beq.n	80031b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	781a      	ldrb	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	6a39      	ldr	r1, [r7, #32]
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fafc 	bl	80037b2 <I2C_WaitOnBTFFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00d      	beq.n	80031dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d107      	bne.n	80031d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e01a      	b.n	8003212 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d194      	bne.n	800310e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	e000      	b.n	8003212 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003210:	2302      	movs	r3, #2
  }
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	00100002 	.word	0x00100002
 8003220:	ffff0000 	.word	0xffff0000

08003224 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	460b      	mov	r3, r1
 8003232:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7ff fb42 	bl	80028bc <HAL_GetTick>
 8003238:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800323a:	2301      	movs	r3, #1
 800323c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b20      	cmp	r3, #32
 8003248:	f040 8111 	bne.w	800346e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2319      	movs	r3, #25
 8003252:	2201      	movs	r2, #1
 8003254:	4988      	ldr	r1, [pc, #544]	; (8003478 <HAL_I2C_IsDeviceReady+0x254>)
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f994 	bl	8003584 <I2C_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
 8003264:	e104      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_I2C_IsDeviceReady+0x50>
 8003270:	2302      	movs	r3, #2
 8003272:	e0fd      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b01      	cmp	r3, #1
 8003288:	d007      	beq.n	800329a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2224      	movs	r2, #36	; 0x24
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a70      	ldr	r2, [pc, #448]	; (800347c <HAL_I2C_IsDeviceReady+0x258>)
 80032bc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f952 	bl	8003584 <I2C_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f4:	d103      	bne.n	80032fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e0b6      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003310:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003312:	f7ff fad3 	bl	80028bc <HAL_GetTick>
 8003316:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	bf0c      	ite	eq
 8003326:	2301      	moveq	r3, #1
 8003328:	2300      	movne	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333c:	bf0c      	ite	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	2300      	movne	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003346:	e025      	b.n	8003394 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003348:	f7ff fab8 	bl	80028bc <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d302      	bcc.n	800335e <HAL_I2C_IsDeviceReady+0x13a>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	22a0      	movs	r2, #160	; 0xa0
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b02      	cmp	r3, #2
 8003372:	bf0c      	ite	eq
 8003374:	2301      	moveq	r3, #1
 8003376:	2300      	movne	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2ba0      	cmp	r3, #160	; 0xa0
 800339e:	d005      	beq.n	80033ac <HAL_I2C_IsDeviceReady+0x188>
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <HAL_I2C_IsDeviceReady+0x188>
 80033a6:	7dbb      	ldrb	r3, [r7, #22]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0cd      	beq.n	8003348 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d129      	bne.n	8003416 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2319      	movs	r3, #25
 80033ee:	2201      	movs	r2, #1
 80033f0:	4921      	ldr	r1, [pc, #132]	; (8003478 <HAL_I2C_IsDeviceReady+0x254>)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f8c6 	bl	8003584 <I2C_WaitOnFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e036      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	e02c      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003424:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800342e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2319      	movs	r3, #25
 8003436:	2201      	movs	r2, #1
 8003438:	490f      	ldr	r1, [pc, #60]	; (8003478 <HAL_I2C_IsDeviceReady+0x254>)
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f8a2 	bl	8003584 <I2C_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e012      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	3301      	adds	r3, #1
 800344e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	f4ff af32 	bcc.w	80032be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
  }
}
 8003470:	4618      	mov	r0, r3
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	00100002 	.word	0x00100002
 800347c:	ffff0000 	.word	0xffff0000

08003480 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	460b      	mov	r3, r1
 800348e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d006      	beq.n	80034aa <I2C_MasterRequestWrite+0x2a>
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d003      	beq.n	80034aa <I2C_MasterRequestWrite+0x2a>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034a8:	d108      	bne.n	80034bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e00b      	b.n	80034d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	2b12      	cmp	r3, #18
 80034c2:	d107      	bne.n	80034d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f84f 	bl	8003584 <I2C_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034fa:	d103      	bne.n	8003504 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e035      	b.n	8003574 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003510:	d108      	bne.n	8003524 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003512:	897b      	ldrh	r3, [r7, #10]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003520:	611a      	str	r2, [r3, #16]
 8003522:	e01b      	b.n	800355c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003524:	897b      	ldrh	r3, [r7, #10]
 8003526:	11db      	asrs	r3, r3, #7
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f003 0306 	and.w	r3, r3, #6
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f063 030f 	orn	r3, r3, #15
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	490e      	ldr	r1, [pc, #56]	; (800357c <I2C_MasterRequestWrite+0xfc>)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f875 	bl	8003632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e010      	b.n	8003574 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003552:	897b      	ldrh	r3, [r7, #10]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4907      	ldr	r1, [pc, #28]	; (8003580 <I2C_MasterRequestWrite+0x100>)
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f865 	bl	8003632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	00010008 	.word	0x00010008
 8003580:	00010002 	.word	0x00010002

08003584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003594:	e025      	b.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d021      	beq.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359e:	f7ff f98d 	bl	80028bc <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d116      	bne.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f043 0220 	orr.w	r2, r3, #32
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e023      	b.n	800362a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	0c1b      	lsrs	r3, r3, #16
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d10d      	bne.n	8003608 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	43da      	mvns	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4013      	ands	r3, r2
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	e00c      	b.n	8003622 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	429a      	cmp	r2, r3
 8003626:	d0b6      	beq.n	8003596 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003640:	e051      	b.n	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003650:	d123      	bne.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003660:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800366a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0204 	orr.w	r2, r3, #4
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e046      	b.n	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d021      	beq.n	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a2:	f7ff f90b 	bl	80028bc <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d116      	bne.n	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e020      	b.n	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10c      	bne.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf14      	ite	ne
 8003702:	2301      	movne	r3, #1
 8003704:	2300      	moveq	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	e00b      	b.n	8003722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	43da      	mvns	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4013      	ands	r3, r2
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d18d      	bne.n	8003642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800373c:	e02d      	b.n	800379a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f878 	bl	8003834 <I2C_IsAcknowledgeFailed>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e02d      	b.n	80037aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003754:	d021      	beq.n	800379a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003756:	f7ff f8b1 	bl	80028bc <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	429a      	cmp	r2, r3
 8003764:	d302      	bcc.n	800376c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d116      	bne.n	800379a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e007      	b.n	80037aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	2b80      	cmp	r3, #128	; 0x80
 80037a6:	d1ca      	bne.n	800373e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037be:	e02d      	b.n	800381c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f837 	bl	8003834 <I2C_IsAcknowledgeFailed>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e02d      	b.n	800382c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d6:	d021      	beq.n	800381c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d8:	f7ff f870 	bl	80028bc <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d302      	bcc.n	80037ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d116      	bne.n	800381c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e007      	b.n	800382c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b04      	cmp	r3, #4
 8003828:	d1ca      	bne.n	80037c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384a:	d11b      	bne.n	8003884 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003854:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	f043 0204 	orr.w	r2, r3, #4
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e272      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8087 	beq.w	80039be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038b0:	4b92      	ldr	r3, [pc, #584]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 030c 	and.w	r3, r3, #12
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d00c      	beq.n	80038d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038bc:	4b8f      	ldr	r3, [pc, #572]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 030c 	and.w	r3, r3, #12
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d112      	bne.n	80038ee <HAL_RCC_OscConfig+0x5e>
 80038c8:	4b8c      	ldr	r3, [pc, #560]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d4:	d10b      	bne.n	80038ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d6:	4b89      	ldr	r3, [pc, #548]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d06c      	beq.n	80039bc <HAL_RCC_OscConfig+0x12c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d168      	bne.n	80039bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e24c      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f6:	d106      	bne.n	8003906 <HAL_RCC_OscConfig+0x76>
 80038f8:	4b80      	ldr	r3, [pc, #512]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a7f      	ldr	r2, [pc, #508]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80038fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	e02e      	b.n	8003964 <HAL_RCC_OscConfig+0xd4>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x98>
 800390e:	4b7b      	ldr	r3, [pc, #492]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a7a      	ldr	r2, [pc, #488]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	4b78      	ldr	r3, [pc, #480]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a77      	ldr	r2, [pc, #476]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e01d      	b.n	8003964 <HAL_RCC_OscConfig+0xd4>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0xbc>
 8003932:	4b72      	ldr	r3, [pc, #456]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a71      	ldr	r2, [pc, #452]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b6f      	ldr	r3, [pc, #444]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a6e      	ldr	r2, [pc, #440]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0xd4>
 800394c:	4b6b      	ldr	r3, [pc, #428]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a6a      	ldr	r2, [pc, #424]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b68      	ldr	r3, [pc, #416]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a67      	ldr	r2, [pc, #412]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 800395e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003962:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fe ffa6 	bl	80028bc <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7fe ffa2 	bl	80028bc <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e200      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b5d      	ldr	r3, [pc, #372]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0xe4>
 8003992:	e014      	b.n	80039be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fe ff92 	bl	80028bc <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399c:	f7fe ff8e 	bl	80028bc <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1ec      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	4b53      	ldr	r3, [pc, #332]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x10c>
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d063      	beq.n	8003a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ca:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039d6:	4b49      	ldr	r3, [pc, #292]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d11c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x18c>
 80039e2:	4b46      	ldr	r3, [pc, #280]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	4b43      	ldr	r3, [pc, #268]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x176>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e1c0      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b3d      	ldr	r3, [pc, #244]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4939      	ldr	r1, [pc, #228]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	e03a      	b.n	8003a92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a24:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fe ff47 	bl	80028bc <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a32:	f7fe ff43 	bl	80028bc <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1a1      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	4b2d      	ldr	r3, [pc, #180]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4927      	ldr	r1, [pc, #156]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	e015      	b.n	8003a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b26      	ldr	r3, [pc, #152]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fe ff26 	bl	80028bc <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fe ff22 	bl	80028bc <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e180      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d03a      	beq.n	8003b14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d019      	beq.n	8003ada <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <HAL_RCC_OscConfig+0x274>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aac:	f7fe ff06 	bl	80028bc <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab4:	f7fe ff02 	bl	80028bc <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e160      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f000 fac4 	bl	8004060 <RCC_Delay>
 8003ad8:	e01c      	b.n	8003b14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ada:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <HAL_RCC_OscConfig+0x274>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae0:	f7fe feec 	bl	80028bc <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae6:	e00f      	b.n	8003b08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae8:	f7fe fee8 	bl	80028bc <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d908      	bls.n	8003b08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e146      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	42420000 	.word	0x42420000
 8003b04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b08:	4b92      	ldr	r3, [pc, #584]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e9      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80a6 	beq.w	8003c6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b26:	4b8b      	ldr	r3, [pc, #556]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10d      	bne.n	8003b4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b88      	ldr	r3, [pc, #544]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4a87      	ldr	r2, [pc, #540]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	61d3      	str	r3, [r2, #28]
 8003b3e:	4b85      	ldr	r3, [pc, #532]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4e:	4b82      	ldr	r3, [pc, #520]	; (8003d58 <HAL_RCC_OscConfig+0x4c8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d118      	bne.n	8003b8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5a:	4b7f      	ldr	r3, [pc, #508]	; (8003d58 <HAL_RCC_OscConfig+0x4c8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a7e      	ldr	r2, [pc, #504]	; (8003d58 <HAL_RCC_OscConfig+0x4c8>)
 8003b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b66:	f7fe fea9 	bl	80028bc <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6e:	f7fe fea5 	bl	80028bc <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b64      	cmp	r3, #100	; 0x64
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e103      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	4b75      	ldr	r3, [pc, #468]	; (8003d58 <HAL_RCC_OscConfig+0x4c8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x312>
 8003b94:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	4a6e      	ldr	r2, [pc, #440]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	6213      	str	r3, [r2, #32]
 8003ba0:	e02d      	b.n	8003bfe <HAL_RCC_OscConfig+0x36e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x334>
 8003baa:	4b6a      	ldr	r3, [pc, #424]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	4a69      	ldr	r2, [pc, #420]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	6213      	str	r3, [r2, #32]
 8003bb6:	4b67      	ldr	r3, [pc, #412]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	4a66      	ldr	r2, [pc, #408]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	f023 0304 	bic.w	r3, r3, #4
 8003bc0:	6213      	str	r3, [r2, #32]
 8003bc2:	e01c      	b.n	8003bfe <HAL_RCC_OscConfig+0x36e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	2b05      	cmp	r3, #5
 8003bca:	d10c      	bne.n	8003be6 <HAL_RCC_OscConfig+0x356>
 8003bcc:	4b61      	ldr	r3, [pc, #388]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4a60      	ldr	r2, [pc, #384]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	f043 0304 	orr.w	r3, r3, #4
 8003bd6:	6213      	str	r3, [r2, #32]
 8003bd8:	4b5e      	ldr	r3, [pc, #376]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	4a5d      	ldr	r2, [pc, #372]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6213      	str	r3, [r2, #32]
 8003be4:	e00b      	b.n	8003bfe <HAL_RCC_OscConfig+0x36e>
 8003be6:	4b5b      	ldr	r3, [pc, #364]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	4a5a      	ldr	r2, [pc, #360]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	6213      	str	r3, [r2, #32]
 8003bf2:	4b58      	ldr	r3, [pc, #352]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4a57      	ldr	r2, [pc, #348]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	f023 0304 	bic.w	r3, r3, #4
 8003bfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d015      	beq.n	8003c32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c06:	f7fe fe59 	bl	80028bc <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fe fe55 	bl	80028bc <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0b1      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c24:	4b4b      	ldr	r3, [pc, #300]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ee      	beq.n	8003c0e <HAL_RCC_OscConfig+0x37e>
 8003c30:	e014      	b.n	8003c5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c32:	f7fe fe43 	bl	80028bc <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fe fe3f 	bl	80028bc <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e09b      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c50:	4b40      	ldr	r3, [pc, #256]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ee      	bne.n	8003c3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d105      	bne.n	8003c6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c62:	4b3c      	ldr	r3, [pc, #240]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	4a3b      	ldr	r2, [pc, #236]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 8087 	beq.w	8003d86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c78:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d061      	beq.n	8003d48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d146      	bne.n	8003d1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8c:	4b33      	ldr	r3, [pc, #204]	; (8003d5c <HAL_RCC_OscConfig+0x4cc>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c92:	f7fe fe13 	bl	80028bc <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c9a:	f7fe fe0f 	bl	80028bc <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e06d      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cac:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f0      	bne.n	8003c9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc0:	d108      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	4921      	ldr	r1, [pc, #132]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd4:	4b1f      	ldr	r3, [pc, #124]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a19      	ldr	r1, [r3, #32]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	491b      	ldr	r1, [pc, #108]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cec:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <HAL_RCC_OscConfig+0x4cc>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf2:	f7fe fde3 	bl	80028bc <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfa:	f7fe fddf 	bl	80028bc <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e03d      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x46a>
 8003d18:	e035      	b.n	8003d86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <HAL_RCC_OscConfig+0x4cc>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d20:	f7fe fdcc 	bl	80028bc <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d28:	f7fe fdc8 	bl	80028bc <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e026      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x498>
 8003d46:	e01e      	b.n	8003d86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d107      	bne.n	8003d60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e019      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_OscConfig+0x500>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d001      	beq.n	8003d86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000

08003d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0d0      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da8:	4b6a      	ldr	r3, [pc, #424]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d910      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b67      	ldr	r3, [pc, #412]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 0207 	bic.w	r2, r3, #7
 8003dbe:	4965      	ldr	r1, [pc, #404]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b63      	ldr	r3, [pc, #396]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0b8      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df0:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4a58      	ldr	r2, [pc, #352]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003df6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e08:	4b53      	ldr	r3, [pc, #332]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4a52      	ldr	r2, [pc, #328]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e14:	4b50      	ldr	r3, [pc, #320]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	494d      	ldr	r1, [pc, #308]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d040      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d107      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d115      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e07f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e52:	4b41      	ldr	r3, [pc, #260]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e073      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e62:	4b3d      	ldr	r3, [pc, #244]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e06b      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e72:	4b39      	ldr	r3, [pc, #228]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4936      	ldr	r1, [pc, #216]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e84:	f7fe fd1a 	bl	80028bc <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8c:	f7fe fd16 	bl	80028bc <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e053      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	4b2d      	ldr	r3, [pc, #180]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 020c 	and.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d1eb      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d210      	bcs.n	8003ee4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 0207 	bic.w	r2, r3, #7
 8003eca:	4922      	ldr	r1, [pc, #136]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e032      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef0:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4916      	ldr	r1, [pc, #88]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f0e:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	490e      	ldr	r1, [pc, #56]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f22:	f000 f821 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 8003f26:	4602      	mov	r2, r0
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	490a      	ldr	r1, [pc, #40]	; (8003f5c <HAL_RCC_ClockConfig+0x1c8>)
 8003f34:	5ccb      	ldrb	r3, [r1, r3]
 8003f36:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3a:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <HAL_RCC_ClockConfig+0x1cc>)
 8003f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCC_ClockConfig+0x1d0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fc8a 	bl	800285c <HAL_InitTick>

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40022000 	.word	0x40022000
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	08004ef0 	.word	0x08004ef0
 8003f60:	20000010 	.word	0x20000010
 8003f64:	20000014 	.word	0x20000014

08003f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f68:	b490      	push	{r4, r7}
 8003f6a:	b08a      	sub	sp, #40	; 0x28
 8003f6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f6e:	4b29      	ldr	r3, [pc, #164]	; (8004014 <HAL_RCC_GetSysClockFreq+0xac>)
 8003f70:	1d3c      	adds	r4, r7, #4
 8003f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f78:	f240 2301 	movw	r3, #513	; 0x201
 8003f7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	2300      	movs	r3, #0
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f92:	4b21      	ldr	r3, [pc, #132]	; (8004018 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d002      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d003      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0x46>
 8003fa6:	e02b      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fa8:	4b1c      	ldr	r3, [pc, #112]	; (800401c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003faa:	623b      	str	r3, [r7, #32]
      break;
 8003fac:	e02b      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	0c9b      	lsrs	r3, r3, #18
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	3328      	adds	r3, #40	; 0x28
 8003fb8:	443b      	add	r3, r7
 8003fba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003fbe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d012      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fca:	4b13      	ldr	r3, [pc, #76]	; (8004018 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	0c5b      	lsrs	r3, r3, #17
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	3328      	adds	r3, #40	; 0x28
 8003fd6:	443b      	add	r3, r7
 8003fd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003fdc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	4a0e      	ldr	r2, [pc, #56]	; (800401c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fe2:	fb03 f202 	mul.w	r2, r3, r2
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
 8003fee:	e004      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	4a0b      	ldr	r2, [pc, #44]	; (8004020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	623b      	str	r3, [r7, #32]
      break;
 8003ffe:	e002      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004002:	623b      	str	r3, [r7, #32]
      break;
 8004004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004006:	6a3b      	ldr	r3, [r7, #32]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3728      	adds	r7, #40	; 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bc90      	pop	{r4, r7}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	08004184 	.word	0x08004184
 8004018:	40021000 	.word	0x40021000
 800401c:	007a1200 	.word	0x007a1200
 8004020:	003d0900 	.word	0x003d0900

08004024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004028:	4b02      	ldr	r3, [pc, #8]	; (8004034 <HAL_RCC_GetHCLKFreq+0x10>)
 800402a:	681b      	ldr	r3, [r3, #0]
}
 800402c:	4618      	mov	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	20000010 	.word	0x20000010

08004038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800403c:	f7ff fff2 	bl	8004024 <HAL_RCC_GetHCLKFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	0a1b      	lsrs	r3, r3, #8
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4903      	ldr	r1, [pc, #12]	; (800405c <HAL_RCC_GetPCLK1Freq+0x24>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000
 800405c:	08004f00 	.word	0x08004f00

08004060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <RCC_Delay+0x34>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <RCC_Delay+0x38>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	0a5b      	lsrs	r3, r3, #9
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800407c:	bf00      	nop
  }
  while (Delay --);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1e5a      	subs	r2, r3, #1
 8004082:	60fa      	str	r2, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f9      	bne.n	800407c <RCC_Delay+0x1c>
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr
 8004094:	20000010 	.word	0x20000010
 8004098:	10624dd3 	.word	0x10624dd3

0800409c <memset>:
 800409c:	4603      	mov	r3, r0
 800409e:	4402      	add	r2, r0
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d100      	bne.n	80040a6 <memset+0xa>
 80040a4:	4770      	bx	lr
 80040a6:	f803 1b01 	strb.w	r1, [r3], #1
 80040aa:	e7f9      	b.n	80040a0 <memset+0x4>

080040ac <__libc_init_array>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	2600      	movs	r6, #0
 80040b0:	4d0c      	ldr	r5, [pc, #48]	; (80040e4 <__libc_init_array+0x38>)
 80040b2:	4c0d      	ldr	r4, [pc, #52]	; (80040e8 <__libc_init_array+0x3c>)
 80040b4:	1b64      	subs	r4, r4, r5
 80040b6:	10a4      	asrs	r4, r4, #2
 80040b8:	42a6      	cmp	r6, r4
 80040ba:	d109      	bne.n	80040d0 <__libc_init_array+0x24>
 80040bc:	f000 f828 	bl	8004110 <_init>
 80040c0:	2600      	movs	r6, #0
 80040c2:	4d0a      	ldr	r5, [pc, #40]	; (80040ec <__libc_init_array+0x40>)
 80040c4:	4c0a      	ldr	r4, [pc, #40]	; (80040f0 <__libc_init_array+0x44>)
 80040c6:	1b64      	subs	r4, r4, r5
 80040c8:	10a4      	asrs	r4, r4, #2
 80040ca:	42a6      	cmp	r6, r4
 80040cc:	d105      	bne.n	80040da <__libc_init_array+0x2e>
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d4:	4798      	blx	r3
 80040d6:	3601      	adds	r6, #1
 80040d8:	e7ee      	b.n	80040b8 <__libc_init_array+0xc>
 80040da:	f855 3b04 	ldr.w	r3, [r5], #4
 80040de:	4798      	blx	r3
 80040e0:	3601      	adds	r6, #1
 80040e2:	e7f2      	b.n	80040ca <__libc_init_array+0x1e>
 80040e4:	08004f08 	.word	0x08004f08
 80040e8:	08004f08 	.word	0x08004f08
 80040ec:	08004f08 	.word	0x08004f08
 80040f0:	08004f0c 	.word	0x08004f0c

080040f4 <memcpy>:
 80040f4:	440a      	add	r2, r1
 80040f6:	4291      	cmp	r1, r2
 80040f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040fc:	d100      	bne.n	8004100 <memcpy+0xc>
 80040fe:	4770      	bx	lr
 8004100:	b510      	push	{r4, lr}
 8004102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004106:	4291      	cmp	r1, r2
 8004108:	f803 4f01 	strb.w	r4, [r3, #1]!
 800410c:	d1f9      	bne.n	8004102 <memcpy+0xe>
 800410e:	bd10      	pop	{r4, pc}

08004110 <_init>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr

0800411c <_fini>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	bf00      	nop
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr
