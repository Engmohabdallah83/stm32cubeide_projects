
GPIO_LED_OOP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000039c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004a8  080004a8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004a8  080004a8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004a8  080004a8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004a8  080004a8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004a8  080004a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004ac  080004ac  000104ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004b0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004b4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004b4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000107a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000065d  00000000  00000000  000210ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00021748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000156  00000000  00000000  00021930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015344  00000000  00000000  00021a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fc7  00000000  00000000  00036dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b8ad  00000000  00000000  00038d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000604  00000000  00000000  000b4640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b4c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000490 	.word	0x08000490

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000490 	.word	0x08000490

0800014c <_ZN6ButtonC1EP12GPIO_TypeDefh>:
//		else
//		{
//			mPort->CRH = (mMode << mPin * BITS_REPRESENTS_PIN_CR);
//		}
//	}
	Button(GPIO_TypeDef* port, uint8_t pin) : mPort(port), mPin(pin)
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	71fb      	strb	r3, [r7, #7]
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	68ba      	ldr	r2, [r7, #8]
 800015e:	601a      	str	r2, [r3, #0]
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	79fa      	ldrb	r2, [r7, #7]
 8000164:	711a      	strb	r2, [r3, #4]
	{
		if(mPin < 8)
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	791b      	ldrb	r3, [r3, #4]
 800016a:	2b07      	cmp	r3, #7
 800016c:	d809      	bhi.n	8000182 <_ZN6ButtonC1EP12GPIO_TypeDefh+0x36>
		{
			mPort->CRL = (INPUT_FLOATING << mPin * BITS_REPRESENTS_PIN_CR);
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	791b      	ldrb	r3, [r3, #4]
 8000172:	009a      	lsls	r2, r3, #2
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2104      	movs	r1, #4
 800017a:	fa01 f202 	lsl.w	r2, r1, r2
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	e00a      	b.n	8000198 <_ZN6ButtonC1EP12GPIO_TypeDefh+0x4c>
		}
		else
		{
			mPort->CRH = (INPUT_FLOATING << (mPin%8) * BITS_REPRESENTS_PIN_CR);
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	791b      	ldrb	r3, [r3, #4]
 8000186:	f003 0307 	and.w	r3, r3, #7
 800018a:	009a      	lsls	r2, r3, #2
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2104      	movs	r1, #4
 8000192:	fa01 f202 	lsl.w	r2, r1, r2
 8000196:	605a      	str	r2, [r3, #4]
		}
	}
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	4618      	mov	r0, r3
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr

080001a4 <_ZN6Button12getBtnStatusEv>:
	status getBtnStatus()
 80001a4:	b480      	push	{r7}
 80001a6:	b085      	sub	sp, #20
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	{

		status value = static_cast<status>(mPort->IDR & (1<<mPin)); // read pin 4
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	689b      	ldr	r3, [r3, #8]
 80001b2:	b2da      	uxtb	r2, r3
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	791b      	ldrb	r3, [r3, #4]
 80001b8:	4619      	mov	r1, r3
 80001ba:	2301      	movs	r3, #1
 80001bc:	408b      	lsls	r3, r1
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	4013      	ands	r3, r2
 80001c2:	73fb      	strb	r3, [r7, #15]
		return value == PRESSED ? PRESSED : NOT_PRESSED;
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	bf14      	ite	ne
 80001ca:	2301      	movne	r3, #1
 80001cc:	2300      	moveq	r3, #0
 80001ce:	b2db      	uxtb	r3, r3
	}
 80001d0:	4618      	mov	r0, r3
 80001d2:	3714      	adds	r7, #20
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr

080001da <_ZN3LedC1EP12GPIO_TypeDefh>:
/************************** LED CLASS ********************************/
class Led
{
public:

	Led(GPIO_TypeDef* port, uint8_t pin) : mPort(port), mPin(pin)
 80001da:	b480      	push	{r7}
 80001dc:	b085      	sub	sp, #20
 80001de:	af00      	add	r7, sp, #0
 80001e0:	60f8      	str	r0, [r7, #12]
 80001e2:	60b9      	str	r1, [r7, #8]
 80001e4:	4613      	mov	r3, r2
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	68ba      	ldr	r2, [r7, #8]
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	79fa      	ldrb	r2, [r7, #7]
 80001f2:	711a      	strb	r2, [r3, #4]
	{
		if(pin < 8)
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	2b07      	cmp	r3, #7
 80001f8:	d809      	bhi.n	800020e <_ZN3LedC1EP12GPIO_TypeDefh+0x34>
		{
	      mPort->CRL = (OUTPUT_MAX_SPEED_50 << mPin * BITS_REPRESENTS_PIN_CR );
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	791b      	ldrb	r3, [r3, #4]
 80001fe:	009a      	lsls	r2, r3, #2
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2103      	movs	r1, #3
 8000206:	fa01 f202 	lsl.w	r2, r1, r2
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	e00a      	b.n	8000224 <_ZN3LedC1EP12GPIO_TypeDefh+0x4a>
		}
		else
		{
			mPort->CRH = (OUTPUT_MAX_SPEED_50 << (mPin%8) * BITS_REPRESENTS_PIN_CR );
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	791b      	ldrb	r3, [r3, #4]
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	009a      	lsls	r2, r3, #2
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2103      	movs	r1, #3
 800021e:	fa01 f202 	lsl.w	r2, r1, r2
 8000222:	605a      	str	r2, [r3, #4]
		}
	}
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	4618      	mov	r0, r3
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr

08000230 <_ZN3Led9switchOffEv>:
	void switchOff()
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	{
		mPort->ODR &= ~(1<<mPin); // reset (0)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	68da      	ldr	r2, [r3, #12]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	791b      	ldrb	r3, [r3, #4]
 8000242:	4619      	mov	r1, r3
 8000244:	2301      	movs	r3, #1
 8000246:	408b      	lsls	r3, r1
 8000248:	43db      	mvns	r3, r3
 800024a:	4619      	mov	r1, r3
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	400a      	ands	r2, r1
 8000252:	60da      	str	r2, [r3, #12]
	}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <_ZN3Led8switchOnEv>:

	void switchOn()
 800025e:	b480      	push	{r7}
 8000260:	b083      	sub	sp, #12
 8000262:	af00      	add	r7, sp, #0
 8000264:	6078      	str	r0, [r7, #4]
	{
		mPort->ODR |= (1<<mPin); // set (1)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	68da      	ldr	r2, [r3, #12]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	791b      	ldrb	r3, [r3, #4]
 8000270:	4619      	mov	r1, r3
 8000272:	2301      	movs	r3, #1
 8000274:	408b      	lsls	r3, r1
 8000276:	4619      	mov	r1, r3
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	430a      	orrs	r2, r1
 800027e:	60da      	str	r2, [r3, #12]
	}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
	...

0800028c <_ZN5ClockC1EP12GPIO_TypeDef>:

/****************** CLOCK CLASS *****************************/
class Clock
{
public:
	Clock(GPIO_TypeDef* port): mPort(port)
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	683a      	ldr	r2, [r7, #0]
 800029a:	601a      	str	r2, [r3, #0]
	{
		if(port == GPIOB)
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <_ZN5ClockC1EP12GPIO_TypeDef+0x48>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d106      	bne.n	80002b2 <_ZN5ClockC1EP12GPIO_TypeDef+0x26>
		{
			RCC->APB2ENR |= RCC_GPIOB_EN;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <_ZN5ClockC1EP12GPIO_TypeDef+0x4c>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a0b      	ldr	r2, [pc, #44]	; (80002d8 <_ZN5ClockC1EP12GPIO_TypeDef+0x4c>)
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	e009      	b.n	80002c6 <_ZN5ClockC1EP12GPIO_TypeDef+0x3a>
		}
		else if(port == GPIOC)
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	4a09      	ldr	r2, [pc, #36]	; (80002dc <_ZN5ClockC1EP12GPIO_TypeDef+0x50>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d105      	bne.n	80002c6 <_ZN5ClockC1EP12GPIO_TypeDef+0x3a>
		{
			RCC->APB2ENR |= RCC_GPIOC_EN;
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <_ZN5ClockC1EP12GPIO_TypeDef+0x4c>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	4a06      	ldr	r2, [pc, #24]	; (80002d8 <_ZN5ClockC1EP12GPIO_TypeDef+0x4c>)
 80002c0:	f043 0310 	orr.w	r3, r3, #16
 80002c4:	6193      	str	r3, [r2, #24]
		}

	}
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4618      	mov	r0, r3
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40010c00 	.word	0x40010c00
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40011000 	.word	0x40011000

080002e0 <_Z5Delayv>:
private:
	GPIO_TypeDef* mPort;
};
void Delay()
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
	for(int i=0;i<10000;i++);
 80002e6:	2300      	movs	r3, #0
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	e002      	b.n	80002f2 <_Z5Delayv+0x12>
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3301      	adds	r3, #1
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80002f8:	4293      	cmp	r3, r2
 80002fa:	ddf7      	ble.n	80002ec <_Z5Delayv+0xc>
}
 80002fc:	bf00      	nop
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr

08000308 <main>:
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
	Clock clock1(GPIOC);
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	4918      	ldr	r1, [pc, #96]	; (8000374 <main+0x6c>)
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ffb9 	bl	800028c <_ZN5ClockC1EP12GPIO_TypeDef>
	Clock clock2(GPIOB);
 800031a:	f107 0314 	add.w	r3, r7, #20
 800031e:	4916      	ldr	r1, [pc, #88]	; (8000378 <main+0x70>)
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ffb3 	bl	800028c <_ZN5ClockC1EP12GPIO_TypeDef>

	Button button(GPIOB, PIN_B4); // port pin 4
 8000326:	f107 030c 	add.w	r3, r7, #12
 800032a:	2204      	movs	r2, #4
 800032c:	4912      	ldr	r1, [pc, #72]	; (8000378 <main+0x70>)
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ff0c 	bl	800014c <_ZN6ButtonC1EP12GPIO_TypeDefh>
	Led    led(GPIOC, PIN_C13);
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	220d      	movs	r2, #13
 8000338:	490e      	ldr	r1, [pc, #56]	; (8000374 <main+0x6c>)
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff4d 	bl	80001da <_ZN3LedC1EP12GPIO_TypeDefh>
	while(1)
	{
		status btnStatus = button.getBtnStatus();
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff2d 	bl	80001a4 <_ZN6Button12getBtnStatusEv>
 800034a:	4603      	mov	r3, r0
 800034c:	77fb      	strb	r3, [r7, #31]
		if(btnStatus == PRESSED)
 800034e:	7ffb      	ldrb	r3, [r7, #31]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d106      	bne.n	8000362 <main+0x5a>
		{
			led.switchOn();
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff81 	bl	800025e <_ZN3Led8switchOnEv>
			Delay();
 800035c:	f7ff ffc0 	bl	80002e0 <_Z5Delayv>
 8000360:	e7ee      	b.n	8000340 <main+0x38>
		}
		else if(btnStatus == NOT_PRESSED)
 8000362:	7ffb      	ldrb	r3, [r7, #31]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d1eb      	bne.n	8000340 <main+0x38>
		{
			led.switchOff();
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff60 	bl	8000230 <_ZN3Led9switchOffEv>
		}
		else
		{
			/* NOT VALID STATUS */
		}
	}
 8000370:	e7e6      	b.n	8000340 <main+0x38>
 8000372:	bf00      	nop
 8000374:	40011000 	.word	0x40011000
 8000378:	40010c00 	.word	0x40010c00

0800037c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <NMI_Handler+0x4>

08000382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000386:	e7fe      	b.n	8000386 <HardFault_Handler+0x4>

08000388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800038c:	e7fe      	b.n	800038c <MemManage_Handler+0x4>

0800038e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000392:	e7fe      	b.n	8000392 <BusFault_Handler+0x4>

08000394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000398:	e7fe      	b.n	8000398 <UsageFault_Handler+0x4>

0800039a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr

080003a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr

080003be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c2:	f000 f82f 	bl	8000424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}

080003ca <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
	...

080003d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d8:	480c      	ldr	r0, [pc, #48]	; (800040c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003da:	490d      	ldr	r1, [pc, #52]	; (8000410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003dc:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a0a      	ldr	r2, [pc, #40]	; (8000418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003f0:	4c0a      	ldr	r4, [pc, #40]	; (800041c <LoopFillZerobss+0x22>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003fe:	f7ff ffe4 	bl	80003ca <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000402:	f000 f821 	bl	8000448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000406:	f7ff ff7f 	bl	8000308 <main>
  bx lr
 800040a:	4770      	bx	lr
  ldr r0, =_sdata
 800040c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000410:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000414:	080004b0 	.word	0x080004b0
  ldr r2, =_sbss
 8000418:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800041c:	20000024 	.word	0x20000024

08000420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000420:	e7fe      	b.n	8000420 <ADC1_2_IRQHandler>
	...

08000424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <HAL_IncTick+0x1c>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	461a      	mov	r2, r3
 800042e:	4b05      	ldr	r3, [pc, #20]	; (8000444 <HAL_IncTick+0x20>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4413      	add	r3, r2
 8000434:	4a03      	ldr	r2, [pc, #12]	; (8000444 <HAL_IncTick+0x20>)
 8000436:	6013      	str	r3, [r2, #0]
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	20000000 	.word	0x20000000
 8000444:	20000020 	.word	0x20000020

08000448 <__libc_init_array>:
 8000448:	b570      	push	{r4, r5, r6, lr}
 800044a:	2600      	movs	r6, #0
 800044c:	4d0c      	ldr	r5, [pc, #48]	; (8000480 <__libc_init_array+0x38>)
 800044e:	4c0d      	ldr	r4, [pc, #52]	; (8000484 <__libc_init_array+0x3c>)
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	10a4      	asrs	r4, r4, #2
 8000454:	42a6      	cmp	r6, r4
 8000456:	d109      	bne.n	800046c <__libc_init_array+0x24>
 8000458:	f000 f81a 	bl	8000490 <_init>
 800045c:	2600      	movs	r6, #0
 800045e:	4d0a      	ldr	r5, [pc, #40]	; (8000488 <__libc_init_array+0x40>)
 8000460:	4c0a      	ldr	r4, [pc, #40]	; (800048c <__libc_init_array+0x44>)
 8000462:	1b64      	subs	r4, r4, r5
 8000464:	10a4      	asrs	r4, r4, #2
 8000466:	42a6      	cmp	r6, r4
 8000468:	d105      	bne.n	8000476 <__libc_init_array+0x2e>
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000470:	4798      	blx	r3
 8000472:	3601      	adds	r6, #1
 8000474:	e7ee      	b.n	8000454 <__libc_init_array+0xc>
 8000476:	f855 3b04 	ldr.w	r3, [r5], #4
 800047a:	4798      	blx	r3
 800047c:	3601      	adds	r6, #1
 800047e:	e7f2      	b.n	8000466 <__libc_init_array+0x1e>
 8000480:	080004a8 	.word	0x080004a8
 8000484:	080004a8 	.word	0x080004a8
 8000488:	080004a8 	.word	0x080004a8
 800048c:	080004ac 	.word	0x080004ac

08000490 <_init>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	bf00      	nop
 8000494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000496:	bc08      	pop	{r3}
 8000498:	469e      	mov	lr, r3
 800049a:	4770      	bx	lr

0800049c <_fini>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	bf00      	nop
 80004a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a2:	bc08      	pop	{r3}
 80004a4:	469e      	mov	lr, r3
 80004a6:	4770      	bx	lr
