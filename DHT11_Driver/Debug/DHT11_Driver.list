
DHT11_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010f8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001208  08001208  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001208  08001208  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001208  08001208  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001208  08001208  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001208  08001208  00011208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800120c  0800120c  0001120c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001210  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08001214  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001214  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c3e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000065b  00000000  00000000  00020cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00021310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000156  00000000  00000000  00021500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001321  00000000  00000000  00021656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a1a  00000000  00000000  00022977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b922  00000000  00000000  00024391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000067c  00000000  00000000  0009fcb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000a0330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000004 	.word	0x20000004
 800012c:	00000000 	.word	0x00000000
 8000130:	080011f0 	.word	0x080011f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000008 	.word	0x20000008
 800014c:	080011f0 	.word	0x080011f0

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <DHT11_ReadPin>:
 * DHT11 Data PIN Read
 * READ GPIO PIN of DHT11 PIN of DHT11 PORT
 * Return the PIN value
 */
PIN_Val DHT11_ReadPin(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
	PIN_Val u8ReadPin;
	GPIO_PR(DHT11_PORT, DHT11_PIN, &u8ReadPin);
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	461a      	mov	r2, r3
 80007c6:	2108      	movs	r1, #8
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 fb55 	bl	8000e78 <GPIO_PR>
	return u8ReadPin;
 80007ce:	79fb      	ldrb	r3, [r7, #7]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <DHT11_Start>:
 * Set the pin (data) as output
 * Pull the pin low and wait for 18ms
 * set the pin as input for receiving the data
 */
void DHT11_Start (void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
//	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
	GPIO_PDir(DHT11_PORT, DHT11_PIN, GPIO_OUTPUT_50_PP);
 80007dc:	2203      	movs	r2, #3
 80007de:	2108      	movs	r1, #8
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 f8e5 	bl	80009b0 <GPIO_PDir>
//	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
	GPIO_PW(DHT11_PORT, DHT11_PIN, GPIO_LOW);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2108      	movs	r1, #8
 80007ea:	2000      	movs	r0, #0
 80007ec:	f000 fae4 	bl	8000db8 <GPIO_PW>
	Delay_ms(15);   // wait for 18ms
 80007f0:	200f      	movs	r0, #15
 80007f2:	f000 fc2c 	bl	800104e <Delay_ms>
//	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
	GPIO_IN_PULLUP(DHT11_PORT, DHT11_PIN);
 80007f6:	2108      	movs	r1, #8
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 f9bd 	bl	8000b78 <GPIO_IN_PULLUP>

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}

08000802 <Check_Response>:
 * wait for 40 us
 * check if the pin is low, than wait for 80 us. This will totally be a delay of 120 us and the pin should be high now
 * Check if the pin is high. If it is, than the response is OK
 */
uint8 Check_Response (void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
	uint8 Response = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	71fb      	strb	r3, [r7, #7]
	Delay_us(32);
 800080c:	2020      	movs	r0, #32
 800080e:	f000 fc13 	bl	8001038 <Delay_us>
//	HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN);
	if (!( DHT11_ReadPin() ))
 8000812:	f7ff ffd3 	bl	80007bc <DHT11_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d10c      	bne.n	8000836 <Check_Response+0x34>
	{
		Delay_us(72);
 800081c:	2048      	movs	r0, #72	; 0x48
 800081e:	f000 fc0b 	bl	8001038 <Delay_us>
//		HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN);
		if ( DHT11_ReadPin() ) Response = 1;
 8000822:	f7ff ffcb 	bl	80007bc <DHT11_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d002      	beq.n	8000832 <Check_Response+0x30>
 800082c:	2301      	movs	r3, #1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	e001      	b.n	8000836 <Check_Response+0x34>
		else Response = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	71fb      	strb	r3, [r7, #7]
	}
	while ( DHT11_ReadPin() );   // wait for the pin to go low
 8000836:	bf00      	nop
 8000838:	f7ff ffc0 	bl	80007bc <DHT11_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1fa      	bne.n	8000838 <Check_Response+0x36>

	return Response;
 8000842:	79fb      	ldrb	r3, [r7, #7]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <DHT11_Read>:
 * Wait for the pin to go high
 * Wait for 40 us. This is because the length of “0” bit is 26-28 us  and if the pin is high after 40 us, it indicates that the bit is “1”
 * write the respective values to the variable
 */
uint8 DHT11_Read (void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	uint8 i=0,j;
 8000852:	2300      	movs	r3, #0
 8000854:	71fb      	strb	r3, [r7, #7]
	for (j=0;j<8;j++)
 8000856:	2300      	movs	r3, #0
 8000858:	71bb      	strb	r3, [r7, #6]
 800085a:	e031      	b.n	80008c0 <DHT11_Read+0x74>
	{
		while (!( DHT11_ReadPin() ));   // wait for the pin to go high
 800085c:	bf00      	nop
 800085e:	f7ff ffad 	bl	80007bc <DHT11_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d0fa      	beq.n	800085e <DHT11_Read+0x12>
		Delay_us(30) ;   // wait for 40 us
 8000868:	201e      	movs	r0, #30
 800086a:	f000 fbe5 	bl	8001038 <Delay_us>
		if (!( DHT11_ReadPin() ))   // if the pin is low
 800086e:	f7ff ffa5 	bl	80007bc <DHT11_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10e      	bne.n	8000896 <DHT11_Read+0x4a>
		{
			i&= ~(1<<(7-j));   // write 0
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2201      	movs	r2, #1
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	b25b      	sxtb	r3, r3
 8000886:	43db      	mvns	r3, r3
 8000888:	b25a      	sxtb	r2, r3
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	4013      	ands	r3, r2
 8000890:	b25b      	sxtb	r3, r3
 8000892:	71fb      	strb	r3, [r7, #7]
 8000894:	e00b      	b.n	80008ae <DHT11_Read+0x62>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	f1c3 0307 	rsb	r3, r3, #7
 800089c:	2201      	movs	r2, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	b25a      	sxtb	r2, r3
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	71fb      	strb	r3, [r7, #7]
		while ( DHT11_ReadPin() );  // wait for the pin to go low
 80008ae:	bf00      	nop
 80008b0:	f7ff ff84 	bl	80007bc <DHT11_ReadPin>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1fa      	bne.n	80008b0 <DHT11_Read+0x64>
	for (j=0;j<8;j++)
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	3301      	adds	r3, #1
 80008be:	71bb      	strb	r3, [r7, #6]
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	2b07      	cmp	r3, #7
 80008c4:	d9ca      	bls.n	800085c <DHT11_Read+0x10>
	}
	return i;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <DHT11_ReadAll>:
 * Loop on Call DHT11_Read for 5 Times
 * Fill Data Array
 */

void DHT11_ReadAll(uint8 * pu8Data)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	do{
		DHT11_Start();
 80008d8:	f7ff ff7e 	bl	80007d8 <DHT11_Start>

	}while( !(Check_Response()) );
 80008dc:	f7ff ff91 	bl	8000802 <Check_Response>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0f8      	beq.n	80008d8 <DHT11_ReadAll+0x8>

	for(uint8 i = 0; i<5; i++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	e009      	b.n	8000900 <DHT11_ReadAll+0x30>
	{
		pu8Data[i] = DHT11_Read();
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	18d4      	adds	r4, r2, r3
 80008f2:	f7ff ffab 	bl	800084c <DHT11_Read>
 80008f6:	4603      	mov	r3, r0
 80008f8:	7023      	strb	r3, [r4, #0]
	for(uint8 i = 0; i<5; i++)
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	3301      	adds	r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	2b04      	cmp	r3, #4
 8000904:	d9f2      	bls.n	80008ec <DHT11_ReadAll+0x1c>
	}
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bd90      	pop	{r4, r7, pc}

08000910 <DHT11_ReadData>:
 * call Read All function
 * Assign by value Humidity Data int data[0] + decimal data[1]
 * Assign by value Humidity Data int data[2] + decimal data[3]
 */
void DHT11_ReadData(float * Cpy_f32Hum , float * Cpy_f32Temp)
{
 8000910:	b5b0      	push	{r4, r5, r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
	uint8 u8AllData[5];
	DHT11_ReadAll(u8AllData);
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffd6 	bl	80008d0 <DHT11_ReadAll>
	* Cpy_f32Hum  = (u8AllData[0]+ u8AllData[1] * 0.1);
 8000924:	7a3b      	ldrb	r3, [r7, #8]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe8e 	bl	8000648 <__aeabi_i2d>
 800092c:	4604      	mov	r4, r0
 800092e:	460d      	mov	r5, r1
 8000930:	7a7b      	ldrb	r3, [r7, #9]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fe88 	bl	8000648 <__aeabi_i2d>
 8000938:	a31b      	add	r3, pc, #108	; (adr r3, 80009a8 <DHT11_ReadData+0x98>)
 800093a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800093e:	f7ff fc07 	bl	8000150 <__aeabi_dmul>
 8000942:	4602      	mov	r2, r0
 8000944:	460b      	mov	r3, r1
 8000946:	4620      	mov	r0, r4
 8000948:	4629      	mov	r1, r5
 800094a:	f7ff fd31 	bl	80003b0 <__adddf3>
 800094e:	4602      	mov	r2, r0
 8000950:	460b      	mov	r3, r1
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	f7ff fee1 	bl	800071c <__aeabi_d2f>
 800095a:	4602      	mov	r2, r0
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	601a      	str	r2, [r3, #0]
	* Cpy_f32Temp = (u8AllData[2]+ u8AllData[3] * 0.1);
 8000960:	7abb      	ldrb	r3, [r7, #10]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fe70 	bl	8000648 <__aeabi_i2d>
 8000968:	4604      	mov	r4, r0
 800096a:	460d      	mov	r5, r1
 800096c:	7afb      	ldrb	r3, [r7, #11]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fe6a 	bl	8000648 <__aeabi_i2d>
 8000974:	a30c      	add	r3, pc, #48	; (adr r3, 80009a8 <DHT11_ReadData+0x98>)
 8000976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800097a:	f7ff fbe9 	bl	8000150 <__aeabi_dmul>
 800097e:	4602      	mov	r2, r0
 8000980:	460b      	mov	r3, r1
 8000982:	4620      	mov	r0, r4
 8000984:	4629      	mov	r1, r5
 8000986:	f7ff fd13 	bl	80003b0 <__adddf3>
 800098a:	4602      	mov	r2, r0
 800098c:	460b      	mov	r3, r1
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	f7ff fec3 	bl	800071c <__aeabi_d2f>
 8000996:	4602      	mov	r2, r0
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bdb0      	pop	{r4, r5, r7, pc}
 80009a4:	f3af 8000 	nop.w
 80009a8:	9999999a 	.word	0x9999999a
 80009ac:	3fb99999 	.word	0x3fb99999

080009b0 <GPIO_PDir>:
#include 	"GPIO_Private.h"
#include 	"RCC_Interface.h"


Std_ReturnType GPIO_PDir(uint8 Copy_u8PortId,uint8 Copy_u8PinId,uint8 Copy_u8Diretion)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
 80009ba:	460b      	mov	r3, r1
 80009bc:	71bb      	strb	r3, [r7, #6]
 80009be:	4613      	mov	r3, r2
 80009c0:	717b      	strb	r3, [r7, #5]
	/*		Range Check				*/
		if( (Copy_u8PinId < 8) && (Copy_u8PortId < 3))			/*	LOW Port */
 80009c2:	79bb      	ldrb	r3, [r7, #6]
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	d862      	bhi.n	8000a8e <GPIO_PDir+0xde>
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d85f      	bhi.n	8000a8e <GPIO_PDir+0xde>
		{
			switch(Copy_u8PortId)
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d03e      	beq.n	8000a52 <GPIO_PDir+0xa2>
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	dc58      	bgt.n	8000a8a <GPIO_PDir+0xda>
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d002      	beq.n	80009e2 <GPIO_PDir+0x32>
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d01c      	beq.n	8000a1a <GPIO_PDir+0x6a>
 80009e0:	e053      	b.n	8000a8a <GPIO_PDir+0xda>
			{
			case GPIO_PORTA:
				RCC_voidEnablePerClk(RCC_APB2 , RCC_GPIOA);
 80009e2:	2102      	movs	r1, #2
 80009e4:	2002      	movs	r0, #2
 80009e6:	f000 faab 	bl	8000f40 <RCC_voidEnablePerClk>
				/*		Clear the Specific for bits for the pin		*/
				mGPIOA->CRL	&=	~(0b1111<<(Copy_u8PinId*4));
 80009ea:	4b60      	ldr	r3, [pc, #384]	; (8000b6c <GPIO_PDir+0x1bc>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	79ba      	ldrb	r2, [r7, #6]
 80009f0:	0092      	lsls	r2, r2, #2
 80009f2:	210f      	movs	r1, #15
 80009f4:	fa01 f202 	lsl.w	r2, r1, r2
 80009f8:	43d2      	mvns	r2, r2
 80009fa:	4611      	mov	r1, r2
 80009fc:	4a5b      	ldr	r2, [pc, #364]	; (8000b6c <GPIO_PDir+0x1bc>)
 80009fe:	400b      	ands	r3, r1
 8000a00:	6013      	str	r3, [r2, #0]
				/*		Set the Specific for bits for the pin		*/
				mGPIOA->CRL	|=	 (Copy_u8Diretion<<(Copy_u8PinId*4));
 8000a02:	4b5a      	ldr	r3, [pc, #360]	; (8000b6c <GPIO_PDir+0x1bc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	7979      	ldrb	r1, [r7, #5]
 8000a08:	79ba      	ldrb	r2, [r7, #6]
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a10:	4611      	mov	r1, r2
 8000a12:	4a56      	ldr	r2, [pc, #344]	; (8000b6c <GPIO_PDir+0x1bc>)
 8000a14:	430b      	orrs	r3, r1
 8000a16:	6013      	str	r3, [r2, #0]
				break;
 8000a18:	e037      	b.n	8000a8a <GPIO_PDir+0xda>

			case GPIO_PORTB:
				RCC_voidEnablePerClk(RCC_APB2 , RCC_GPIOB);
 8000a1a:	2103      	movs	r1, #3
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f000 fa8f 	bl	8000f40 <RCC_voidEnablePerClk>
				/*		Clear the Specific for bits for the pin		*/
				mGPIOB->CRL	&=	~(0b1111<<(Copy_u8PinId*4));
 8000a22:	4b53      	ldr	r3, [pc, #332]	; (8000b70 <GPIO_PDir+0x1c0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	79ba      	ldrb	r2, [r7, #6]
 8000a28:	0092      	lsls	r2, r2, #2
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a30:	43d2      	mvns	r2, r2
 8000a32:	4611      	mov	r1, r2
 8000a34:	4a4e      	ldr	r2, [pc, #312]	; (8000b70 <GPIO_PDir+0x1c0>)
 8000a36:	400b      	ands	r3, r1
 8000a38:	6013      	str	r3, [r2, #0]
				/*		Set the Specific for bits for the pin		*/
				mGPIOB->CRL	|=	 (Copy_u8Diretion<<(Copy_u8PinId*4));
 8000a3a:	4b4d      	ldr	r3, [pc, #308]	; (8000b70 <GPIO_PDir+0x1c0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	7979      	ldrb	r1, [r7, #5]
 8000a40:	79ba      	ldrb	r2, [r7, #6]
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	fa01 f202 	lsl.w	r2, r1, r2
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4a49      	ldr	r2, [pc, #292]	; (8000b70 <GPIO_PDir+0x1c0>)
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	6013      	str	r3, [r2, #0]
				break;
 8000a50:	e01b      	b.n	8000a8a <GPIO_PDir+0xda>

			case GPIO_PORTC:
				RCC_voidEnablePerClk(RCC_APB2 , RCC_GPIOC);
 8000a52:	2104      	movs	r1, #4
 8000a54:	2002      	movs	r0, #2
 8000a56:	f000 fa73 	bl	8000f40 <RCC_voidEnablePerClk>
				/*		Clear the Specific for bits for the pin		*/
				mGPIOC->CRL	&=	~(0b1111<<(Copy_u8PinId*4));
 8000a5a:	4b46      	ldr	r3, [pc, #280]	; (8000b74 <GPIO_PDir+0x1c4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	79ba      	ldrb	r2, [r7, #6]
 8000a60:	0092      	lsls	r2, r2, #2
 8000a62:	210f      	movs	r1, #15
 8000a64:	fa01 f202 	lsl.w	r2, r1, r2
 8000a68:	43d2      	mvns	r2, r2
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4a41      	ldr	r2, [pc, #260]	; (8000b74 <GPIO_PDir+0x1c4>)
 8000a6e:	400b      	ands	r3, r1
 8000a70:	6013      	str	r3, [r2, #0]
				/*		Set the Specific for bits for the pin		*/
				mGPIOC->CRL	|=	 (Copy_u8Diretion<<(Copy_u8PinId*4));
 8000a72:	4b40      	ldr	r3, [pc, #256]	; (8000b74 <GPIO_PDir+0x1c4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	7979      	ldrb	r1, [r7, #5]
 8000a78:	79ba      	ldrb	r2, [r7, #6]
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a80:	4611      	mov	r1, r2
 8000a82:	4a3c      	ldr	r2, [pc, #240]	; (8000b74 <GPIO_PDir+0x1c4>)
 8000a84:	430b      	orrs	r3, r1
 8000a86:	6013      	str	r3, [r2, #0]
				break;
 8000a88:	bf00      	nop
			}
			return E_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e069      	b.n	8000b62 <GPIO_PDir+0x1b2>
		}
		else if( (Copy_u8PinId < 16) && (Copy_u8PortId < 3))	/*	HIGH Port */
 8000a8e:	79bb      	ldrb	r3, [r7, #6]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d865      	bhi.n	8000b60 <GPIO_PDir+0x1b0>
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d862      	bhi.n	8000b60 <GPIO_PDir+0x1b0>
		{
			Copy_u8PinId -= 8 ; /* Subtract 8 from pin value in order to access CRH */
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	3b08      	subs	r3, #8
 8000a9e:	71bb      	strb	r3, [r7, #6]
			switch(Copy_u8PortId)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d03e      	beq.n	8000b24 <GPIO_PDir+0x174>
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	dc58      	bgt.n	8000b5c <GPIO_PDir+0x1ac>
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d002      	beq.n	8000ab4 <GPIO_PDir+0x104>
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d01c      	beq.n	8000aec <GPIO_PDir+0x13c>
 8000ab2:	e053      	b.n	8000b5c <GPIO_PDir+0x1ac>
			{
			case GPIO_PORTA:
				RCC_voidEnablePerClk(RCC_APB2 , RCC_GPIOA);
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	2002      	movs	r0, #2
 8000ab8:	f000 fa42 	bl	8000f40 <RCC_voidEnablePerClk>
				/*		Clear the Specific for bits for the pin		*/
				mGPIOA->CRH	&=	~(0b1111<<(Copy_u8PinId*4));
 8000abc:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <GPIO_PDir+0x1bc>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	79ba      	ldrb	r2, [r7, #6]
 8000ac2:	0092      	lsls	r2, r2, #2
 8000ac4:	210f      	movs	r1, #15
 8000ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aca:	43d2      	mvns	r2, r2
 8000acc:	4611      	mov	r1, r2
 8000ace:	4a27      	ldr	r2, [pc, #156]	; (8000b6c <GPIO_PDir+0x1bc>)
 8000ad0:	400b      	ands	r3, r1
 8000ad2:	6053      	str	r3, [r2, #4]
				/*		Set the Specific for bits for the pin		*/
				mGPIOA->CRH	|=	 (Copy_u8Diretion<<(Copy_u8PinId*4));
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <GPIO_PDir+0x1bc>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	7979      	ldrb	r1, [r7, #5]
 8000ada:	79ba      	ldrb	r2, [r7, #6]
 8000adc:	0092      	lsls	r2, r2, #2
 8000ade:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <GPIO_PDir+0x1bc>)
 8000ae6:	430b      	orrs	r3, r1
 8000ae8:	6053      	str	r3, [r2, #4]
				break;
 8000aea:	e037      	b.n	8000b5c <GPIO_PDir+0x1ac>
			case GPIO_PORTB:
				RCC_voidEnablePerClk(RCC_APB2 , RCC_GPIOB);
 8000aec:	2103      	movs	r1, #3
 8000aee:	2002      	movs	r0, #2
 8000af0:	f000 fa26 	bl	8000f40 <RCC_voidEnablePerClk>
				/*		Clear the Specific for bits for the pin		*/
				mGPIOB->CRH	&=	~(0b1111<<(Copy_u8PinId*4));
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <GPIO_PDir+0x1c0>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	79ba      	ldrb	r2, [r7, #6]
 8000afa:	0092      	lsls	r2, r2, #2
 8000afc:	210f      	movs	r1, #15
 8000afe:	fa01 f202 	lsl.w	r2, r1, r2
 8000b02:	43d2      	mvns	r2, r2
 8000b04:	4611      	mov	r1, r2
 8000b06:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <GPIO_PDir+0x1c0>)
 8000b08:	400b      	ands	r3, r1
 8000b0a:	6053      	str	r3, [r2, #4]
				/*		Set the Specific for bits for the pin		*/
				mGPIOB->CRH	|=	 (Copy_u8Diretion<<(Copy_u8PinId*4));
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <GPIO_PDir+0x1c0>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	7979      	ldrb	r1, [r7, #5]
 8000b12:	79ba      	ldrb	r2, [r7, #6]
 8000b14:	0092      	lsls	r2, r2, #2
 8000b16:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <GPIO_PDir+0x1c0>)
 8000b1e:	430b      	orrs	r3, r1
 8000b20:	6053      	str	r3, [r2, #4]
				break;
 8000b22:	e01b      	b.n	8000b5c <GPIO_PDir+0x1ac>
			case GPIO_PORTC:
				RCC_voidEnablePerClk(RCC_APB2 , RCC_GPIOC);
 8000b24:	2104      	movs	r1, #4
 8000b26:	2002      	movs	r0, #2
 8000b28:	f000 fa0a 	bl	8000f40 <RCC_voidEnablePerClk>
				/*		Clear the Specific for bits for the pin		*/
				mGPIOC->CRH	&=	~(0b1111<<(Copy_u8PinId*4));
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <GPIO_PDir+0x1c4>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	79ba      	ldrb	r2, [r7, #6]
 8000b32:	0092      	lsls	r2, r2, #2
 8000b34:	210f      	movs	r1, #15
 8000b36:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3a:	43d2      	mvns	r2, r2
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <GPIO_PDir+0x1c4>)
 8000b40:	400b      	ands	r3, r1
 8000b42:	6053      	str	r3, [r2, #4]
				/*		Set the Specific for bits for the pin		*/
				mGPIOC->CRH	|=	 (Copy_u8Diretion<<(Copy_u8PinId*4));
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <GPIO_PDir+0x1c4>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	7979      	ldrb	r1, [r7, #5]
 8000b4a:	79ba      	ldrb	r2, [r7, #6]
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b52:	4611      	mov	r1, r2
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <GPIO_PDir+0x1c4>)
 8000b56:	430b      	orrs	r3, r1
 8000b58:	6053      	str	r3, [r2, #4]
				break;
 8000b5a:	bf00      	nop
			}
			return E_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e000      	b.n	8000b62 <GPIO_PDir+0x1b2>
		}
		else
		{
			/* 		Return error		*/
			return E_NOT_OK;
 8000b60:	2301      	movs	r3, #1
		}
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010800 	.word	0x40010800
 8000b70:	40010c00 	.word	0x40010c00
 8000b74:	40011000 	.word	0x40011000

08000b78 <GPIO_IN_PULLUP>:

Std_ReturnType GPIO_IN_PULLUP(uint8 Copy_u8PortId , uint8 Copy_u8PinId)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	460a      	mov	r2, r1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
	uint8 PinNum = Copy_u8PinId;
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	73fb      	strb	r3, [r7, #15]
	/*		Range Check				*/
	if( (Copy_u8PinId < 8) && (Copy_u8PortId < 3))			/*	LOW Port */
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	2b07      	cmp	r3, #7
 8000b90:	d87d      	bhi.n	8000c8e <GPIO_IN_PULLUP+0x116>
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d87a      	bhi.n	8000c8e <GPIO_IN_PULLUP+0x116>
	{
		switch(Copy_u8PortId)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d050      	beq.n	8000c40 <GPIO_IN_PULLUP+0xc8>
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	dc73      	bgt.n	8000c8a <GPIO_IN_PULLUP+0x112>
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <GPIO_IN_PULLUP+0x34>
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d025      	beq.n	8000bf6 <GPIO_IN_PULLUP+0x7e>
 8000baa:	e06e      	b.n	8000c8a <GPIO_IN_PULLUP+0x112>
		{
		case GPIO_PORTA:
			RCC_voidEnablePerClk(RCC_APB2 , RCC_GPIOA);
 8000bac:	2102      	movs	r1, #2
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f000 f9c6 	bl	8000f40 <RCC_voidEnablePerClk>
			/*		Clear the Specific for bits for the pin		*/
			mGPIOA->CRL	&=	~(0b1111<<(Copy_u8PinId*4));
 8000bb4:	4b7d      	ldr	r3, [pc, #500]	; (8000dac <GPIO_IN_PULLUP+0x234>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	79ba      	ldrb	r2, [r7, #6]
 8000bba:	0092      	lsls	r2, r2, #2
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc2:	43d2      	mvns	r2, r2
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4a79      	ldr	r2, [pc, #484]	; (8000dac <GPIO_IN_PULLUP+0x234>)
 8000bc8:	400b      	ands	r3, r1
 8000bca:	6013      	str	r3, [r2, #0]
			/*		Set the Specific for bits for the pin		*/
			mGPIOA->CRL	|=	 (GPIO_INPUT_PULL<<PinNum);
 8000bcc:	4b77      	ldr	r3, [pc, #476]	; (8000dac <GPIO_IN_PULLUP+0x234>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	7bfa      	ldrb	r2, [r7, #15]
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4a74      	ldr	r2, [pc, #464]	; (8000dac <GPIO_IN_PULLUP+0x234>)
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	6013      	str	r3, [r2, #0]
			//Set PIN PULLUP
			mGPIOA->ODR |= (1<<PinNum);
 8000be0:	4b72      	ldr	r3, [pc, #456]	; (8000dac <GPIO_IN_PULLUP+0x234>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	7bfa      	ldrb	r2, [r7, #15]
 8000be6:	2101      	movs	r1, #1
 8000be8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bec:	4611      	mov	r1, r2
 8000bee:	4a6f      	ldr	r2, [pc, #444]	; (8000dac <GPIO_IN_PULLUP+0x234>)
 8000bf0:	430b      	orrs	r3, r1
 8000bf2:	60d3      	str	r3, [r2, #12]
			break;
 8000bf4:	e049      	b.n	8000c8a <GPIO_IN_PULLUP+0x112>

		case GPIO_PORTB:
			RCC_voidEnablePerClk(RCC_APB2 , RCC_GPIOB);
 8000bf6:	2103      	movs	r1, #3
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f000 f9a1 	bl	8000f40 <RCC_voidEnablePerClk>
			/*		Clear the Specific for bits for the pin		*/
			mGPIOB->CRL	&=	~(0b1111<<(Copy_u8PinId*4));
 8000bfe:	4b6c      	ldr	r3, [pc, #432]	; (8000db0 <GPIO_IN_PULLUP+0x238>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	79ba      	ldrb	r2, [r7, #6]
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	210f      	movs	r1, #15
 8000c08:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0c:	43d2      	mvns	r2, r2
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4a67      	ldr	r2, [pc, #412]	; (8000db0 <GPIO_IN_PULLUP+0x238>)
 8000c12:	400b      	ands	r3, r1
 8000c14:	6013      	str	r3, [r2, #0]
			/*		Set the Specific for bits for the pin		*/
			mGPIOB->CRL	|=	 (GPIO_INPUT_PULL<<PinNum);
 8000c16:	4b66      	ldr	r3, [pc, #408]	; (8000db0 <GPIO_IN_PULLUP+0x238>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	7bfa      	ldrb	r2, [r7, #15]
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c22:	4611      	mov	r1, r2
 8000c24:	4a62      	ldr	r2, [pc, #392]	; (8000db0 <GPIO_IN_PULLUP+0x238>)
 8000c26:	430b      	orrs	r3, r1
 8000c28:	6013      	str	r3, [r2, #0]
			//Set PIN PULLUP
			mGPIOB->ODR |= (1<<PinNum);
 8000c2a:	4b61      	ldr	r3, [pc, #388]	; (8000db0 <GPIO_IN_PULLUP+0x238>)
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	7bfa      	ldrb	r2, [r7, #15]
 8000c30:	2101      	movs	r1, #1
 8000c32:	fa01 f202 	lsl.w	r2, r1, r2
 8000c36:	4611      	mov	r1, r2
 8000c38:	4a5d      	ldr	r2, [pc, #372]	; (8000db0 <GPIO_IN_PULLUP+0x238>)
 8000c3a:	430b      	orrs	r3, r1
 8000c3c:	60d3      	str	r3, [r2, #12]
			break;
 8000c3e:	e024      	b.n	8000c8a <GPIO_IN_PULLUP+0x112>

		case GPIO_PORTC:
			RCC_voidEnablePerClk(RCC_APB2 , RCC_GPIOC);
 8000c40:	2104      	movs	r1, #4
 8000c42:	2002      	movs	r0, #2
 8000c44:	f000 f97c 	bl	8000f40 <RCC_voidEnablePerClk>
			/*		Clear the Specific for bits for the pin		*/
			mGPIOC->CRL	&=	~(0b1111<<(Copy_u8PinId*4));
 8000c48:	4b5a      	ldr	r3, [pc, #360]	; (8000db4 <GPIO_IN_PULLUP+0x23c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	79ba      	ldrb	r2, [r7, #6]
 8000c4e:	0092      	lsls	r2, r2, #2
 8000c50:	210f      	movs	r1, #15
 8000c52:	fa01 f202 	lsl.w	r2, r1, r2
 8000c56:	43d2      	mvns	r2, r2
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4a56      	ldr	r2, [pc, #344]	; (8000db4 <GPIO_IN_PULLUP+0x23c>)
 8000c5c:	400b      	ands	r3, r1
 8000c5e:	6013      	str	r3, [r2, #0]
			/*		Set the Specific for bits for the pin		*/
			mGPIOC->CRL	|=	 (GPIO_INPUT_PULL<<PinNum);
 8000c60:	4b54      	ldr	r3, [pc, #336]	; (8000db4 <GPIO_IN_PULLUP+0x23c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	7bfa      	ldrb	r2, [r7, #15]
 8000c66:	2108      	movs	r1, #8
 8000c68:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4a51      	ldr	r2, [pc, #324]	; (8000db4 <GPIO_IN_PULLUP+0x23c>)
 8000c70:	430b      	orrs	r3, r1
 8000c72:	6013      	str	r3, [r2, #0]
			//Set PIN PULLUP
			mGPIOC->ODR |= (1<<PinNum);
 8000c74:	4b4f      	ldr	r3, [pc, #316]	; (8000db4 <GPIO_IN_PULLUP+0x23c>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	7bfa      	ldrb	r2, [r7, #15]
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c80:	4611      	mov	r1, r2
 8000c82:	4a4c      	ldr	r2, [pc, #304]	; (8000db4 <GPIO_IN_PULLUP+0x23c>)
 8000c84:	430b      	orrs	r3, r1
 8000c86:	60d3      	str	r3, [r2, #12]
			break;
 8000c88:	bf00      	nop
		}
		return E_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e089      	b.n	8000da2 <GPIO_IN_PULLUP+0x22a>
	}
	else if( (Copy_u8PinId < 16) && (Copy_u8PortId < 3))	/*	HIGH Port */
 8000c8e:	79bb      	ldrb	r3, [r7, #6]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	f200 8085 	bhi.w	8000da0 <GPIO_IN_PULLUP+0x228>
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	f200 8081 	bhi.w	8000da0 <GPIO_IN_PULLUP+0x228>
	{
		Copy_u8PinId -= 8 ; /* Subtract 8 from pin value in order to access CRH */
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	3b08      	subs	r3, #8
 8000ca2:	71bb      	strb	r3, [r7, #6]
		switch(Copy_u8PortId)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d052      	beq.n	8000d50 <GPIO_IN_PULLUP+0x1d8>
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	dc76      	bgt.n	8000d9c <GPIO_IN_PULLUP+0x224>
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <GPIO_IN_PULLUP+0x140>
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d026      	beq.n	8000d04 <GPIO_IN_PULLUP+0x18c>
 8000cb6:	e071      	b.n	8000d9c <GPIO_IN_PULLUP+0x224>
		{
		case GPIO_PORTA:
			RCC_voidEnablePerClk(RCC_APB2 , RCC_GPIOA);
 8000cb8:	2102      	movs	r1, #2
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f000 f940 	bl	8000f40 <RCC_voidEnablePerClk>
			/*		Clear the Specific for bits for the pin		*/
			mGPIOA->CRH	&=	~(0b1111<<(Copy_u8PinId*4));
 8000cc0:	4b3a      	ldr	r3, [pc, #232]	; (8000dac <GPIO_IN_PULLUP+0x234>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	79ba      	ldrb	r2, [r7, #6]
 8000cc6:	0092      	lsls	r2, r2, #2
 8000cc8:	210f      	movs	r1, #15
 8000cca:	fa01 f202 	lsl.w	r2, r1, r2
 8000cce:	43d2      	mvns	r2, r2
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4a36      	ldr	r2, [pc, #216]	; (8000dac <GPIO_IN_PULLUP+0x234>)
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	6053      	str	r3, [r2, #4]
			/*		Set the Specific for bits for the pin		*/
			mGPIOA->CRH	|=	 (GPIO_INPUT_PULL<<(Copy_u8PinId*4));
 8000cd8:	4b34      	ldr	r3, [pc, #208]	; (8000dac <GPIO_IN_PULLUP+0x234>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	79ba      	ldrb	r2, [r7, #6]
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4a30      	ldr	r2, [pc, #192]	; (8000dac <GPIO_IN_PULLUP+0x234>)
 8000cea:	430b      	orrs	r3, r1
 8000cec:	6053      	str	r3, [r2, #4]
				//Set the specified PIN to be pulled up
			mGPIOA->ODR |= (1<<PinNum);
 8000cee:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <GPIO_IN_PULLUP+0x234>)
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	7bfa      	ldrb	r2, [r7, #15]
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4a2b      	ldr	r2, [pc, #172]	; (8000dac <GPIO_IN_PULLUP+0x234>)
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	60d3      	str	r3, [r2, #12]
			break;
 8000d02:	e04b      	b.n	8000d9c <GPIO_IN_PULLUP+0x224>
		case GPIO_PORTB:
			RCC_voidEnablePerClk(RCC_APB2 , RCC_GPIOB);
 8000d04:	2103      	movs	r1, #3
 8000d06:	2002      	movs	r0, #2
 8000d08:	f000 f91a 	bl	8000f40 <RCC_voidEnablePerClk>
			/*		Clear the Specific for bits for the pin		*/
			mGPIOB->CRH	&=	~(0b1111<<(Copy_u8PinId*4));
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <GPIO_IN_PULLUP+0x238>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	79ba      	ldrb	r2, [r7, #6]
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	210f      	movs	r1, #15
 8000d16:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1a:	43d2      	mvns	r2, r2
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4a24      	ldr	r2, [pc, #144]	; (8000db0 <GPIO_IN_PULLUP+0x238>)
 8000d20:	400b      	ands	r3, r1
 8000d22:	6053      	str	r3, [r2, #4]
			/*		Set the Specific for bits for the pin		*/
			mGPIOB->CRH	|=	 (GPIO_INPUT_PULL<<(Copy_u8PinId*4));
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <GPIO_IN_PULLUP+0x238>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	79ba      	ldrb	r2, [r7, #6]
 8000d2a:	0092      	lsls	r2, r2, #2
 8000d2c:	2108      	movs	r1, #8
 8000d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d32:	4611      	mov	r1, r2
 8000d34:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <GPIO_IN_PULLUP+0x238>)
 8000d36:	430b      	orrs	r3, r1
 8000d38:	6053      	str	r3, [r2, #4]
			//Set the specified PIN to be pulled up
			mGPIOB->ODR |= (1<<PinNum);
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <GPIO_IN_PULLUP+0x238>)
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	7bfa      	ldrb	r2, [r7, #15]
 8000d40:	2101      	movs	r1, #1
 8000d42:	fa01 f202 	lsl.w	r2, r1, r2
 8000d46:	4611      	mov	r1, r2
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <GPIO_IN_PULLUP+0x238>)
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	60d3      	str	r3, [r2, #12]
			break;
 8000d4e:	e025      	b.n	8000d9c <GPIO_IN_PULLUP+0x224>
		case GPIO_PORTC:
			RCC_voidEnablePerClk(RCC_APB2 , RCC_GPIOC);
 8000d50:	2104      	movs	r1, #4
 8000d52:	2002      	movs	r0, #2
 8000d54:	f000 f8f4 	bl	8000f40 <RCC_voidEnablePerClk>
			/*		Clear the Specific for bits for the pin		*/
			mGPIOC->CRH	&=	~(0b1111<<(Copy_u8PinId*4));
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <GPIO_IN_PULLUP+0x23c>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	79ba      	ldrb	r2, [r7, #6]
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	210f      	movs	r1, #15
 8000d62:	fa01 f202 	lsl.w	r2, r1, r2
 8000d66:	43d2      	mvns	r2, r2
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <GPIO_IN_PULLUP+0x23c>)
 8000d6c:	400b      	ands	r3, r1
 8000d6e:	6053      	str	r3, [r2, #4]
			/*		Set the Specific for bits for the pin		*/
			mGPIOC->CRH	|=	 (GPIO_INPUT_PULL<<(Copy_u8PinId*4));
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <GPIO_IN_PULLUP+0x23c>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	79ba      	ldrb	r2, [r7, #6]
 8000d76:	0092      	lsls	r2, r2, #2
 8000d78:	2108      	movs	r1, #8
 8000d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <GPIO_IN_PULLUP+0x23c>)
 8000d82:	430b      	orrs	r3, r1
 8000d84:	6053      	str	r3, [r2, #4]
			//Set the specified PIN to be pulled up
			mGPIOC->ODR |= (1<<PinNum);
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <GPIO_IN_PULLUP+0x23c>)
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	7bfa      	ldrb	r2, [r7, #15]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d92:	4611      	mov	r1, r2
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <GPIO_IN_PULLUP+0x23c>)
 8000d96:	430b      	orrs	r3, r1
 8000d98:	60d3      	str	r3, [r2, #12]
			break;
 8000d9a:	bf00      	nop
		}
		return E_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e000      	b.n	8000da2 <GPIO_IN_PULLUP+0x22a>
	}
	else
	{
		/* 		Return error		*/
		return E_NOT_OK;
 8000da0:	2301      	movs	r3, #1
	}
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40010800 	.word	0x40010800
 8000db0:	40010c00 	.word	0x40010c00
 8000db4:	40011000 	.word	0x40011000

08000db8 <GPIO_PW>:




Std_ReturnType GPIO_PW(uint8 Copy_u8PortId,uint8 Copy_u8PinId,uint8 Copy_u8Value)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	71bb      	strb	r3, [r7, #6]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	717b      	strb	r3, [r7, #5]
	/*		Range Check				*/
	if( (Copy_u8PinId < 16) && (Copy_u8PortId < 3))
 8000dca:	79bb      	ldrb	r3, [r7, #6]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d846      	bhi.n	8000e5e <GPIO_PW+0xa6>
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d843      	bhi.n	8000e5e <GPIO_PW+0xa6>
	{
		switch (Copy_u8Value)
 8000dd6:	797b      	ldrb	r3, [r7, #5]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d01e      	beq.n	8000e1a <GPIO_PW+0x62>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d13c      	bne.n	8000e5a <GPIO_PW+0xa2>
		{
		case GPIO_HIGH:
			switch(Copy_u8PortId)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d012      	beq.n	8000e0c <GPIO_PW+0x54>
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	dc34      	bgt.n	8000e54 <GPIO_PW+0x9c>
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <GPIO_PW+0x3c>
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d006      	beq.n	8000e00 <GPIO_PW+0x48>
				case GPIO_PORTC:
					/*SET_BIT(GPIOC_ODR,Copy_u8PinId);*/
					mGPIOC->BSRR = (1<<Copy_u8PinId);
					break;
			}
			break;
 8000df2:	e02f      	b.n	8000e54 <GPIO_PW+0x9c>
					mGPIOA->BSRR = (1<<Copy_u8PinId);
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	2201      	movs	r2, #1
 8000df8:	409a      	lsls	r2, r3
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <GPIO_PW+0xb4>)
 8000dfc:	611a      	str	r2, [r3, #16]
					break;
 8000dfe:	e00b      	b.n	8000e18 <GPIO_PW+0x60>
					mGPIOB->BSRR = (1<<Copy_u8PinId);
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	2201      	movs	r2, #1
 8000e04:	409a      	lsls	r2, r3
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <GPIO_PW+0xb8>)
 8000e08:	611a      	str	r2, [r3, #16]
					break;
 8000e0a:	e005      	b.n	8000e18 <GPIO_PW+0x60>
					mGPIOC->BSRR = (1<<Copy_u8PinId);
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	409a      	lsls	r2, r3
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <GPIO_PW+0xbc>)
 8000e14:	611a      	str	r2, [r3, #16]
					break;
 8000e16:	bf00      	nop
			break;
 8000e18:	e01c      	b.n	8000e54 <GPIO_PW+0x9c>

		case GPIO_LOW:
			switch(Copy_u8PortId)
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d012      	beq.n	8000e46 <GPIO_PW+0x8e>
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	dc19      	bgt.n	8000e58 <GPIO_PW+0xa0>
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <GPIO_PW+0x76>
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d006      	beq.n	8000e3a <GPIO_PW+0x82>
					case GPIO_PORTC:
						/*CLR_BIT(GPIOC_ODR,Copy_u8PinId);*/
						mGPIOC->BRR = (1<<Copy_u8PinId);
						break;
				}
			break;
 8000e2c:	e014      	b.n	8000e58 <GPIO_PW+0xa0>
						mGPIOA->BRR = (1<<Copy_u8PinId);
 8000e2e:	79bb      	ldrb	r3, [r7, #6]
 8000e30:	2201      	movs	r2, #1
 8000e32:	409a      	lsls	r2, r3
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <GPIO_PW+0xb4>)
 8000e36:	615a      	str	r2, [r3, #20]
						break;
 8000e38:	e00b      	b.n	8000e52 <GPIO_PW+0x9a>
						mGPIOB->BRR = (1<<Copy_u8PinId);
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <GPIO_PW+0xb8>)
 8000e42:	615a      	str	r2, [r3, #20]
						break;
 8000e44:	e005      	b.n	8000e52 <GPIO_PW+0x9a>
						mGPIOC->BRR = (1<<Copy_u8PinId);
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <GPIO_PW+0xbc>)
 8000e4e:	615a      	str	r2, [r3, #20]
						break;
 8000e50:	bf00      	nop
			break;
 8000e52:	e001      	b.n	8000e58 <GPIO_PW+0xa0>
			break;
 8000e54:	bf00      	nop
 8000e56:	e000      	b.n	8000e5a <GPIO_PW+0xa2>
			break;
 8000e58:	bf00      	nop
		}
		return E_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <GPIO_PW+0xa8>
	else
	{
		/*
		 * Return error
		 * */
		return E_NOT_OK;
 8000e5e:	2301      	movs	r3, #1
	}
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	40010c00 	.word	0x40010c00
 8000e74:	40011000 	.word	0x40011000

08000e78 <GPIO_PR>:


Std_ReturnType	GPIO_PR(uint8 Copy_u8PortId, uint8 Copy_u8PinId, uint8 * Copy_pu8Value)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	603a      	str	r2, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	460b      	mov	r3, r1
 8000e86:	71bb      	strb	r3, [r7, #6]
	/*		Range Check				*/
	if( (Copy_u8PinId < 16) && (Copy_u8PortId < 3))
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	d832      	bhi.n	8000ef4 <GPIO_PR+0x7c>
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d82f      	bhi.n	8000ef4 <GPIO_PR+0x7c>
	{
			switch(Copy_u8PortId)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d01e      	beq.n	8000ed8 <GPIO_PR+0x60>
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	dc28      	bgt.n	8000ef0 <GPIO_PR+0x78>
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <GPIO_PR+0x30>
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d00c      	beq.n	8000ec0 <GPIO_PR+0x48>
 8000ea6:	e023      	b.n	8000ef0 <GPIO_PR+0x78>
			{
				case GPIO_PORTA:
					* Copy_pu8Value = GET_BIT(mGPIOA->IDR,Copy_u8PinId);
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <GPIO_PR+0x88>)
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	79bb      	ldrb	r3, [r7, #6]
 8000eae:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	701a      	strb	r2, [r3, #0]
					break;
 8000ebe:	e017      	b.n	8000ef0 <GPIO_PR+0x78>
				case GPIO_PORTB:
					* Copy_pu8Value = GET_BIT(mGPIOB->IDR,Copy_u8PinId);
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <GPIO_PR+0x8c>)
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	701a      	strb	r2, [r3, #0]
					break;
 8000ed6:	e00b      	b.n	8000ef0 <GPIO_PR+0x78>
				case GPIO_PORTC:
					* Copy_pu8Value = GET_BIT(mGPIOC->IDR,Copy_u8PinId);
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <GPIO_PR+0x90>)
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	701a      	strb	r2, [r3, #0]
					break;
 8000eee:	bf00      	nop
			}
			return E_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e000      	b.n	8000ef6 <GPIO_PR+0x7e>
	else
	{
		/*
		 * Return error
		 * */
		return E_NOT_OK;
 8000ef4:	2301      	movs	r3, #1
	}

}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00
 8000f08:	40011000 	.word	0x40011000

08000f0c <RCC_voidSysClockInit>:
#include 	"RCC_Private.h"
#include 	"RCC_Config.h"


void	RCC_voidSysClockInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
	#if			RCC_CLK_TYPE	==		RCC_HSI
				RCC_CR			=		0x00000001;
				RCC_CFGR		=		0x00000000;
				while(GET_BIT(RCC_CR,1) == 0);
	#elif		RCC_CLK_TYPE	==		RCC_HSE
				RCC_CR			=		0x00010000;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <RCC_voidSysClockInit+0x2c>)
 8000f12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f16:	601a      	str	r2, [r3, #0]
				RCC_CFGR		=		0x00000001;
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <RCC_voidSysClockInit+0x30>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
				while(GET_BIT(RCC_CR,17) == 0);
 8000f1e:	bf00      	nop
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <RCC_voidSysClockInit+0x2c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0f9      	beq.n	8000f20 <RCC_voidSysClockInit+0x14>
			#endif
			while(GET_BIT(RCC_CR,25) == 0);
	#else
		#error "Wrong Choice of Clock Type"
	#endif
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40021004 	.word	0x40021004

08000f40 <RCC_voidEnablePerClk>:
//RCC_voidEnablePerClk(RCC_APB2,RCC_GPIOA);
void	RCC_voidEnablePerClk(uint8 BusId , uint8 PerId)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
	/*			Range Check				*/
	if((BusId <3)&&(PerId<32))
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d82d      	bhi.n	8000fb2 <RCC_voidEnablePerClk+0x72>
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	2b1f      	cmp	r3, #31
 8000f5a:	d82a      	bhi.n	8000fb2 <RCC_voidEnablePerClk+0x72>
	{
		switch(BusId)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d01c      	beq.n	8000f9c <RCC_voidEnablePerClk+0x5c>
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	dc25      	bgt.n	8000fb2 <RCC_voidEnablePerClk+0x72>
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <RCC_voidEnablePerClk+0x30>
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d00b      	beq.n	8000f86 <RCC_voidEnablePerClk+0x46>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR,PerId);		break;
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerId);		break;
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerId);		break;
		}
	}
}
 8000f6e:	e020      	b.n	8000fb2 <RCC_voidEnablePerClk+0x72>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR,PerId);		break;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <RCC_voidEnablePerClk+0x7c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	79ba      	ldrb	r2, [r7, #6]
 8000f76:	2101      	movs	r1, #1
 8000f78:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <RCC_voidEnablePerClk+0x7c>)
 8000f80:	430b      	orrs	r3, r1
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	e015      	b.n	8000fb2 <RCC_voidEnablePerClk+0x72>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerId);		break;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <RCC_voidEnablePerClk+0x80>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	79ba      	ldrb	r2, [r7, #6]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	4611      	mov	r1, r2
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <RCC_voidEnablePerClk+0x80>)
 8000f96:	430b      	orrs	r3, r1
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e00a      	b.n	8000fb2 <RCC_voidEnablePerClk+0x72>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerId);		break;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <RCC_voidEnablePerClk+0x84>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	79ba      	ldrb	r2, [r7, #6]
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <RCC_voidEnablePerClk+0x84>)
 8000fac:	430b      	orrs	r3, r1
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	bf00      	nop
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40021014 	.word	0x40021014
 8000fc0:	4002101c 	.word	0x4002101c
 8000fc4:	40021018 	.word	0x40021018

08000fc8 <STK_vidInit>:

static	void	(*STK_CallBack)	(void)	=	NULL	;
static	uint8	u8_TypOfInterval	=	5	;

void STK_vidInit()
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
	/*		Disable timer and disable interrupt and Clk Source AHB/8	*/
	STK -> CTRL = 0x00000000;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <STK_vidInit+0x14>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
	//STK -> CTRL = 0x00000004;
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <STK_voidBusyWait>:
void STK_voidBusyWait(uint32 Copy_u32Counts)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	STK -> VAL 	= 0;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <STK_voidBusyWait+0x54>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
	STK -> LOAD = Copy_u32Counts;
 8000fee:	4a11      	ldr	r2, [pc, #68]	; (8001034 <STK_voidBusyWait+0x54>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6053      	str	r3, [r2, #4]

	/*	Enable timer		*/
	SET_BIT((STK -> CTRL),0);
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <STK_voidBusyWait+0x54>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <STK_voidBusyWait+0x54>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6013      	str	r3, [r2, #0]

	/*	Wait till the flag rises		*/
	while ((GET_BIT((STK -> CTRL),16))==0)
 8001000:	e000      	b.n	8001004 <STK_voidBusyWait+0x24>
	{
		asm("NOP");
 8001002:	bf00      	nop
	while ((GET_BIT((STK -> CTRL),16))==0)
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <STK_voidBusyWait+0x54>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f8      	beq.n	8001002 <STK_voidBusyWait+0x22>
	}

	/*	Stop Timer 		*/
	CLR_BIT((STK -> CTRL),0);
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <STK_voidBusyWait+0x54>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <STK_voidBusyWait+0x54>)
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	6013      	str	r3, [r2, #0]
	STK -> VAL 	= 0;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <STK_voidBusyWait+0x54>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
	STK -> LOAD = 0;
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <STK_voidBusyWait+0x54>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010

08001038 <Delay_us>:

void Delay_us(uint32 Copy_u32uSec)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	STK_voidBusyWait(Copy_u32uSec);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ffcd 	bl	8000fe0 <STK_voidBusyWait>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <Delay_ms>:

void Delay_ms(uint32 Copy_u32mSec)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	for(uint16 i=0;i<MicroToMilliSec;i++)
 8001056:	2300      	movs	r3, #0
 8001058:	81fb      	strh	r3, [r7, #14]
 800105a:	e005      	b.n	8001068 <Delay_ms+0x1a>
	{
		STK_voidBusyWait(Copy_u32mSec);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ffbf 	bl	8000fe0 <STK_voidBusyWait>
	for(uint16 i=0;i<MicroToMilliSec;i++)
 8001062:	89fb      	ldrh	r3, [r7, #14]
 8001064:	3301      	adds	r3, #1
 8001066:	81fb      	strh	r3, [r7, #14]
 8001068:	89fb      	ldrh	r3, [r7, #14]
 800106a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800106e:	d3f5      	bcc.n	800105c <Delay_ms+0xe>
	}

}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <SysTick_Handler>:
	/*	Enable timer			*/
	SET_BIT((STK -> CTRL),0);
}

void	SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	volatile uint8 Local_u8Dummy = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	71fb      	strb	r3, [r7, #7]
	if(u8_TypOfInterval == STK_SINGLE_INTERVAL)
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <SysTick_Handler+0x54>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d111      	bne.n	80010b2 <SysTick_Handler+0x36>
	{
		/*	Disable Interrupt		*/
		CLR_BIT((STK -> CTRL),1);
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <SysTick_Handler+0x58>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <SysTick_Handler+0x58>)
 8001094:	f023 0302 	bic.w	r3, r3, #2
 8001098:	6013      	str	r3, [r2, #0]

		/*	Stop Timer 				*/
		CLR_BIT((STK -> CTRL),0);
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <SysTick_Handler+0x58>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <SysTick_Handler+0x58>)
 80010a0:	f023 0301 	bic.w	r3, r3, #1
 80010a4:	6013      	str	r3, [r2, #0]
		STK -> VAL 	= 0;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <SysTick_Handler+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
		STK -> LOAD = 0;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <SysTick_Handler+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
	}

	STK_CallBack();
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <SysTick_Handler+0x5c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4798      	blx	r3

	/*	Clear the interrupt Flag		*/
	Local_u8Dummy = (GET_BIT((STK -> CTRL),16));
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SysTick_Handler+0x58>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0c1b      	lsrs	r3, r3, #16
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	71fb      	strb	r3, [r7, #7]
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	e000e010 	.word	0xe000e010
 80010d8:	20000020 	.word	0x20000020

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	float f32Humid=0 , f32Temp = 0;
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  //HAL_Init();

	/*	RCC Init						*/
	RCC_voidSysClockInit();
 80010ee:	f7ff ff0d 	bl	8000f0c <RCC_voidSysClockInit>

	/* USER CODE BEGIN Init */
//	GPIO_PDir(GPIO_PORTC, GPIO_PIN13, GPIO_OUTPUT_50_PP);
//	GPIO_PDir(GPIO_PORTB, GPIO_PIN4, GPIO_INPUT_PULL);
	STK_vidInit();
 80010f2:	f7ff ff69 	bl	8000fc8 <STK_vidInit>
////		  {
////			//  asm("NOP");
////		  }
//	  }

	  DHT11_ReadData(&f32Humid, &f32Temp);
 80010f6:	463a      	mov	r2, r7
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fc07 	bl	8000910 <DHT11_ReadData>

	  Delay_ms(3000);
 8001102:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001106:	f7ff ffa2 	bl	800104e <Delay_ms>
	  DHT11_ReadData(&f32Humid, &f32Temp);
 800110a:	e7f4      	b.n	80010f6 <main+0x1a>

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr

0800114e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
	...

0800115c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800115c:	f7ff fff7 	bl	800114e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001178:	4c09      	ldr	r4, [pc, #36]	; (80011a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001186:	f000 f80f 	bl	80011a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800118a:	f7ff ffa7 	bl	80010dc <main>
  bx lr
 800118e:	4770      	bx	lr
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001198:	08001210 	.word	0x08001210
  ldr r2, =_sbss
 800119c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80011a0:	20000024 	.word	0x20000024

080011a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC1_2_IRQHandler>
	...

080011a8 <__libc_init_array>:
 80011a8:	b570      	push	{r4, r5, r6, lr}
 80011aa:	2600      	movs	r6, #0
 80011ac:	4d0c      	ldr	r5, [pc, #48]	; (80011e0 <__libc_init_array+0x38>)
 80011ae:	4c0d      	ldr	r4, [pc, #52]	; (80011e4 <__libc_init_array+0x3c>)
 80011b0:	1b64      	subs	r4, r4, r5
 80011b2:	10a4      	asrs	r4, r4, #2
 80011b4:	42a6      	cmp	r6, r4
 80011b6:	d109      	bne.n	80011cc <__libc_init_array+0x24>
 80011b8:	f000 f81a 	bl	80011f0 <_init>
 80011bc:	2600      	movs	r6, #0
 80011be:	4d0a      	ldr	r5, [pc, #40]	; (80011e8 <__libc_init_array+0x40>)
 80011c0:	4c0a      	ldr	r4, [pc, #40]	; (80011ec <__libc_init_array+0x44>)
 80011c2:	1b64      	subs	r4, r4, r5
 80011c4:	10a4      	asrs	r4, r4, #2
 80011c6:	42a6      	cmp	r6, r4
 80011c8:	d105      	bne.n	80011d6 <__libc_init_array+0x2e>
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
 80011cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80011d0:	4798      	blx	r3
 80011d2:	3601      	adds	r6, #1
 80011d4:	e7ee      	b.n	80011b4 <__libc_init_array+0xc>
 80011d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80011da:	4798      	blx	r3
 80011dc:	3601      	adds	r6, #1
 80011de:	e7f2      	b.n	80011c6 <__libc_init_array+0x1e>
 80011e0:	08001208 	.word	0x08001208
 80011e4:	08001208 	.word	0x08001208
 80011e8:	08001208 	.word	0x08001208
 80011ec:	0800120c 	.word	0x0800120c

080011f0 <_init>:
 80011f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f2:	bf00      	nop
 80011f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011f6:	bc08      	pop	{r3}
 80011f8:	469e      	mov	lr, r3
 80011fa:	4770      	bx	lr

080011fc <_fini>:
 80011fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fe:	bf00      	nop
 8001200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001202:	bc08      	pop	{r3}
 8001204:	469e      	mov	lr, r3
 8001206:	4770      	bx	lr
